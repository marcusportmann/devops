apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  profile: minimal

  namespace: istio-system

  addonComponents:
{% if ((k8s_istio_grafana_enabled is defined) and (k8s_istio_grafana_enabled != None) and (k8s_istio_grafana_enabled == True))  %}
    grafana:
      enabled: true
{% else %}
    grafana:
      enabled: false
{% endif %}
    istiocoredns:
      enabled: false
{% if ((k8s_istio_kiali_enabled is defined) and (k8s_istio_kiali_enabled != None) and (k8s_istio_kiali_enabled == True))  %}
    kiali:
      enabled: true
{% else %}
    kiali:
      enabled: false
{% endif %}

{% if ((k8s_istio_prometheus_enabled is defined) and (k8s_istio_prometheus_enabled != None) and (k8s_istio_prometheus_enabled == True))  %}
    prometheus:
      enabled: true
{% else %}
    prometheus:
      enabled: false
{% endif %}

{% if ((k8s_istio_tracing_enabled is defined) and (k8s_istio_tracing_enabled != None) and (k8s_istio_tracing_enabled == True))  %}
    tracing:
      enabled: true
{% else %}
    tracing:
      enabled: false
{% endif %}

  components:
    egressGateways:
    - name: istio-egressgateway
      enabled: true
    ingressGateways:
    - name: istio-ingressgateway
      enabled: true
    # TODO: Confirm if this should be enabled -- MARCUS
    policy:
      enabled: false
    # TODO: Confirm is this should be enabled -- MARCUS
    telemetry:
      enabled: false

# See https://istio.io/docs/reference/config/istio.mesh.v1alpha1/
  meshConfig:
    enableAutoMtls: true
    # TODO: Confirm if this should be enabled -- MARCUS
    enablePrometheusMerge: false


# See https://archive.istio.io/v1.4/docs/reference/config/installation-options/
  values:
    gateways:
      istio-ingressgateway:
        labels:
          app: istio-ingressgateway
          istio: istio-ingressgateway
        type: NodePort
        # TODO: CHECK ALL THESE PORTS -- MARCUS
        ports:
        - name: status-port
          port: 15020
          targetPort: 15020
        - name: http2
          port: 80
          targetPort: 80
          nodePort: 30080
        - name: https
          port: 443
          targetPort: 443
          nodePort: 30443
{% if ((k8s_istio_grafana_enabled is defined) and (k8s_istio_grafana_enabled != None) and (k8s_istio_grafana_enabled == True)) %}
        - name: https-grafana
          port: 3000
          targetPort: 3000
          nodePort: 32500
{% endif %}
{% if ((k8s_istio_tracing_enabled is defined) and (k8s_istio_tracing_enabled != None) and (k8s_istio_tracing_enabled == True)) %}
        - name: https-jaeger
          port: 16686
          targetPort: 16686
          nodePort: 32501
{% endif %}
{% if ((k8s_istio_kiali_enabled is defined) and (k8s_istio_kiali_enabled != None) and (k8s_istio_kiali_enabled == True))  %}
        - name: https-kiali
          port: 20001
          targetPort: 20001
          nodePort: 32502
{% endif %}
{% if ((k8s_istio_prometheus_enabled is defined) and (k8s_istio_prometheus_enabled != None) and (k8s_istio_prometheus_enabled == True)) %}
        - name: https-prometheus
          port: 9090
          targetPort: 9090
          nodePort: 32503
        - name: https-alert-manager
          port: 9093
          targetPort: 9093
          nodePort: 32504
{% endif %}
        - name: tcp
          port: 1400
          targetPort: 1400
          nodePort: 31400
        - name: tls
          port: 1443
          targetPort: 1443
          nodePort: 31443

#         debug: info
#         domain: ""
#         env: {}
#         meshExpansionPorts:
#         - name: tcp-pilot-grpc-tls
#           port: 15011
#           targetPort: 15011
#         - name: tcp-istiod
#           port: 15012
#           targetPort: 15012
#         - name: tcp-citadel-grpc-tls
#           port: 8060
#           targetPort: 8060
#         - name: tcp-dns-tls
#           port: 853
#           targetPort: 8853
#         name: istio-ingressgateway
#         secretVolumes:
#         - mountPath: /etc/istio/ingressgateway-certs
#           name: ingressgateway-certs
#           secretName: istio-ingressgateway-certs
#         - mountPath: /etc/istio/ingressgateway-ca-certs
#           name: ingressgateway-ca-certs
#           secretName: istio-ingressgateway-ca-certs

    global:
      proxy:
        clusterDomain: {{ k8s_cluster_domain }}
        # logLevel: debug
      sds:
        enabled: true
{% if ((k8s_monitoring_enabled is defined) and (k8s_monitoring_enabled != None) and (k8s_monitoring_enabled == True))  %}
      tracer:
        zipkin:
          address: jaeger-collector.monitoring-system.svc.{{ k8s_cluster_domain }}:9411
{% endif %}
      trustDomain: {{ k8s_cluster_domain }}
    kiali:
{% if ((k8s_monitoring_enabled is defined) and (k8s_monitoring_enabled != None) and (k8s_monitoring_enabled == True) and (k8s_monitoring_prometheus_enabled is defined) and (k8s_monitoring_prometheus_enabled != None) and (k8s_monitoring_prometheus_enabled == True)) %}
      prometheusAddr: http://prometheus-server.monitoring-system.svc.{{ k8s_cluster_domain }}:9090
{% endif %}
      dashboard:
{% if ((k8s_monitoring_enabled is defined) and (k8s_monitoring_enabled != None) and (k8s_monitoring_enabled == True) and (k8s_monitoring_grafana_enabled is defined) and (k8s_monitoring_grafana_enabled != None) and (k8s_monitoring_grafana_enabled == True)) %}
        grafanaURL: https://{{ groups['k8s_master'][0] }}:32500/
        grafanaInClusterURL: http://grafana.monitoring-system.svc.{{ k8s_cluster_domain }}:3000
{% endif %}
{% if ((k8s_monitoring_enabled is defined) and (k8s_monitoring_enabled != None) and (k8s_monitoring_enabled == True) and (k8s_monitoring_jaeger_enabled is defined) and (k8s_monitoring_jaeger_enabled != None) and (k8s_monitoring_jaeger_enabled == True)) %}
        jaegerURL: https://{{ groups['k8s_master'][0] }}:32501/
        jaegerInClusterURL: http://jaeger-query.monitoring-system.svc.{{ k8s_cluster_domain }}:16686
{% endif %}

    # TODO: CONFIRM THE BELOW IS APPLIED AUTOMATICALLY NOW (https://istio.io/docs/tasks/security/cert-management/plugin-ca-cert/)
    # security:
    #  selfSigned: false




