---
# file: roles/k8s_istio/tasks/k8s.yaml

#  ___ ____ _____ ___ ___
# |_ _/ ___|_   _|_ _/ _ \
#  | |\___ \ | |  | | | | |
#  | | ___) || |  | | |_| |
# |___|____/ |_| |___\___/
#
- name: Initialize the Istio service mesh
  block:
  - name: Download and extract the Istio package if required
    block:
    - name: Check whether the istio {{ k8s_config.istio.package_version }} package has been downloaded
      become: no
      local_action: stat path='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/istio-{{ k8s_config.istio.package_version }}-linux-amd64.tar.gz'
      register: istio_package_stat_result

    - name: Download the istio {{ k8s_config.istio.package_version }} package
      become: no
      local_action: get_url url='https://github.com/istio/istio/releases/download/{{ k8s_config.istio.package_version }}/istio-{{ k8s_config.istio.package_version }}-linux-amd64.tar.gz' dest='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/istio-{{ k8s_config.istio.package_version }}-linux-amd64.tar.gz' checksum={{ k8s_config.istio.package_checksum }}
      when: (istio_package_stat_result.stat.exists == False)

    - name: Extract the istio {{ k8s_config.istio.package_version }} package
      unarchive:
        src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/istio-{{ k8s_config.istio.package_version }}-linux-amd64.tar.gz'
        dest: /var/tmp/ansible
        creates: /var/tmp/ansible/istio-{{ k8s_config.istio.package_version }}

  - name: Check if the correct version of Istio is installed
    shell:
      cmd: /usr/bin/istioctl version --remote | grep 'control plane version' | awk -F ':' {'print $2'} | tr -d ' '
    register: istio_installed_version_output

  - set_fact:
      istio_installed_version: '{{ istio_installed_version_output.stdout }}'
    when: (istio_installed_version_output is succeeded)

  - set_fact:
      istio_installed_version: ''
    when: (istio_installed_version_output is not succeeded)

  - name: Create the Istio configuration file
    template:
      src: istio-config.yaml.j2
      dest: /var/tmp/ansible/istio-config.yaml
    register: create_istio_configuration_file_result

  - name: Install and configure the Istio service mesh
    block:
    - name: Copy the keys and certificates for the Istio service mesh
      block:
      - name: Create the /var/tmp/ansible/istio-pki directory
        file:
          path: /var/tmp/ansible/istio-pki
          state: directory

      - name: Copy the Istio intermediate CA private key
        copy:
          src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-istio-ca-{{ k8s_config.cluster_name.replace('_', '-') }}.key"
          dest: '/var/tmp/ansible/istio-pki/ca-key.pem'

      - name: Copy the Istio intermediate CA certificate
        copy:
          src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-istio-ca-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"
          dest: '/var/tmp/ansible/istio-pki/ca-cert.pem'

      - name: Copy the Root CA certificate
        copy:
          src: '{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/ca.crt'
          dest: '/var/tmp/ansible/istio-pki/root-cert.pem'

      - name: Copy the Istio intermediate CA certificate chain
        copy:
          src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-istio-ca-chain-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"
          dest: '/var/tmp/ansible/istio-pki/cert-chain.pem'

      - name: Copy the Istio ingress gateway private key
        copy:
          src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-istio-ingressgateway-{{ k8s_config.cluster_name.replace('_', '-') }}.key"
          dest: '/var/tmp/ansible/istio-pki/ingressgateway-key.pem'

      - name: Copy the Istio ingress gateway certificate
        copy:
          src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-istio-ingressgateway-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"
          dest: '/var/tmp/ansible/istio-pki/ingressgateway-cert.pem'

    - name: Create the istio-system namespace
      shell:
        cmd: /usr/bin/kubectl create ns istio-system --dry-run -o yaml | kubectl apply -f -

    - name: Disable the TopoLVM mutating webhook for the istio-system namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns istio-system topolvm.cybozu.com/webhook=ignore
      when: ((k8s_config.storage.topolvm.enabled is defined) and (k8s_config.storage.topolvm.enabled != None) and (k8s_config.storage.topolvm.enabled == true))

    - name: Create the secret in the istio-system namespace for the Istio intermediate CA private key and certificates
      shell:
        cmd: /usr/bin/kubectl create -n istio-system secret generic cacerts  --from-file=/var/tmp/ansible/istio-pki/ca-cert.pem --from-file=/var/tmp/ansible/istio-pki/ca-key.pem --from-file=/var/tmp/ansible/istio-pki/root-cert.pem --from-file=/var/tmp/ansible/istio-pki/cert-chain.pem  --dry-run -o yaml | kubectl apply -f -

    - name: Create the secret in the istio-system namespace for the Istio ingress gateway private key and certificate
      shell:
        cmd: /usr/bin/kubectl create -n istio-system secret tls ingressgateway-certs --key=/var/tmp/ansible/istio-pki/ingressgateway-key.pem --cert=/var/tmp/ansible/istio-pki/ingressgateway-cert.pem  --dry-run -o yaml | kubectl apply -f -

    - name: Create the secret in the istio-system namespace for the Istio ingress gateway CA certificate
      shell:
        cmd: /usr/bin/kubectl create -n istio-system secret generic ingressgateway-ca-certs --from-file=/var/tmp/ansible/istio-pki/root-cert.pem  --dry-run -o yaml | kubectl apply -f -

    - name: Initialize the Istio service mesh using the custom profile
      shell:
        cmd: "/usr/bin/istioctl manifest install -y -f /var/tmp/ansible/istio-config.yaml"

    - name: Wait for the Istio service mesh initialization to complete
      command:
        cmd: /usr/bin/kubectl wait --namespace=istio-system --for=condition=Ready pods --all --timeout=1200s

    - name: Enable the default Istio ingress gateway
      block:
      - name: Generate the default Istio ingress gateway configuration
        template:
          src: istio-default-gateway.yaml.j2
          dest: /var/tmp/ansible/istio-default-gateway.yaml

      - name: Apply the default Istio ingress gateway configuration
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-default-gateway.yaml

    when: ((istio_installed_version != k8s_config.istio.package_version) or (create_istio_configuration_file_result.changed == True))


  - name: Install and configure Kiali
    block:
    - name: Configure the Kiali Helm repository
      block:
      - name: Check if the Kiali Helm repository has been added
        shell:
          cmd: /usr/bin/helm repo list | grep kiali | wc -l
        register: helm_kiali_repo_added_output

      - name: Add the Kiali Helm repository
        command:
          cmd: /usr/bin/helm repo add kiali https://kiali.org/helm-charts
        when: helm_kiali_repo_added_output.stdout == '0'

    - name: Initialize the Kiali secret
      block:
      - template:
          src: istio-kiali-secret.yaml.j2
          dest: /var/tmp/ansible/istio-kiali-secret.yaml

      - name: Create the Kiali secret
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-kiali-secret.yaml

    - name: Check if Kialia is installed
      shell:
        cmd: /usr/bin/helm -n istio-system list --filter 'kiali-server' --output json | jq -r '.[0].chart' | cut -s -f3- -d-
      register: kiali_installed_helm_chart_version_output

    - name: Install Kiali
      block:
      - name: Generate the Kiali Helm values
        template:
          src: kiali-values.yaml.j2
          dest: /var/tmp/ansible/kiali-values.yaml

      - name: Install Kiali using Helm
        command:
          cmd: /usr/bin/helm upgrade kiali-server kiali/kiali-server --install --version={{ k8s_config.istio.kiali.helm_chart_version }} --namespace=istio-system --values=/var/tmp/ansible/kiali-values.yaml

      - name: Wait for 10 seconds for the Kiali initialization to start
        wait_for:
          timeout: 10

      - name: Wait for the Kiali initialization to complete
        command:
          cmd: /usr/bin/kubectl wait --namespace=istio-system --for=condition=Ready pods --all --timeout=1200s

      - name: Enable ingress for Kiali
        block:
        - name: Generate the Kiali ingress configuration
          template:
            src: istio-kiali-ingress.yaml.j2
            dest: /var/tmp/ansible/istio-kiali-ingress.yaml

        - name: Apply the Kiali ingress configuration
          command:
            cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-kiali-ingress.yaml

      when: kiali_installed_helm_chart_version_output.stdout != k8s_config.istio.kiali.helm_chart_version

    when: ((k8s_config.istio.kiali.enabled is defined) and (k8s_config.istio.kiali.enabled != None) and (k8s_config.istio.kiali.enabled == true))


  - name: Enable ingress for Jaeger
    block:
    - name: Generate the Jaeger ingress configuration
      template:
        src: istio-jaeger-ingress.yaml.j2
        dest: /var/tmp/ansible/istio-jaeger-ingress.yaml

    - name: Apply the Jaeger ingress configuration
      command:
        cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-jaeger-ingress.yaml

    when: ((k8s_config.monitoring.jaeger.enabled is defined) and (k8s_config.monitoring.jaeger.enabled != None) and (k8s_config.monitoring.jaeger.enabled == True))

  - name: Enable ingress for Kibana
    block:
    - name: Generate the Kibana ingress configuration
      template:
        src: istio-kibana-ingress.yaml.j2
        dest: /var/tmp/ansible/istio-kibana-ingress.yaml

    - name: Apply the Kibana ingress configuration
      command:
        cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-kibana-ingress.yaml

    when: ((k8s_config.monitoring.kibana.enabled is defined) and (k8s_config.monitoring.kibana.enabled != None) and (k8s_config.monitoring.kibana.enabled == True))

  - name: Enable ingress for Grafana
    block:
    - name: Generate the Grafana ingress configuration
      template:
        src: istio-grafana-ingress.yaml.j2
        dest: /var/tmp/ansible/istio-grafana-ingress.yaml

    - name: Apply the Grafana ingress configuration
      command:
        cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-grafana-ingress.yaml

    when: ((k8s_config.monitoring.grafana.enabled is defined) and (k8s_config.monitoring.grafana.enabled != None) and (k8s_config.monitoring.grafana.enabled == True))

  - name: Enable ingress for Prometheus Server
    block:
    - name: Generate the Prometheus Server ingress configuration
      template:
        src: istio-prometheus-server-ingress.yaml.j2
        dest: /var/tmp/ansible/istio-prometheus-server-ingress.yaml

    - name: Apply the Prometheus Server ingress configuration
      command:
        cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-prometheus-server-ingress.yaml

    - name: Generate the Prometheus Alert Manager ingress configuration
      template:
        src: istio-prometheus-alertmanager-ingress.yaml.j2
        dest: /var/tmp/ansible/istio-prometheus-alertmanager-ingress.yaml

    - name: Apply the Prometheus Alert Manager ingress configuration
      command:
        cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-prometheus-alertmanager-ingress.yaml

    when: ((k8s_config.monitoring.prometheus.enabled is defined) and (k8s_config.monitoring.prometheus.enabled != None) and (k8s_config.monitoring.prometheus.enabled == True))

  when: ((k8s_config.istio.enabled is defined) and (k8s_config.istio.enabled != None) and (k8s_config.istio.enabled == true))


