# file: roles/k8s_istio/tasks/main.yaml

#  ___ ____ _____ ___ ___
# |_ _/ ___|_   _|_ _/ _ \
#  | |\___ \ | |  | | | | |
#  | | ___) || |  | | |_| |
# |___|____/ |_| |___\___/
#
- name: Install istioctl
  block:
  - debug:
      msg: Check whether the istioctl {{ istio_version }} package has been installed

  - stat:
      path: /usr/bin/istioctl
    register: istioctl_installed_stat_result

  - shell:
      cmd: /usr/bin/istioctl version --remote=false
    register: istioctl_installed_version_output
    when: (istioctl_installed_stat_result.stat.exists == True)

  - set_fact:
      istioctl_installed_version: '{{ istioctl_installed_version_output.stdout }}'
    when: (istioctl_installed_stat_result.stat.exists == True)

  - set_fact:
      istioctl_installed_version: ''
    when: (istioctl_installed_stat_result.stat.exists == False)

  - block:
    - debug:
        msg: Install the istioctl {{ istio_version }} package

    - name: Check whether the istioctl {{ istio_version }} package has been downloaded
      become: no
      local_action: stat path=packages/istioctl-{{ istio_version }}-linux.tar.gz
      register: istioctl_package_stat_result

    - name: Download the istioctl {{ istio_version }} package
      become: no
      local_action: get_url url='https://github.com/istio/istio/releases/download/{{ istio_version }}/istioctl-{{ istio_version }}-linux.tar.gz' dest='packages/istioctl-{{ istio_version }}-linux.tar.gz' checksum={{ istioctl_package_checksum }}
      when: (istioctl_package_stat_result.stat.exists == False)

    - name: Remove the existing istioctl binary
      file:
        path: /usr/bin/istioctl
        state: absent

    - name: Extract the istioctl binary from the istioctl {{ istio_version }} package
      unarchive:
        src: packages/istioctl-{{ istio_version }}-linux.tar.gz
        dest: /usr/bin
        creates: /usr/bin/istioctl

    when: (istioctl_installed_version != istio_version)

  when: ((istio_enabled is defined) and (istio_enabled != None) and (istio_enabled == true))

- name: Initialize the Istio service mesh
  block:
  - name: Download and extract the Istio package if required
    block:
    - name: Check whether the istio {{ istio_version }} package has been downloaded
      become: no
      local_action: stat path=packages/istio-{{ istio_version }}-linux.tar.gz
      register: istio_package_stat_result

    - name: Download the istio {{ istio_version }} package
      become: no
      local_action: get_url url='https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux.tar.gz' dest='packages/istio-{{ istio_version }}-linux.tar.gz' checksum={{ istio_package_checksum }}
      when: (istio_package_stat_result.stat.exists == False)

    - name: Extract the istio {{ istio_version }} package
      unarchive:
        src: packages/istio-{{ istio_version }}-linux.tar.gz
        dest: /var/tmp/ansible
        creates: /var/tmp/ansible/istio-{{ istio_version }}

  - name: Check if the correct version of Istio is installed
    shell:
      cmd: /usr/bin/istioctl version --remote | grep "pilot version" | awk -F ':' {'print $2'} | tr -d ' '
    register: istio_installed_version_output

  - set_fact:
      istio_installed_version: '{{ istio_installed_version_output.stdout }}'
    when: (istio_installed_version_output is succeeded)

  - set_fact:
      istio_installed_version: ''
    when: (istio_installed_version_output is not succeeded)

  - name: Install and configure the Istio service mesh
    block:
    - name: Copying the keys and certificates for the Istio service mesh
      block:
      - name: Create the /var/tmp/ansible/istio-pki directory
        file:
          path: /var/tmp/ansible/istio-pki
          state: directory

      - name: Copy the Istio intermediate CA private key to the /var/tmp/ansible/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ca.key
          dest: /var/tmp/ansible/istio-pki/ca-key.pem

      - name: Copy the Istio intermediate CA certificate to the /var/tmp/ansible/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ca.crt
          dest: /var/tmp/ansible/istio-pki/ca-cert.pem

      - name: Copy the Root CA certificate to the /var/tmp/ansible/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/ca.crt
          dest: /var/tmp/ansible/istio-pki/root-cert.pem

      - name: Copy the Istio intermediate CA certificate chain to the /var/tmp/ansible/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ca-chain.crt
          dest: /var/tmp/ansible/istio-pki/cert-chain.pem

      - name: Copy the Istio ingress gateway private key to the /var/tmp/ansible/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ingressgateway.key
          dest: /var/tmp/ansible/istio-pki/ingressgateway-key.pem

      - name: Copy the Istio ingress gateway certificate to the /var/tmp/ansible/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ingressgateway.crt
          dest: /var/tmp/ansible/istio-pki/ingressgateway-cert.pem

    - name: Create the istio-system namespace
      shell:
        cmd: /usr/bin/kubectl create ns istio-system --dry-run -o yaml | kubectl apply -f -

    - name: Disable the TopoLVM mutating webhook for the istio-system namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns istio-system topolvm.cybozu.com/webhook=ignore
      when: ((topolvm_enabled is defined) and (topolvm_enabled != None) and (topolvm_enabled == true))

    - name: Create the secret in the istio-system namespace for the Istio intermediate CA private key and certificates
      shell:
        cmd: /usr/bin/kubectl create -n istio-system secret generic cacerts  --from-file=/var/tmp/ansible/istio-pki/ca-cert.pem --from-file=/var/tmp/ansible/istio-pki/ca-key.pem --from-file=/var/tmp/ansible/istio-pki/root-cert.pem --from-file=/var/tmp/ansible/istio-pki/cert-chain.pem  --dry-run -o yaml | kubectl apply -f -

    - name: Create the secret in the istio-system namespace for the Istio ingress gateway private key and certificate
      shell:
        cmd: /usr/bin/kubectl create -n istio-system secret tls istio-ingressgateway-certs --key=/var/tmp/ansible/istio-pki/ingressgateway-key.pem --cert=/var/tmp/ansible/istio-pki/ingressgateway-cert.pem  --dry-run -o yaml | kubectl apply -f -

    - name: Create the secret in the istio-system namespace for the Istio ingress gateway CA certificate
      shell:
        cmd: /usr/bin/kubectl create -n istio-system secret generic istio-ingressgateway-ca-certs --from-file=/var/tmp/ansible/istio-pki/root-cert.pem  --dry-run -o yaml | kubectl apply -f -

    - name: Initialize the Kiali secret
      block:
      - template:
          src: istio-kiali-secret.yaml.j2
          dest: /var/tmp/ansible/istio-kiali-secret.yaml

      - name: Create the Kiali secret
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-kiali-secret.yaml

      when: ((istio_kiali_enabled is defined) and (istio_kiali_enabled != None) and (istio_kiali_enabled == true))

    - name: Create the Istio configuration file
      template:
        src: istio-config.yaml.j2
        dest: /var/tmp/ansible/istio-config.yaml

    - name: Initialize the Istio service mesh
      shell:
        cmd: /usr/bin/istioctl manifest apply -f /var/tmp/ansible/istio-config.yaml

    - name: Wait for the Istio service mesh initialization to complete
      command:
        cmd: /usr/bin/kubectl wait --namespace=istio-system --for=condition=Ready pods --all --timeout=900s
      when: ("k8s_worker" not in groups.keys())

    - name: Enable ingress for Jaeger
      block:
      - name: Generate the Jaeger ingress configuration
        template:
          src: istio-jaeger-ingress.yaml.j2
          dest: /var/tmp/ansible/istio-jaeger-ingress.yaml

      - name: Apply the Jaeger ingress configuration
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-jaeger-ingress.yaml

      when: (((istio_tracing_enabled is defined) and (istio_tracing_enabled != None) and (istio_tracing_enabled == True)) or ((monitoring_enabled is defined) and (monitoring_enabled != None) and (monitoring_enabled == True) and (monitoring_jaeger_enabled is defined) and (monitoring_jaeger_enabled != None) and (monitoring_jaeger_enabled == True)))

    - name: Enable ingress for Kiali
      block:
      - name: Generate the Kiali ingress configuration
        template:
          src: istio-kiali-ingress.yaml.j2
          dest: /var/tmp/ansible/istio-kiali-ingress.yaml

      - name: Apply the Kiali ingress configuration
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-kiali-ingress.yaml

      when: ((istio_kiali_enabled is defined) and (istio_kiali_enabled != None) and (istio_kiali_enabled == true))

    - name: Enable ingress for Kibana
      block:
      - name: Generate the Kibana ingress configuration
        template:
          src: istio-kibana-ingress.yaml.j2
          dest: /var/tmp/ansible/istio-kibana-ingress.yaml

      - name: Apply the Kibana ingress configuration
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-kibana-ingress.yaml

      when: ((monitoring_enabled is defined) and (monitoring_enabled != None) and (monitoring_enabled == True) and (monitoring_kibana_enabled is defined) and (monitoring_kibana_enabled != None) and (monitoring_kibana_enabled == True))

    - name: Enable ingress for Grafana
      block:
      - name: Generate the Grafana ingress configuration
        template:
          src: istio-grafana-ingress.yaml.j2
          dest: /var/tmp/ansible/istio-grafana-ingress.yaml

      - name: Apply the Grafana ingress configuration
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-grafana-ingress.yaml

      when: (((istio_grafana_enabled is defined) and (istio_grafana_enabled != None) and (istio_grafana_enabled == True)) or ((monitoring_enabled is defined) and (monitoring_enabled != None) and (monitoring_enabled == True) and (monitoring_grafana_enabled is defined) and (monitoring_grafana_enabled != None) and (monitoring_grafana_enabled == True)))

    - name: Enable ingress for Prometheus
      block:
      - name: Generate the Prometheus ingress configuration
        template:
          src: istio-prometheus-ingress.yaml.j2
          dest: /var/tmp/ansible/istio-prometheus-ingress.yaml

      - name: Apply the Prometheus ingress configuration
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-prometheus-ingress.yaml

      when: (((istio_prometheus_enabled is defined) and (istio_prometheus_enabled != None) and (istio_prometheus_enabled == True)) or ((monitoring_enabled is defined) and (monitoring_enabled != None) and (monitoring_enabled == True) and (monitoring_prometheus_enabled is defined) and (monitoring_prometheus_enabled != None) and (monitoring_prometheus_enabled == True)))

    - name: Enable the Prometheus service reference in the istio-system namespace
      block:
      - name: Generate the Prometheus service reference configuration
        template:
          src: istio-prometheus-service.yaml.j2
          dest: /var/tmp/ansible/istio-prometheus-service.yaml

      - name: Apply the Prometheus service reference configuration
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/istio-prometheus-service.yaml

      when: (((monitoring_enabled is defined) and (monitoring_enabled != None) and (monitoring_enabled == True) and (monitoring_prometheus_enabled is defined) and (monitoring_prometheus_enabled != None) and (monitoring_prometheus_enabled == True)))

    when: (istio_installed_version != istio_version)

  when: ((istio_enabled is defined) and (istio_enabled != None) and (istio_enabled == true))
