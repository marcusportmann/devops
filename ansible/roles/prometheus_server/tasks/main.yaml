---
# file: roles/prometheus_server/tasks/main.yaml

#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'
  tags:
  - unbound


#  ____  ____   ___  __  __ _____ _____ _   _ _____ _   _ ____    ____  _____ ______     _______ ____
# |  _ \|  _ \ / _ \|  \/  | ____|_   _| | | | ____| | | / ___|  / ___|| ____|  _ \ \   / / ____|  _ \
# | |_) | |_) | | | | |\/| |  _|   | | | |_| |  _| | | | \___ \  \___ \|  _| | |_) \ \ / /|  _| | |_) |
# |  __/|  _ <| |_| | |  | | |___  | | |  _  | |___| |_| |___) |  ___) | |___|  _ < \ V / | |___|  _ <
# |_|   |_| \_\\___/|_|  |_|_____| |_| |_| |_|_____|\___/|____/  |____/|_____|_| \_\ \_/  |_____|_| \_\
#
- name: Install Prometheus
  block:
  - debug:
      msg: Check whether the Prometheus {{ prometheus_server_config.package_version }} package has been installed

  - stat:
      path: /usr/bin/prometheus
    register: prometheus_installed_stat_result

  - shell:
      cmd: /usr/bin/prometheus --version 2>&1 | head -1 | awk {'print $3'}
    register: prometheus_installed_version_output
    when: (prometheus_installed_stat_result.stat.exists == True)

  - set_fact:
      prometheus_installed_version: '{{ prometheus_installed_version_output.stdout }}'
    when: (prometheus_installed_stat_result.stat.exists == True)

  - set_fact:
      prometheus_installed_version: ''
    when: (prometheus_installed_stat_result.stat.exists == False)

  - block:
    - debug:
        msg: Install the Prometheus {{ prometheus_server_config.package_version }} package

    - name: Add the {{ prometheus_server_config.group }} group
      group:
        name: '{{ prometheus_server_config.group }}'
        gid: '{{ prometheus_server_config.group_id }}'
        state: present

    - name: Add the {{ prometheus_server_config.user }} user
      user:
        name: '{{ prometheus_server_config.user }}'
        uid: '{{ prometheus_server_config.user_id }}'
        group: '{{ prometheus_server_config.group }}'
        create_home: no
        shell: /usr/sbin/nologin
        state: present

    - name: Check whether the Prometheus service exists
      stat:
        path: /lib/systemd/system/prometheus.service
      register: prometheus_service_stat_result

    - name: Stop the Prometheus service
      service:
        name: prometheus.service
        state: stopped
      when: prometheus_service_stat_result.stat.exists == True
      register: prometheus_service_stopped

    - name: Check whether the Prometheus {{ prometheus_server_config.package_version }} package has been downloaded
      become: no
      local_action: stat path='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/prometheus-{{ prometheus_server_config.package_version }}.linux-amd64.tar.gz'
      register: prometheus_package_stat_result

    - name: Download the Prometheus {{ prometheus_server_config.package_version }} package
      become: no
      local_action: get_url url='https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_server_config.package_version }}/prometheus-{{ prometheus_server_config.package_version }}.linux-amd64.tar.gz' dest='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/prometheus-{{ prometheus_server_config.package_version }}.linux-amd64.tar.gz' checksum={{ prometheus_server_config.package_checksum }}
      when: (prometheus_package_stat_result.stat.exists == False)

    - name: Remove the existing prometheus binary
      file:
        path: /usr/bin/prometheus
        state: absent

    - name: Extract the prometheus binary from the Prometheus {{ prometheus_server_config.package_version }} package
      unarchive:
        src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/prometheus-{{ prometheus_server_config.package_version }}.linux-amd64.tar.gz'
        dest: /usr/bin
        owner: 'root'
        group: 'root'
        mode: '0755'
        extra_opts:
        - --strip-components=1
        - prometheus-{{ prometheus_server_config.package_version }}.linux-amd64/prometheus
        creates: /usr/bin/prometheus

    - name: Create the {{ prometheus_server_config.etc_directory }} directory
      file:
        path: '{{ prometheus_server_config.etc_directory }}'
        owner: '{{ prometheus_server_config.user }}'
        group: '{{ prometheus_server_config.group }}'
        mode: '0550'
        state: directory

    - name: Extract the consoles directory from the Prometheus {{ prometheus_server_config.package_version }} package
      unarchive:
        src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/prometheus-{{ prometheus_server_config.package_version }}.linux-amd64.tar.gz'
        dest: '{{ prometheus_server_config.etc_directory }}'
        owner: '{{ prometheus_server_config.user }}'
        group: '{{ prometheus_server_config.group }}'
        mode: '0550'
        extra_opts:
        - --strip-components=1
        - prometheus-{{ prometheus_server_config.package_version }}.linux-amd64/consoles
        creates: /etc/prometheus/consoles

    - name: Extract the console_libraries directory from the Prometheus {{ prometheus_server_config.package_version }} package
      unarchive:
        src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/prometheus-{{ prometheus_server_config.package_version }}.linux-amd64.tar.gz'
        dest: '{{ prometheus_server_config.etc_directory }}'
        owner: '{{ prometheus_server_config.user }}'
        group: '{{ prometheus_server_config.group }}'
        mode: '0550'
        extra_opts:
        - --strip-components=1
        - prometheus-{{ prometheus_server_config.package_version }}.linux-amd64/console_libraries
        creates: /etc/prometheus/console_libraries

    when: (prometheus_installed_version != prometheus_server_config.package_version)

- name: Create the {{ prometheus_server_config.data_directory }} directory
  file:
    path: '{{ prometheus_server_config.data_directory }}'
    owner: '{{ prometheus_server_config.user }}'
    group: '{{ prometheus_server_config.group }}'
    mode: '0750'
    state: directory

- name: Create the {{ prometheus_server_config.data_directory }}/metrics2 directory
  file:
    path: '{{ prometheus_server_config.data_directory }}/metrics2'
    owner: '{{ prometheus_server_config.user }}'
    group: '{{ prometheus_server_config.group }}'
    mode: '0750'
    state: directory

- name: Generate the Prometheus configuration
  template:
    src: prometheus.yaml.j2
    dest: /etc/prometheus/prometheus.yml
    owner: '{{ prometheus_server_config.user }}'
    group: '{{ prometheus_server_config.group }}'
    mode: '0440'
  register: prometheus_server_configuration_template_result

- name: Generate the Prometheus environment
  template:
    src: prometheus-environment
    dest: /etc/default/prometheus
    mode: '0644'  

- name: Configure the Prometheus systemd unit
  template:
    src: prometheus.service.j2
    dest: /lib/systemd/system/prometheus.service
    owner: 'root'
    group: 'root'
    mode: '0644'
  register: prometheus_systemd_unit_template_result

- name: Setup the Prometheus Kubernetes monitoring configuration
  block:
  - name: Create the /etc/prometheus/k8s directory
    file:
      path: /etc/prometheus/k8s
      owner: '{{ prometheus_server_config.user }}'
      group: '{{ prometheus_server_config.group }}'
      mode: '0550'
      state: directory

  - name: Copy the certificate for the Kubernetes CA to the Prometheus host
    block:
    - name: Fetch the /etc/kubernetes/pki/ca.crt from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/ca.crt
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/ca.crt to the Prometheus host
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/ca.crt
        dest: /etc/prometheus/k8s/ca.crt
        owner: '{{ prometheus_server_config.user }}'
        group: '{{ prometheus_server_config.group }}'
        mode: '0440'
  
  - name: Save the token for the Prometheus service account
    block:
    - shell:
        cmd: kubectl -n kube-system get secrets -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='prometheus')].data.token}"|base64 --decode
      delegate_to: "{{ groups['k8s_master'][0] }}"
      register: prometheus_service_account_secret_token_output

    - set_fact:
        prometheus_service_account_secret_token: '{{ prometheus_service_account_secret_token_output.stdout }}'

    - shell:
        cmd: echo '{{ prometheus_service_account_secret_token }}' > /etc/prometheus/k8s/token

  when: ("k8s_master" in groups.keys())

- name: Restart the Prometheus service
  systemd:
    name: prometheus.service
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: ((prometheus_server_configuration_template_result.changed == True) or (prometheus_systemd_unit_template_result.changed == True))

- name: Ensure that the Prometheus service is started
  systemd:
    name: prometheus.service
    state: started
    enabled: yes
