############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker
broker.id={{ (kafka_server_hosts.index(inventory_hostname) + 1) }}

# The ID of the rack for the broker
broker.rack={{ (kafka_server_hosts.index(inventory_hostname) + 1) }}


############################# Socket Server Settings #############################

# The address the socket server listens on
listeners=SASL_SSL://{{ inventory_hostname }}:{{ confluent_config.kafka_server.secure_broker_port }}

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
advertised.listeners=SASL_SSL://{{ inventory_hostname }}:{{ confluent_config.kafka_server.secure_broker_port }}

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads=3

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads=8

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes=102400

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes=102400

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes=104857600



############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs={{ confluent_config.kafka_server.data_directory }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across the brokers.
{% if ((kafka_server_hosts | length) > 1) %}
num.partitions={{ ((kafka_server_hosts | length) - 1) }}
{% else %}
num.partitions=1
{% endif %}


# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir=1

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3

{% if ((kafka_server_hosts | length) >= 3) %}
offsets.topic.replication.factor=3
transaction.state.log.replication.factor=3
transaction.state.log.min.isr=2
{% else %}
offsets.topic.replication.factor=1
transaction.state.log.replication.factor=1
transaction.state.log.min.isr=1
{% endif %}


delete.topic.enable=true
auto.create.topics.enable=false

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000



############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours=168

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes=1073741824

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms=300000

offsets.retention.minutes=21024000

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the root directory for all kafka znodes
{% set kafka_server_zookeeper_hosts = [] -%}
{% for zookeeper_host in zookeeper_hosts %}
{% set _ = kafka_server_zookeeper_hosts.append("%s:%d" % (zookeeper_host, confluent_config.kafka_server.zookeeper.secure_client_port)) %}
{% endfor %}
zookeeper.connect={{ kafka_server_zookeeper_hosts | join(',') }}

# Enable mTLS authentication when connecting to ZooKeeper
zookeeper.clientCnxnSocket=org.apache.zookeeper.ClientCnxnSocketNetty
zookeeper.ssl.client.enable=true
zookeeper.ssl.keystore.type=PKCS12
zookeeper.ssl.keystore.location={{ confluent_config.kafka_server.etc_directory }}/pki/{{ inventory_hostname_short }}.p12
zookeeper.ssl.keystore.password={{ kafka_server_keystore_password }}
zookeeper.ssl.truststore.type=PKCS12
zookeeper.ssl.truststore.location={{ confluent_config.kafka_server.etc_directory }}/pki/ca.p12
zookeeper.ssl.truststore.password={{ ca_truststore_password }}
zookeeper.set.acl=true

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms=6000



############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
group.initial.rebalance.delay.ms=3000



############################# SASL and SSL Security Settings #############################
sasl.enabled.mechanisms=SCRAM-SHA-256

sasl.mechanism.inter.broker.protocol=SCRAM-SHA-256

security.inter.broker.protocol=SASL_SSL

# NOTE: We do not require mTLS since Kafka users will be authenticated via SCRAM using a password, change to "required" if this mTLS is required
ssl.client.auth=requested

ssl.keystore.type=PKCS12
ssl.keystore.location={{ confluent_config.kafka_server.etc_directory }}/pki/{{ inventory_hostname_short }}.p12
ssl.keystore.password={{ kafka_server_keystore_password }}
#ssl.key.password={{ kafka_server_keystore_password }}
ssl.truststore.type=PKCS12
ssl.truststore.location={{ confluent_config.kafka_server.etc_directory }}/pki/ca.p12
ssl.truststore.password={{ ca_truststore_password }}


authorizer.class.name=kafka.security.authorizer.AclAuthorizer

{% set kafka_server_super_users = ['User:kafka', 'User:admin', 'User:burrow'] -%}
{% for kafka_server_mirrormaker_user in kafka_server_mirrormaker_users %}
{% set _ = kafka_server_super_users.append("User:%s" % kafka_server_mirrormaker_user) %}
{% endfor %}
super.users={{ kafka_server_super_users | join(';') }}

# Disable Confluent metrics collection
confluent_config.support.metrics.enable=true




