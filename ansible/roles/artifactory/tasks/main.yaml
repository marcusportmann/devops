---
# file: roles/artifactory/tasks/main.yaml

- import_tasks: assert.yaml
  run_once: yes
  delegate_to: localhost

- name: Create the /var/tmp/ansible/{{ role_name }} directory
  file:
    path: /var/tmp/ansible/{{ role_name }}
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: directory


#  ____  _____ _____   _____ _    ____ _____ ____
# / ___|| ____|_   _| |  ___/ \  / ___|_   _/ ___|
# \___ \|  _|   | |   | |_ / _ \| |     | | \___ \
#  ___) | |___  | |   |  _/ ___ \ |___  | |  ___) |
# |____/|_____| |_|   |_|/_/   \_\____| |_| |____/
#
- set_fact:
    artifactory_db_url: 'jdbc:postgresql://{{ artifactory_config.database_host }}:{{ artifactory_config.database_port }}/{{ artifactory_config.database_name }}'
  when: (artifactory_config.database_type == 'postgresql')


#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'
  tags:
  - unbound


#     _    ____ _____ ___ _____ _    ____ _____ ___  ______   __   ____ ___  __  __ __  __  ___  _   _
#    / \  |  _ \_   _|_ _|  ___/ \  / ___|_   _/ _ \|  _ \ \ / /  / ___/ _ \|  \/  |  \/  |/ _ \| \ | |
#   / _ \ | |_) || |  | || |_ / _ \| |     | || | | | |_) \ V /  | |  | | | | |\/| | |\/| | | | |  \| |
#  / ___ \|  _ < | |  | ||  _/ ___ \ |___  | || |_| |  _ < | |   | |__| |_| | |  | | |  | | |_| | |\  |
# /_/   \_\_| \_\|_| |___|_|/_/   \_\____| |_| \___/|_| \_\|_|    \____\___/|_|  |_|_|  |_|\___/|_| \_|
#
- name: Add the {{ artifactory_config.group }} group
  group:
    name: '{{ artifactory_config.group }}'
    gid: '{{ artifactory_config.group_id }}'
    state: present

- name: Add the {{ artifactory_config.user }} user
  user:
    name: '{{ artifactory_config.user }}'
    uid: '{{ artifactory_config.user_id }}'
    group: '{{ artifactory_config.group }}'
    comment: 'Artifactory'
    create_home: yes
    shell: /usr/sbin/nologin
    state: present


#     _    ____ _____ ___ _____ _    ____ _____ ___  ______   __   ___  ____ ____
#    / \  |  _ \_   _|_ _|  ___/ \  / ___|_   _/ _ \|  _ \ \ / /  / _ \/ ___/ ___|
#   / _ \ | |_) || |  | || |_ / _ \| |     | || | | | |_) \ V /  | | | \___ \___ \
#  / ___ \|  _ < | |  | ||  _/ ___ \ |___  | || |_| |  _ < | |   | |_| |___) |__) |
# /_/   \_\_| \_\|_| |___|_|/_/   \_\____| |_| \___/|_| \_\|_|    \___/|____/____/
#
- name: Install Artifactory OSS
  block:
  - debug:
      msg: Check whether the Artifactory OSS {{ artifactory_config.package_version }} package has been installed

  - stat:
      path: '{{ artifactory_config.artifactory_directory }}'
    register: artifactory_oss_installed_stat_result

  - block:
    - debug:
        msg: Install the Artifactory OSS {{ artifactory_config.package_version }} package

    - name: Check whether the Artifactory service exists
      stat:
        path: '/lib/systemd/system/artifactory.service'
      register: artifactory_service_stat_result

    - name: Stop the Artifactory service
      systemd:
        name: artifactory
        state: stopped
      when: artifactory_service_stat_result.stat.exists == True
      register: artifactory_service_stopped

    - name: Check whether the Artifactory OSS {{ artifactory_config.package_version }} package has been downloaded
      become: no
      local_action: stat path='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/jfrog-artifactory-oss-{{ artifactory_config.package_version }}-linux.tar.gz'
      register: artifactory_oss_package_stat_result

    - name: Download the Artifactory OSS {{ artifactory_config.package_version }} package
      become: no
      local_action: get_url url='https://releases.jfrog.io/artifactory/bintray-artifactory/org/artifactory/oss/jfrog-artifactory-oss/{{ artifactory_config.package_version }}/jfrog-artifactory-oss-{{ artifactory_config.package_version }}-linux.tar.gz' dest='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/jfrog-artifactory-oss-{{ artifactory_config.package_version }}-linux.tar.gz'
      when: (artifactory_oss_package_stat_result.stat.exists == False)

    - name: Create the {{ artifactory_config.jfrog_directory }} directory
      file:
        path: '{{ artifactory_config.jfrog_directory }}'
        owner: 'root'
        group: 'root'
        mode: '0755'
        state: directory

    - name: Extract the Artifactory OSS {{ artifactory_config.package_version }} package
      unarchive:
        src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/jfrog-artifactory-oss-{{ artifactory_config.package_version }}-linux.tar.gz'
        dest: '{{ artifactory_config.jfrog_directory }}'
        owner: '{{ artifactory_config.user }}'
        group: '{{ artifactory_config.group }}'

    - name: Create the symbolic link to the Artifactory OSS {{ artifactory_config.package_version }} package
      file:
        src: '{{ artifactory_config.jfrog_directory }}/artifactory-oss-{{ artifactory_config.package_version }}'
        dest: '{{ artifactory_config.artifactory_directory }}'
        owner: 'root'
        group: 'root'
        mode: '0755'
        state: link

    when: ((artifactory_oss_installed_stat_result.stat.exists == False) or (artifactory_oss_installed_stat_result.stat.lnk_target != (artifactory_config.jfrog_directory + '/artifactory-' + artifactory_config.subscription + '-' + artifactory_config.package_version)))
  when: (artifactory_config.subscription == 'oss')


#     _    ____ _____ ___ _____ _    ____ _____ ___  ______   __  ____  ____   ___
#    / \  |  _ \_   _|_ _|  ___/ \  / ___|_   _/ _ \|  _ \ \ / / |  _ \|  _ \ / _ \
#   / _ \ | |_) || |  | || |_ / _ \| |     | || | | | |_) \ V /  | |_) | |_) | | | |
#  / ___ \|  _ < | |  | ||  _/ ___ \ |___  | || |_| |  _ < | |   |  __/|  _ <| |_| |
# /_/   \_\_| \_\|_| |___|_|/_/   \_\____| |_| \___/|_| \_\|_|   |_|   |_| \_\\___/
#


#     _    ____ _____ ___ _____ _    ____ _____ ___  ______   __
#    / \  |  _ \_   _|_ _|  ___/ \  / ___|_   _/ _ \|  _ \ \ / /
#   / _ \ | |_) || |  | || |_ / _ \| |     | || | | | |_) \ V /
#  / ___ \|  _ < | |  | ||  _/ ___ \ |___  | || |_| |  _ < | |
# /_/   \_\_| \_\|_| |___|_|/_/   \_\____| |_| \___/|_| \_\|_|
#
- name: Create the Artifactory directories
  file:
    path: '{{ item }}'
    state: directory
    owner: '{{ artifactory_config.user }}'
    group: '{{ artifactory_config.group }}'
    mode: '0750'
  loop:
  - '{{ artifactory_config.artifactory_directory }}/var/data'
  - '{{ artifactory_config.artifactory_directory }}/var/etc'
  - '{{ artifactory_config.artifactory_directory }}/var/etc/security/'
  - '{{ artifactory_config.artifactory_directory }}/var/etc/artifactory/info/'

# NOTE: This file is a copy of the system.yaml file and is generated to allow us to detect changes to the system.yaml file as Artifactory changes the system.yaml file on startup when it encrypts the password.
- name: Generate the {{ artifactory_config.artifactory_directory }}/var/etc/system.yaml.original configuration file
  template:
    src: 'system.yaml.j2'
    dest: '{{ artifactory_config.artifactory_directory }}/var/etc/system.yaml.original'
    owner: '{{ artifactory_config.user }}'
    group: '{{ artifactory_config.group }}'
    mode: '0440'
  notify: restart artifactory
  register: system_yaml_original_result

- name: Generate the {{ artifactory_config.artifactory_directory }}/var/etc/system.yaml configuration file
  template:
    src: 'system.yaml.j2'
    dest: '{{ artifactory_config.artifactory_directory }}/var/etc/system.yaml'
    owner: '{{ artifactory_config.user }}'
    group: '{{ artifactory_config.group }}'
    mode: '0440'
  when: (system_yaml_original_result.changed == True)

- name: Create the {{ artifactory_config.artifactory_directory }}/var/etc/security/master.key file
  copy:
    dest: '{{ artifactory_config.artifactory_directory }}/var/etc/security/master.key'
    content: '{{ artifactory_config.master_key }}'
    owner: '{{ artifactory_config.user }}'
    group: '{{ artifactory_config.group }}'
    mode: '0440'

- name: Create the Artifactory data directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ artifactory_config.user }}"
    group: "{{ artifactory_config.group }}"
    mode: '0750'
  loop:
  - '{{ artifactory_config.data_directory }}'
  - '{{ artifactory_config.data_directory }}/filestore'

- name: Create the {{ artifactory_config.artifactory_directory }}/var/etc/artifactory/binarystore.xml file
  template:
    src: binarystore.xml.j2
    dest: '{{ artifactory_config.artifactory_directory }}/var/etc/artifactory/binarystore.xml'
    owner: '{{ artifactory_config.user }}'
    group: '{{ artifactory_config.group }}'
    mode: '0440'

# TODO: CONFIGURE LICENSE IF PRO
#- name: Configure single license
#  become: yes
#  template:
#    src: artifactory.lic.j2
#    dest: "{{ artifactory_home }}/var/etc/artifactory/artifactory.lic"
#  when:
#    - artifactory_single_license is defined
#    - artifactory_single_license|length > 0
#  notify: restart artifactory
#

# TODO: CONFIGURE HA LICENSE IF ????
#- name: Configure HA licenses
#  become: yes
#  template:
#    src: artifactory.cluster.license.j2
#    dest: "{{ artifactory_home }}/var/etc/artifactory/artifactory.cluster.license"
#  when:
#   - artifactory_licenses is defined
#   - artifactory_licenses|length > 0
#  notify: restart artifactory
#

- name: Use the PostgreSQL database driver
  block:
  - name: Check if the PostgreSQL database driver exists
    find:
      paths: '{{ artifactory_config.artifactory_directory }}/app/artifactory/tomcat/lib/'
      patterns: 'postgresql-*.jar'
    register: postgresql_database_driver_find_result

  - set_fact:
      existing_postgresql_database_driver: '{{ postgresql_database_driver_find_result.files[0].path | basename }}'
    when: (postgresql_database_driver_find_result.matched  > 0)

  - name: Delete the old PostgreSQL database driver
    file:
      path: '{{ postgresql_database_driver_find_result.files[0].path }}'
      state: absent
    when: ((existing_postgresql_database_driver is defined) and (existing_postgresql_database_driver != None) and (existing_postgresql_database_driver != 'postgresql-'  + artifactory_config.postgresql_driver_version + '.jar'))

  - name: Install the PostgreSQL database driver
    block:
    - name: Check whether the PostgreSQL database driver ({{ artifactory_config.postgresql_driver_version }}) has been downloaded
      become: no
      local_action: stat path='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/postgresql-{{ artifactory_config.postgresql_driver_version }}.jar'
      register: postgresql_database_driver_stat_result

    - name: Download the PostgreSQL database driver ({{ artifactory_config.postgresql_driver_version }})
      become: no
      local_action: get_url url='https://repo1.maven.org/maven2/org/postgresql/postgresql/{{ artifactory_config.postgresql_driver_version }}/postgresql-{{ artifactory_config.postgresql_driver_version }}.jar' dest='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/postgresql-{{ artifactory_config.postgresql_driver_version }}.jar'
      when: (postgresql_database_driver_stat_result.stat.exists == False)

    - name: Copy the PostgreSQL database driver ({{ artifactory_config.postgresql_driver_version }})
      copy:
        src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/postgresql-{{ artifactory_config.postgresql_driver_version }}.jar'
        dest: '{{ artifactory_config.artifactory_directory }}/app/artifactory/tomcat/lib/postgresql-{{ artifactory_config.postgresql_driver_version }}.jar'
        owner: '{{ artifactory_config.user }}'
        group: '{{ artifactory_config.group }}'

    when: ((postgresql_database_driver_find_result.matched == 0) or ((existing_postgresql_database_driver is defined) and (existing_postgresql_database_driver != None) and (existing_postgresql_database_driver != 'postgresql-'  + artifactory_config.postgresql_driver_version + '.jar')))

  when: (artifactory_config.database_type == 'postgresql')

- name: Setup the Artifactory service
  block:
  - name: Check if the Artifactory service exists
    stat:
      path: '/lib/systemd/system/artifactory.service'
    register: artifactory_service_stat_result

  - name: Create the Artifactory service
    shell:
      cmd: '{{ artifactory_config.artifactory_directory }}/app/bin/installService.sh'
    args:
      creates: '/lib/systemd/system/artifactory.service'
    when: (artifactory_service_stat_result.stat.exists == False)

- meta: flush_handlers

- name : Wait for Artifactory to be fully deployed
  uri: url=http://127.0.0.1:{{ artifactory_config.router.external_port }}/router/api/v1/system/health timeout=130
  register: result
  until: result.status == 200
  retries: 25
  delay: 5
  when: not ansible_check_mode






































