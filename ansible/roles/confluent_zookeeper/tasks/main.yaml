---
# file: roles/confluent_zookeeper/tasks/main.yaml

- ansible.builtin.import_tasks: assert.yaml
  run_once: yes
  delegate_to: localhost


#  ____  _____ _____   _____ _    ____ _____ ____
# / ___|| ____|_   _| |  ___/ \  / ___|_   _/ ___|
# \___ \|  _|   | |   | |_ / _ \| |     | | \___ \
#  ___) | |___  | |   |  _/ ___ \ |___  | |  ___) |
# |____/|_____| |_|   |_|/_/   \_\____| |_| |____/
#
- ansible.builtin.set_fact:
    confluent_cluster_name: ''

- ansible.builtin.set_fact:
    confluent_cluster_name: '{{ item }}'
  when: (('zookeeper_hosts' in confluent_config.clusters[item]) and (inventory_hostname in confluent_config.clusters[item].zookeeper_hosts))
  loop: '{{ confluent_config.clusters | flatten(1) }}'

- fail:
    msg: "The ZooKeeper host {{ inventory_hostname }} is not associated with a Confluent cluster"
  when: ((confluent_cluster_name is not defined) or (confluent_cluster_name == None) or (confluent_cluster_name == ''))

- ansible.builtin.debug:
    msg: 'Confluent Cluster Name: {{ confluent_cluster_name }}'

- ansible.builtin.set_fact:
    zookeeper_hosts: "{{ confluent_config.clusters[confluent_cluster_name].zookeeper_hosts | intersect(groups['confluent_zookeeper']|default([])) }}"

- ansible.builtin.debug:
    msg: 'ZooKeeper hosts: {{ zookeeper_hosts }}'

- ansible.builtin.set_fact:
    kafka_server_hosts: "{{ confluent_config.clusters[confluent_cluster_name].kafka_server_hosts | intersect(groups['confluent_kafka_server']|default([])) }}"

- ansible.builtin.debug:
    msg: 'Kafka Server hosts: {{ kafka_server_hosts }}'


#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'
  tags:
  - unbound


#   ____ ___  _   _ _____ _    _   _ _____ _   _ _____   ________   ___  _  _______ _____ ____  _____ ____
#  / ___/ _ \| \ | |  ___| |  | | | | ____| \ | |_   _| |__  / _ \ / _ \| |/ / ____| ____|  _ \| ____|  _ \
# | |  | | | |  \| | |_  | |  | | | |  _| |  \| | | |     / / | | | | | | ' /|  _| |  _| | |_) |  _| | |_) |
# | |__| |_| | |\  |  _| | |__| |_| | |___| |\  | | |    / /| |_| | |_| | . \| |___| |___|  __/| |___|  _ <
#  \____\___/|_| \_|_|   |_____\___/|_____|_| \_| |_|   /____\___/ \___/|_|\_\_____|_____|_|   |_____|_| \_\
#
- name: Create the /var/tmp/ansible/confluent/{{ role_name }} directory
  ansible.builtin.file:
    path: '/var/tmp/ansible/confluent/{{ role_name }}'
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: directory

- name: Create the credentials directory
  local_action: file path="{{ credentials_root }}/confluent/{{ confluent_cluster_name }}" state="directory"
  become: false

- name: Add the {{ confluent_config.zookeeper.group }} group
  group:
    name: '{{ confluent_config.zookeeper.group }}'
    gid: '{{ confluent_config.zookeeper.group_id }}'
    state: present

- name: Add the {{ confluent_config.zookeeper.user }} user
  user:
    name: '{{ confluent_config.zookeeper.user }}'
    uid: '{{ confluent_config.zookeeper.user_id }}'
    group: '{{ confluent_config.zookeeper.group }}'
    create_home: yes
    state: present

- name: Create the {{ confluent_config.zookeeper.etc_directory }} directory
  ansible.builtin.file:
    path: '{{ confluent_config.zookeeper.etc_directory }}'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0550'
    state: directory

- name: Create the {{ confluent_config.zookeeper.etc_directory }}/conf directory
  ansible.builtin.file:
    path: '{{ confluent_config.zookeeper.etc_directory }}/conf'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0550'
    state: directory

- name: Setup the ZooKeeper keystore and ZooKeeper CA truststore
  block:
  - name: Create the {{ confluent_config.zookeeper.etc_directory }}/pki directory
    ansible.builtin.file:
      path: '{{ confluent_config.zookeeper.etc_directory }}/pki'
      owner: '{{ confluent_config.zookeeper.user }}'
      group: '{{ confluent_config.zookeeper.group }}'
      mode: '0550'
      state: directory

  - name: Copy the ZooKeeper CA certificate
    ansible.builtin.copy:
      src: '{{ pki_root }}/{{ role_name }}/{{ confluent_cluster_name }}/ca.crt'
      dest: '/var/tmp/ansible/confluent/{{ role_name }}/ca.crt'
    notify: restart zookeeper
    register: ca_certificate_copy_result

  - name: Copy the host-specific ZooKeeper private key ({{ inventory_hostname_short }}.key)
    ansible.builtin.copy:
      src: '{{ pki_root }}/{{ role_name }}/{{ confluent_cluster_name }}/{{ inventory_hostname_short }}.key'
      dest: '/var/tmp/ansible/confluent/{{ role_name }}/{{ inventory_hostname_short }}.key'
    notify: restart zookeeper
    register: zookeeper_private_key_copy_result

  - name: Copy the host-specific ZooKeeper certificate ({{ inventory_hostname_short }}.key)
    ansible.builtin.copy:
      src: '{{ pki_root }}/{{ role_name }}/{{ confluent_cluster_name }}/{{ inventory_hostname_short }}.crt'
      dest: '/var/tmp/ansible/confluent/{{ role_name }}/{{ inventory_hostname_short }}.crt'
    notify: restart zookeeper
    register: zookeeper_certificate_copy_result

  - name: Generate or retrieve the password for the ZooKeeper keystore
    ansible.builtin.set_fact:
      zookeeper_keystore_password: "{{ lookup('password', '{{ credentials_root }}/confluent/{{ confluent_cluster_name }}/zookeeper-{{ inventory_hostname_short }}-keystore-password chars=ascii_letters,digits length=16') }}"

  - name: Generate or retrieve the password for the ZooKeeper truststore
    ansible.builtin.set_fact:
      ca_truststore_password: "{{ lookup('password', '{{ credentials_root }}/confluent/{{ confluent_cluster_name }}/zookeeper-ca-truststore-password chars=ascii_letters,digits length=16') }}"

  - name: Generate the ZooKeeper keystore and ZooKeeper CA truststore
    block:
    - name: Generate the ZooKeeper PKCS12 keystore
      openssl_pkcs12:
        action: export
        path: '{{ confluent_config.zookeeper.etc_directory }}/pki/{{ inventory_hostname_short }}.p12'
        friendly_name: '{{ inventory_hostname_short }}'
        privatekey_path: '/var/tmp/ansible/confluent/{{ role_name }}/{{ inventory_hostname_short }}.key'
        certificate_path: '/var/tmp/ansible/confluent/{{ role_name }}/{{ inventory_hostname_short }}.crt'
        passphrase: '{{ zookeeper_keystore_password }}'
        owner: '{{ confluent_config.zookeeper.user }}'
        group: '{{ confluent_config.zookeeper.group }}'
        mode: '0440'
        state: present

    - name: Remove the ZooKeeper CA PKCS12 truststore if it already exists
      ansible.builtin.file:
        path: '{{ confluent_config.zookeeper.etc_directory }}/pki/ca.p12'
        state: absent

    - name: Generate the ZooKeeper CA PKCS12 truststore
      ansible.builtin.shell:
        cmd: keytool -importcert -noprompt -trustcacerts -alias "ca" -file /var/tmp/ansible/confluent/{{ role_name }}/ca.crt -keystore '{{ confluent_config.zookeeper.etc_directory }}/pki/ca.p12' -storetype PKCS12 -storepass '{{ ca_truststore_password }}'

    - name: Set the permissions for the ZooKeeper CA PKCS12 truststore
      ansible.builtin.file:
        path: '{{ confluent_config.zookeeper.etc_directory }}/pki/ca.p12'
        owner: '{{ confluent_config.zookeeper.user }}'
        group: '{{ confluent_config.zookeeper.group }}'
        mode: '0440'

    when: ((ca_certificate_copy_result.changed == True) or (zookeeper_private_key_copy_result.changed == True) or (zookeeper_certificate_copy_result.changed == True))

- name: Create the {{ confluent_config.zookeeper.log_directory }} directory
  ansible.builtin.file:
    path: '{{ confluent_config.zookeeper.log_directory }}'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0750'
    state: directory

- name: Create the {{ confluent_config.zookeeper.data_directory }} directory
  ansible.builtin.file:
    path: '{{ confluent_config.zookeeper.data_directory }}'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0750'
    state: directory

- name: Create the {{ confluent_config.zookeeper.data_log_directory }} directory
  ansible.builtin.file:
    path: '{{ confluent_config.zookeeper.data_log_directory }}'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0750'
    state: directory

- name: Create the ZooKeeper configuration file
  ansible.builtin.template:
    src: zookeeper.properties.j2
    dest: '{{ confluent_config.zookeeper.etc_directory }}/conf/zookeeper.properties'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0440'
  notify: restart zookeeper

- name: Copy the Prometheus JMX Exporter configuration file
  ansible.builtin.copy:
    src: files/prometheus_jmx_exporter.yaml
    dest: '{{ confluent_config.zookeeper.etc_directory }}/conf/prometheus_jmx_exporter.yaml'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0440'
  notify: restart zookeeper
  when: ((prometheus_jmx_exporter.enabled is defined) and (prometheus_jmx_exporter.enabled != None) and (prometheus_jmx_exporter.enabled == true))

- name: Generate or retrieve the password for the ZooKeeper admin user
  ansible.builtin.set_fact:
    zookeeper_admin_user_password: "{{ lookup('password', '{{ credentials_root }}/confluent/{{ confluent_cluster_name }}/zookeeper-admin-user-password chars=ascii_letters,digits length=16') }}"

- name: Generate or retrieve the password for the ZooKeeper confluent user
  ansible.builtin.set_fact:
    zookeeper_kafka_user_password: "{{ lookup('password', '{{ credentials_root }}/confluent/{{ confluent_cluster_name }}/zookeeper-kafka-user-password chars=ascii_letters,digits length=16') }}"

- name: Create the ZooKeeper JAAS configuration file
  ansible.builtin.template:
    src: zookeeper-jaas.conf.j2
    dest: '{{ confluent_config.zookeeper.etc_directory }}/conf/zookeeper-jaas.conf'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0440'
  notify: restart zookeeper

- name: Create the ZooKeeper TLS configuration file
  ansible.builtin.template:
    src: zookeeper-tls.conf.j2
    dest: '{{ confluent_config.zookeeper.etc_directory }}/conf/zookeeper-tls.conf'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0440'
  notify: restart zookeeper

- name: Create the myid file containing the ZooKeeper instance ID
  ansible.builtin.template:
    src: myid.j2
    dest: '{{ confluent_config.zookeeper.data_directory }}/myid'
    owner: '{{ confluent_config.zookeeper.user }}'
    group: '{{ confluent_config.zookeeper.group }}'
    mode: '0440'
  notify: restart zookeeper

- name: Add the aliases for the ZooKeeper tools to the /etc/profile.d/zookeeper.sh file
  block:
  - name: Add the zookeeper-shell alias to the /etc/profile.d/zookeeper.sh file
    ansible.builtin.lineinfile:
      dest: /etc/profile.d/zookeeper.sh
      create: yes
      state: present
      regexp: '^%alias zookeeper-shell'
      line: alias zookeeper-shell='KAFKA_OPTS="-Djava.security.auth.login.config={{ confluent_config.zookeeper.etc_directory }}/conf/zookeeper-jaas.conf" /opt/confluent/bin/zookeeper-shell -zk-tls-config-file {{ confluent_config.zookeeper.etc_directory }}/conf/zookeeper-tls.conf {{ inventory_hostname }}:{{ confluent_config.zookeeper.secure_client_port }}'

- name: Configure the zookeeper systemd unit
  ansible.builtin.template:
    src: zookeeper.service.j2
    dest: /lib/systemd/system/zookeeper.service
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: restart zookeeper
  register: zookeeper_systemd_unit_template_result

- name: Reload the zookeeper service if required
  ansible.builtin.systemd:
    name: zookeeper
    daemon_reload: yes
  when: (zookeeper_systemd_unit_template_result.changed == True)

- name: Ensure that the zookeeper service is started
  ansible.builtin.systemd:
    name: zookeeper
    state: started
    enabled: yes
