# file: roles/k8s_storage/tasks/main.yaml

#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == "Ubuntu"
  tags:
  - unbound

- include_tasks: centos.yaml
  when: ansible_distribution == "CentOS"
  tags:
  - unbound

#  _____ ___  ____   ___  _ __     ____  __   _ __     ____  __ ____
# |_   _/ _ \|  _ \ / _ \| |\ \   / /  \/  | | |\ \   / /  \/  |  _ \
#   | || | | | |_) | | | | | \ \ / /| |\/| | | | \ \ / /| |\/| | | | |
#   | || |_| |  __/| |_| | |__\ V / | |  | | | |__\ V / | |  | | |_| |
#   |_| \___/|_|    \___/|_____\_/  |_|  |_| |_____\_/  |_|  |_|____/
#
- name: Install the TopoLVM lvmd {{ topolvm_lvmd_version }} package if TopoLVM is enabled and this is a worker or there are no workers only masters
  block:
  - debug:
      msg: Check whether the TopoLVM lvmd {{ topolvm_lvmd_version }} package has been installed

  - stat:
      path: /usr/bin/lvmd
    register: topolvm_lvmd_installed_stat_result

  - shell:
      cmd: /usr/bin/lvmd --version | awk  {'print $3'}
    register: topolvm_lvmd_installed_version_output
    when: (topolvm_lvmd_installed_stat_result.stat.exists == True)

  - set_fact:
      topolvm_lvmd_installed_version: '{{ topolvm_lvmd_installed_version_output.stdout }}'
    when: (topolvm_lvmd_installed_stat_result.stat.exists == True)

  - set_fact:
      topolvm_lvmd_installed_version: ''
    when: (topolvm_lvmd_installed_stat_result.stat.exists == False)

  - block:
    - debug:
        msg: Install the TopoLVM lvmd {{ topolvm_lvmd_version }} package

    - name: Check whether the TopoLVM lvmd {{ topolvm_lvmd_version }} package has been downloaded
      become: no
      local_action: stat path=packages/lvmd-{{ topolvm_lvmd_version }}.tar.gz
      register: topolvm_lvmd_package_stat_result

    - name: Download the TopoLVM lvmd {{ topolvm_lvmd_version }} package
      become: no
      local_action: get_url url='https://github.com/cybozu-go/topolvm/releases/download/v{{ topolvm_lvmd_version }}/lvmd-{{ topolvm_lvmd_version }}.tar.gz' dest='packages/lvmd-{{ topolvm_lvmd_version }}.tar.gz'
      when: (topolvm_lvmd_package_stat_result.stat.exists == False)

    - name: Remove the existing TopoLVM lvmd binary
      file:
        path: /usr/bin/lvmd
        state: absent

    - name: Extract the TopoLVM lvmd binary from the TopoLVM lvmd {{ topolvm_lvmd_version }} package
      unarchive:
        src: packages/lvmd-{{ topolvm_lvmd_version }}.tar.gz
        dest: /usr/bin
        creates: /usr/bin/lvmd

    - template:
        src: topolvm-lvmd.service.j2
        dest: /lib/systemd/system/lvmd.service

    - name: Restart the lvmd systemd service
      systemd:
        name: lvmd.service
        state: restarted
        enabled: yes
        daemon_reload: yes

    when: (topolvm_lvmd_installed_version != topolvm_lvmd_version)

  when: ((("k8s_worker" not in groups.keys()) or (inventory_hostname in groups['k8s_worker'])) and (topolvm_enabled is defined) and (topolvm_enabled != None) and (topolvm_enabled == true))


- name: Install the Kubernetes storage components
  block:

  #  _     ___  _   _  ____ _   _  ___  ____  _   _
  # | |   / _ \| \ | |/ ___| | | |/ _ \|  _ \| \ | |
  # | |  | | | |  \| | |  _| |_| | | | | |_) |  \| |
  # | |__| |_| | |\  | |_| |  _  | |_| |  _ <| |\  |
  # |_____\___/|_| \_|\____|_| |_|\___/|_| \_\_| \_|
  #
  - name: Install Longhorn if it is enabled
    block:

    - name: Check if the longhorn-system namespace exists
      shell:
        cmd: /usr/bin/kubectl get ns | awk  {'print $1'} | grep longhorn-system | wc -l
      register: longhorn_system_namespace_exists_output

    - block:
      - template:
          src: longhorn.yaml.j2
          dest: /var/tmp/ansible/longhorn.yaml

      - name: Apply the Longhorn configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/longhorn.yaml

      - name: Wait for the Longhorn compatible-csi-attacher deployment to complete
        command:
          cmd: /usr/bin/kubectl -n longhorn-system rollout status -w deployment/compatible-csi-attacher
        register: wait_for_longhorn_compatible_csi_attacher_deployment_result
        until: wait_for_longhorn_compatible_csi_attacher_deployment_result is succeeded
        retries: 180
        delay: 10

      - name: Wait for the Longhorn csi-attacher deployment to complete
        command:
          cmd: /usr/bin/kubectl -n longhorn-system rollout status -w deployment/csi-attacher
        register: wait_for_longhorn_csi_attacher_deployment_result
        until: wait_for_longhorn_csi_attacher_deployment_result is succeeded
        retries: 180
        delay: 10

      - name: Wait for the Longhorn csi-provisioner deployment to complete
        command:
          cmd: /usr/bin/kubectl -n longhorn-system rollout status -w deployment/csi-provisioner
        register: wait_for_longhorn_csi_provisioner_deployment_result
        until: wait_for_longhorn_csi_provisioner_deployment_result is succeeded
        retries: 180
        delay: 10

      - name: Wait for the Longhorn longhorn-driver-deployer deployment to complete
        command:
          cmd: /usr/bin/kubectl -n longhorn-system rollout status -w deployment/longhorn-driver-deployer
        register: wait_for_longhorn_driver_deployer_deployment_result
        until: wait_for_longhorn_driver_deployer_deployment_result is succeeded
        retries: 180
        delay: 10

      - name: Wait for the Longhorn longhorn-ui deployment to complete
        command:
          cmd: /usr/bin/kubectl -n longhorn-system rollout status -w deployment/longhorn-ui
        register: wait_for_longhorn_ui_deployment_result
        until: wait_for_longhorn_ui_deployment_result is succeeded
        retries: 180
        delay: 10

      when: longhorn_system_namespace_exists_output.stdout == "0"

    when: ((longhorn_enabled is defined) and (longhorn_enabled != None) and (longhorn_enabled == true))

  #  _____ ___  ____   ___  _ __     ____  __
  # |_   _/ _ \|  _ \ / _ \| |\ \   / /  \/  |
  #   | || | | | |_) | | | | | \ \ / /| |\/| |
  #   | || |_| |  __/| |_| | |__\ V / | |  | |
  #   |_| \___/|_|    \___/|_____\_/  |_|  |_|
  #
  - name: Install the TopoLVM CSI plugin
    block:

    - name: Check if the topolvm-system namespace exists
      shell:
        cmd: /usr/bin/kubectl get ns | awk  {'print $1'} | grep topolvm-system | wc -l
      register: topolvm_system_namespace_exists_output

    - block:
      - set_fact:
          topolvm_mutatingwebhook_key: "{{ lookup('file', './files/pki/' + k8s_cluster_name + '/k8s-' + k8s_cluster_name + '-topolvm-mutatingwebhook.key') | b64encode }}"

      - set_fact:
          topolvm_mutatingwebhook_crt: "{{ lookup('file', './files/pki/' + k8s_cluster_name + '/k8s-' + k8s_cluster_name + '-topolvm-mutatingwebhook.crt') | b64encode }}"

      - set_fact:
          topolvm_mutatingwebhook_ca_bundle: "{{ lookup('file', './files/pki/' + k8s_cluster_name + '/ca-bundle.crt') | b64encode }}"

      - name: Generate the initial TopoLVM configuration
        template:
          src: topolvm-init.yaml.j2
          dest: /var/tmp/ansible/topolvm-init.yaml

      - name: Apply the initial TopoLVM configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm-init.yaml

      - name: Disable the TopoLVM mutating webhook for the kube-system namespace
        command:
          cmd: /usr/bin/kubectl label --overwrite ns kube-system topolvm.cybozu.com/webhook=ignore

      - name: Disable the TopoLVM mutating webhook for the longhorn-system namespace
        command:
          cmd: /usr/bin/kubectl label --overwrite ns longhorn-system topolvm.cybozu.com/webhook=ignore
        when: ((longhorn_enabled is defined) and (longhorn_enabled != None) and (longhorn_enabled == true))

      - name: Disable the TopoLVM mutating webhook for the olm namespace
        command:
          cmd: /usr/bin/kubectl label --overwrite ns olm topolvm.cybozu.com/webhook=ignore
        when: ((operator_lifecycle_manager_enabled is defined) and (operator_lifecycle_manager_enabled != None) and (operator_lifecycle_manager_enabled == true))

      - name: Generate the TopoLVM Custom Resource Definition configuration
        template:
          src: topolvm-crd.yaml.j2
          dest: /var/tmp/ansible/topolvm-crd.yaml

      - name: Apply the TopoLVM Custom Resource Definition configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm-crd.yaml

      - name: Generate the TopoLVM Pod Security Policy configuration
        template:
          src: topolvm-psp.yaml.j2
          dest: /var/tmp/ansible/topolvm-psp.yaml

      - name: Apply the TopoLVM Pod Security Policy configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm-psp.yaml

      - name: Generate the TopoLVM Scheduler daemonset configuration
        template:
          src: topolvm-scheduler-daemonset.yaml.j2
          dest: /var/tmp/ansible/topolvm-scheduler.yaml
        when: ("k8s_master" in groups.keys())

      - name: Generate the TopoLVM Scheduler service configuration
        template:
          src: topolvm-scheduler-service.yaml.j2
          dest: /var/tmp/ansible/topolvm-scheduler.yaml
        when: ("k8s_master" not in groups.keys())

      - name: Apply the TopoLVM Scheduler configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm-scheduler.yaml

      - name: Generate the TopoLVM Mutating Webhooks configuration
        template:
          src: topolvm-mutatingwebhooks.yaml.j2
          dest: /var/tmp/ansible/topolvm-mutatingwebhooks.yaml

      - name: Apply the TopoLVM Mutating Webhooks configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm-mutatingwebhooks.yaml

      - name: Generate the TopoLVM Controller configuration
        template:
          src: topolvm-controller.yaml.j2
          dest: /var/tmp/ansible/topolvm-controller.yaml

      - name: Apply the TopoLVM Controller configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm-controller.yaml

      - name: Wait for the TopoLVM controller deployment to complete
        command:
          cmd: /usr/bin/kubectl -n topolvm-system rollout status -w deployment/controller
        register: wait_for_topo_lvm_controller_deployment_result
        until: ((wait_for_topo_lvm_controller_deployment_result is succeeded) and (wait_for_topo_lvm_controller_deployment_result.stdout == "deployment \"controller\" successfully rolled out"))
        retries: 180
        delay: 10
        when: ("k8s_worker" not in groups.keys())

      - name: Generate the TopoLVM Node configuration
        template:
          src: topolvm-node.yaml.j2
          dest: /var/tmp/ansible/topolvm-node.yaml

      - name: Apply the TopoLVM Node configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm-node.yaml

      - name: Generate the TopoLVM Provisioner configuration
        template:
          src: topolvm-provisioner.yaml.j2
          dest: /var/tmp/ansible/topolvm-provisioner.yaml

      - name: Apply the TopoLVM Provisioner configuration to Kubernetes
        command:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm-provisioner.yaml

      when: topolvm_system_namespace_exists_output.stdout == "0"

    - name: Confirm that the TopoLVM controller is available
      block:
      - name: Retrieve the IP address of the TopoLVM controller service
        shell:
          cmd: /usr/bin/kubectl -n topolvm-system get svc | tail -n +2 | awk  {'print $3'}
        register: topolvm_controller_service_ip_output

      - name: Connect to the TopoLVM controller service
        shell:
          cmd: curl --insecure https://{{ topolvm_controller_service_ip_output.stdout }}
          warn: no
        register: wait_for_topo_lvm_controller_service_result
        until: (wait_for_topo_lvm_controller_service_result is succeeded)
        retries: 180
        delay: 10

      - debug:
          msg: 'Successfully connected to TopoLVM controller service'

    when: ((topolvm_enabled is defined) and (topolvm_enabled != None) and (topolvm_enabled == true))

  when: (('k8s_worker' not in groups.keys()) and (groups['k8s_master'][((groups['k8s_master']|length) - 1)] == inventory_hostname)) or (('k8s_worker' in groups.keys()) and (groups['k8s_worker'][((groups['k8s_worker']|length) - 1)] == inventory_hostname))

