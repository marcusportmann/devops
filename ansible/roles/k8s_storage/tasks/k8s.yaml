---
# file: roles/k8s_storage/tasks/k8s.yaml


#  _     ___  _   _  ____ _   _  ___  ____  _   _      ______   ______ _____ _____ __  __   _   _    _    __  __ _____ ____  ____   _    ____ _____
# | |   / _ \| \ | |/ ___| | | |/ _ \|  _ \| \ | |    / ___\ \ / / ___|_   _| ____|  \/  | | \ | |  / \  |  \/  | ____/ ___||  _ \ / \  / ___| ____|
# | |  | | | |  \| | |  _| |_| | | | | |_) |  \| |____\___ \\ V /\___ \ | | |  _| | |\/| | |  \| | / _ \ | |\/| |  _| \___ \| |_) / _ \| |   |  _|
# | |__| |_| | |\  | |_| |  _  | |_| |  _ <| |\  |_____|__) || |  ___) || | | |___| |  | | | |\  |/ ___ \| |  | | |___ ___) |  __/ ___ \ |___| |___
# |_____\___/|_| \_|\____|_| |_|\___/|_| \_\_| \_|    |____/ |_| |____/ |_| |_____|_|  |_| |_| \_/_/   \_\_|  |_|_____|____/|_| /_/   \_\____|_____|
#
- name: Check if the longhorn-system namespace exists
  shell:
    cmd: /usr/bin/kubectl get ns | awk  {'print $1'} | grep longhorn-system | wc -l
  register: longhorn_system_namespace_exists_output

- name: Create the longhorn-system namespace if required
  command:
    cmd: /usr/bin/kubectl create ns longhorn-system
  when: longhorn_system_namespace_exists_output.stdout == '0'

#  _     ___  _   _  ____ _   _  ___  ____  _   _
# | |   / _ \| \ | |/ ___| | | |/ _ \|  _ \| \ | |
# | |  | | | |  \| | |  _| |_| | | | | |_) |  \| |
# | |__| |_| | |\  | |_| |  _  | |_| |  _ <| |\  |
# |_____\___/|_| \_|\____|_| |_|\___/|_| \_\_| \_|
#
- name: Install Longhorn if it is enabled
  block:
  - name: Configure the Lonhorn Helm repository
    block:
    - name: Check if the Longhorn Helm repository has been added
      shell:
        cmd: /usr/bin/helm repo list | grep longhorn | wc -l
      register: helm_longhorn_repo_added_output

    - name: Add the longhorn Helm repository
      command:
        cmd: /usr/bin/helm repo add longhorn https://charts.longhorn.io
      when: helm_longhorn_repo_added_output.stdout == '0'

  - name: Check if Longhorn is installed
    shell:
      cmd: /usr/bin/helm -n longhorn-system list --filter 'longhorn' --output json | jq -r '.[0].chart' | cut -s -f2- -d-
    register: longhorn_installed_helm_chart_version_output

  - name: Install Longhorn
    block:
    - name: Generate the Longhorn Helm values
      template:
        src: longhorn/longhorn-values.yaml.j2
        dest: /var/tmp/ansible/longhorn-values.yaml

    - name: Install Longhorn using Helm
      command:
        cmd: /usr/bin/helm upgrade longhorn longhorn/longhorn --install --version={{ k8s_config.storage.longhorn.helm_chart_version }} --namespace=longhorn-system --values=/var/tmp/ansible/longhorn-values.yaml

    - name: Wait for 10 seconds for the Longhorn initialization to start
      wait_for:
        timeout: 10

    - name: Wait for the Longhorn initialization to complete
      command:
        cmd: /usr/bin/kubectl wait --namespace=longhorn-system --for=condition=Ready pods --all --timeout=1200s

    when: longhorn_installed_helm_chart_version_output.stdout != k8s_config.storage.longhorn.helm_chart_version

  - template:
      src: longhorn/longhorn.yaml.j2
      dest: /var/tmp/ansible/longhorn.yaml

  - name: Apply the Longhorn configuration to Kubernetes
    command:
      cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/longhorn.yaml

  when: ((k8s_config.storage.longhorn.enabled is defined) and (k8s_config.storage.longhorn.enabled != None) and (k8s_config.storage.longhorn.enabled == true))


#  _____ ___  ____   ___  _ __     ____  __
# |_   _/ _ \|  _ \ / _ \| |\ \   / /  \/  |
#   | || | | | |_) | | | | | \ \ / /| |\/| |
#   | || |_| |  __/| |_| | |__\ V / | |  | |
#   |_| \___/|_|    \___/|_____\_/  |_|  |_|
#
- name: Install the TopoLVM CSI plugin
  block:
  - name: Create the /var/tmp/ansible/topolvm directory
    file:
      path: /var/tmp/ansible/topolvm
      owner: 'root'
      group: 'root'
      mode: 0700
      state: directory

  - name: Check if the topolvm-system namespace exists
    shell:
      cmd: /usr/bin/kubectl get ns | awk  {'print $1'} | grep topolvm-system | wc -l
    register: topolvm_system_namespace_exists_output

  - block:
    - set_fact:
        topolvm_mutatingwebhook_key: "{{ lookup('file', '{{ pki_root }}/{{ role_name }}/' + k8s_config.cluster_name + '/k8s-topolvm-mutatingwebhook-' + k8s_config.cluster_name.replace('_', '-') + '.key') | b64encode }}"

    - set_fact:
        topolvm_mutatingwebhook_crt: "{{ lookup('file', '{{ pki_root }}/{{ role_name }}/' + k8s_config.cluster_name + '/k8s-topolvm-mutatingwebhook-' + k8s_config.cluster_name.replace('_', '-') + '.crt') | b64encode }}"

    - set_fact:
        topolvm_mutatingwebhook_ca_bundle: "{{ lookup('file', '{{ pki_root }}/{{ role_name }}/' + k8s_config.cluster_name + '/ca-bundle.crt') | b64encode }}"

    - name: Generate the initial TopoLVM configuration
      template:
        src: topolvm/init.yaml.j2
        dest: /var/tmp/ansible/topolvm/init.yaml

    - name: Apply the initial TopoLVM configuration to Kubernetes
      command:
        cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/topolvm/init.yaml

    - name: Disable the TopoLVM mutating webhook for the kube-system namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns kube-system topolvm.cybozu.com/webhook=ignore

    - name: Disable the TopoLVM mutating webhook for the longhorn-system namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns longhorn-system topolvm.cybozu.com/webhook=ignore
      when: ((k8s_config.storage.longhorn.enabled is defined) and (k8s_config.storage.longhorn.enabled != None) and (k8s_config.storage.longhorn.enabled == true))

    - name: Disable the TopoLVM mutating webhook for the olm namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns olm topolvm.cybozu.com/webhook=ignore
      when: ((k8s_operator_lifecycle_manager_enabled is defined) and (k8s_operator_lifecycle_manager_enabled != None) and (k8s_operator_lifecycle_manager_enabled == true))

    - name: Create the /var/tmp/ansible/topolvm/manifests/base directory
      file:
        path: /var/tmp/ansible/topolvm/manifests/base
        owner: 'root'
        group: 'root'
        mode: '0700'
        state: directory

    - name: Copy the base TopoLVM deployment files
      template:
        src: "{{ item }}"
        dest: /var/tmp/ansible/topolvm/manifests/base/{{ item | basename | regex_replace('\.j2$', '') }}
      with_fileglob:
        - ../templates/topolvm/manifests/base/*

    - block:
      - name: Create the /var/tmp/ansible/topolvm/manifests/overlays/daemonset-scheduler directory
        file:
          path: /var/tmp/ansible/topolvm/manifests/overlays/daemonset-scheduler
          owner: 'root'
          group: 'root'
          mode: '0700'
          state: directory

      - name: Copy the daemonset-scheduler TopoLVM deployment files
        template:
          src: "{{ item }}"
          dest: /var/tmp/ansible/topolvm/manifests/overlays/daemonset-scheduler/{{ item | basename | regex_replace('\.j2$', '') }}
        with_fileglob:
          - ../templates/topolvm/manifests/overlays/daemonset-scheduler/*

      - name: Apply the daemonset-scheduler TopoLVM configuration to Kubernetes
        shell:
          cmd: "/usr/bin/kustomize build /var/tmp/ansible/topolvm/manifests/overlays/daemonset-scheduler | kubectl apply -f -"

      when: ('k8s_master' in groups.keys())

    - block:
      - name: Create the /var/tmp/ansible/topolvm/manifests/overlays/deployment-scheduler directory
        file:
          path: /var/tmp/ansible/topolvm/manifests/overlays/deployment-scheduler
          owner: 'root'
          group: 'root'
          mode: '0700'
          state: directory

      - name: Copy the deployment-scheduler TopoLVM deployment files
        template:
          src: "{{ item }}"
          dest: /var/tmp/ansible/topolvm/manifests/overlays/deployment-scheduler/{{ item | basename | regex_replace('\.j2$', '') }}
        with_fileglob:
          - ../templates/topolvm/manifests/overlays/deployment-scheduler/*

      - name: Apply the deployment-scheduler TopoLVM configuration to Kubernetes
        shell:
          cmd: "/usr/bin/kustomize build /var/tmp/ansible/topolvm/manifests/overlays/deployment-scheduler | kubectl apply -f -"

      when: ('k8s_master' not in groups.keys())


    - name: Wait for the TopoLVM controller deployment to complete
      command:
        cmd: /usr/bin/kubectl -n topolvm-system rollout status -w deployment/controller
      register: wait_for_topo_lvm_controller_deployment_result
      until: ((wait_for_topo_lvm_controller_deployment_result is succeeded) and (wait_for_topo_lvm_controller_deployment_result.stdout == 'deployment "controller" successfully rolled out'))
      retries: 180
      delay: 15

    when: topolvm_system_namespace_exists_output.stdout == '0'

  - name: Confirm that the TopoLVM controller is available
    block:
    - name: Retrieve the IP address of the TopoLVM controller service
      shell:
        cmd: /usr/bin/kubectl -n topolvm-system get svc | tail -n +2 | awk  {'print $3'}
      register: topolvm_controller_service_ip_output

    - name: Connect to the TopoLVM controller service
      shell:
        cmd: curl --insecure https://{{ topolvm_controller_service_ip_output.stdout }}
        warn: no
      register: wait_for_topo_lvm_controller_service_result
      until: (wait_for_topo_lvm_controller_service_result is succeeded)
      retries: 180
      delay: 15

    - debug:
        msg: 'Successfully connected to TopoLVM controller service'

  when: ((k8s_config.storage.topolvm.enabled is defined) and (k8s_config.storage.topolvm.enabled != None) and (k8s_config.storage.topolvm.enabled == true))
