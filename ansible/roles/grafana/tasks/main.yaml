---
# file: roles/grafana/tasks/main.yaml

- name: Add the grafana group
  group:
    name: grafana
    gid: '{{ grafana_config.group_id }}'
    state: present

- name: Add the grafana user
  user:
    name: grafana
    uid: '{{ grafana_config.user_id }}'
    group: grafana
    home: /var/lib/grafana
    create_home: no
    shell: /usr/sbin/nologin
    state: present

- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'
  tags:
  - unbound

- name: Create the Grafana configuration file
  template:
    src: grafana.ini.j2
    dest: /etc/grafana/grafana.ini
  register: grafana_configuration_template_result

- name: Create the Prometheus data source provisioning file
  template:
    src: prometheus-data-source.yaml.j2
    dest: /etc/grafana/provisioning/datasources/prometheus-data-source.yaml

- name: Create the dashboard provisioning file
  template:
    src: all-dashboards.yaml.j2
    dest: /etc/grafana/provisioning/dashboards/all-dashboards.yaml

- name: Create the /var/lib/grafana/dashboards directory
  file:
    path: /var/lib/grafana/dashboards
    owner: grafana
    group: grafana
    mode: 0775
    state: directory

- name: Copy the prometheus-2-0-overview_rev2.json dashboard file
  template:
    src: dashboards/prometheus-2-0-overview_rev2.json.j2
    dest: /var/lib/grafana/dashboards/prometheus-2-0-overview_rev2.json

- name: Copy the nodes.json dashboard file
  template:
    src: dashboards/nodes.json.j2
    dest: /var/lib/grafana/dashboards/nodes.json

- name: Copy the kubernetes.json dashboard file
  template:
    src: dashboards/kubernetes.json.j2
    dest: /var/lib/grafana/dashboards/kubernetes.json
  when: ('k8s_master' in groups)

- name: Copy the zookeeper.json dashboard file
  template:
    src: dashboards/zookeeper.json.j2
    dest: /var/lib/grafana/dashboards/zookeeper.json
  when: (('kafka_zookeeper' in groups) or ('confluent_zookeeper' in groups) or ('zookeeper' in groups))

- name: Copy the kafka-overview.json dashboard file
  template:
    src: dashboards/kafka.json.j2
    dest: /var/lib/grafana/dashboards/kafka.json
  when: (('kafka_zookeeper' in groups) or ('confluent_zookeeper' in groups) or ('zookeeper' in groups))

- name: Copy the kafka-producers-consumers.json dashboard file
  template:
    src: dashboards/kafka-producers-consumers.json.j2
    dest: /var/lib/grafana/dashboards/kafka-producers-consumers.json
  when: ((grafana_config.dashboards.kafka_producers_and_consumers.enabled) and (('kafka_zookeeper' in groups) or ('confluent_zookeeper' in groups) or ('zookeeper' in groups)))

- name: Restart the grafana-server service
  systemd:
    name: grafana-server.service
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: (grafana_configuration_template_result.changed == True)

- name: Ensure that the grafana-server service is started
  systemd:
    name: grafana-server.service
    state: started
    enabled: yes

- name: Retrieve the currently installed version of the Grafana pie chart panel plug-in
  shell:
    cmd: grafana-cli plugins ls | grep grafana-piechart-panel | awk  {'print $3'}
  register: grafana_pie_chart_panel_plugin_installed_version_output

- name: Install the Grafana pie chart panel plug-in {{ grafana_config.pie_chart_panel_plugin_version }}
  shell:
    cmd: grafana-cli plugins install grafana-piechart-panel {{ grafana_config.pie_chart_panel_plugin_version }}
  when: (grafana_pie_chart_panel_plugin_installed_version_output.stdout != grafana_config.pie_chart_panel_plugin_version)

- name: Restart the grafana-server service
  systemd:
    name: grafana-server.service
    state: restarted
  when: (grafana_pie_chart_panel_plugin_installed_version_output.stdout != grafana_config.pie_chart_panel_plugin_version)




