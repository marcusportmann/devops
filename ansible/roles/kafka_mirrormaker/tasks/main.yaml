---
# file: roles/kafka_mirrormaker/tasks/main.yaml

- fail:
    msg: 'No kafka.clusters configuration specified'
  when: ((kafka is not defined) or (kafka == None) or (kafka.clusters is not defined) or (kafka.clusters == None))

- set_fact:
    kafka_cluster_name: ''

- set_fact:
    kafka_cluster_name: '{{ item }}'
  when: (('kafka_mirrormaker_hosts' in kafka_config.clusters[item]) and (inventory_hostname in kafka_config.clusters[item].kafka_mirrormaker_hosts))
  loop: '{{ kafka_config.clusters | flatten(1) }}'

- fail:
    msg: "The Kafka MirrorMaker host {{ inventory_hostname }} is not associated with a Kafka cluster"
  when: ((kafka_cluster_name is not defined) or (kafka_cluster_name == None) or (kafka_cluster_name == ''))

- debug:
    msg: 'Cluster Name: {{ kafka_cluster_name }}'

- set_fact:
    kafka_server_hosts: "{{ kafka_config.clusters[kafka_cluster_name].kafka_server_hosts | intersect(groups['kafka_server']|default([])) }}"

- debug:
    msg: 'Kafka Server hosts: {{ kafka_server_hosts }}'


#  _  __    _    _____ _  __    _      __  __ ___ ____  ____   ___  ____    __  __    _    _  _______ ____
# | |/ /   / \  |  ___| |/ /   / \    |  \/  |_ _|  _ \|  _ \ / _ \|  _ \  |  \/  |  / \  | |/ / ____|  _ \
# | ' /   / _ \ | |_  | ' /   / _ \   | |\/| || || |_) | |_) | | | | |_) | | |\/| | / _ \ | ' /|  _| | |_) |
# | . \  / ___ \|  _| | . \  / ___ \  | |  | || ||  _ <|  _ <| |_| |  _ <  | |  | |/ ___ \| . \| |___|  _ <
# |_|\_\/_/   \_\_|   |_|\_\/_/   \_\ |_|  |_|___|_| \_\_| \_\\___/|_| \_\ |_|  |_/_/   \_\_|\_\_____|_| \_\
#
- name: Add the {{ kafka_config.kafka_mirrormaker.group }} group
  group:
    name: '{{ kafka_config.kafka_mirrormaker.group }}'
    gid: '{{ kafka_config.kafka_mirrormaker.group_id }}'
    state: present

- name: Add the {{ kafka_config.kafka_mirrormaker.user }} user
  user:
    name: '{{ kafka_config.kafka_mirrormaker.user }}'
    uid: '{{ kafka_config.kafka_mirrormaker.user_id }}'
    group: '{{ kafka_config.kafka_mirrormaker.group }}'
    create_home: yes
    state: present

- name: Create the /var/tmp/ansible/kafka directory
  file:
    path: /var/tmp/ansible/kafka
    owner: root
    group: root
    mode: '0700'
    state: directory

- name: Create the {{ kafka_config.kafka_mirrormaker.etc_directory }} directory
  file:
    path: '{{ kafka_config.kafka_mirrormaker.etc_directory }}'
    owner: '{{ kafka_config.kafka_mirrormaker.user }}'
    group: '{{ kafka_config.kafka_mirrormaker.group }}'
    mode: '0550'
    state: directory

- name: Create the {{ kafka_config.kafka_mirrormaker.etc_directory }}/conf directory
  file:
    path: '{{ kafka_config.kafka_mirrormaker.etc_directory }}/conf'
    owner: '{{ kafka_config.kafka_mirrormaker.user }}'
    group: '{{ kafka_config.kafka_mirrormaker.group }}'
    mode: '0550'
    state: directory

- name: Setup the Kafka MirrorMaker keystore and CA truststore
  block:
  - name: Create the {{ kafka_config.kafka_mirrormaker.etc_directory }}/pki directory
    file:
      path: '{{ kafka_config.kafka_mirrormaker.etc_directory }}/pki'
      owner: '{{ kafka_config.kafka_mirrormaker.user }}'
      group: '{{ kafka_config.kafka_mirrormaker.group }}'
      mode: '0550'
      state: directory

  - name: Copy the Kafka MirrorMaker CA certificate to the /var/tmp/ansible/kafka directory
    copy:
      src: '{{ roles_pki_root }}/{{ role_name }}/{{ kafka_cluster_name }}/ca.crt'
      dest: '/var/tmp/ansible/kafka/ca.crt'
    register: ca_certificate_copy_result

  - name: Copy the Kafka MirrorMaker private key ({{ inventory_hostname_short }}.key) to the /var/tmp/ansible/kafka directory
    copy:
      src: '{{ roles_pki_root }}/{{ role_name }}/{{ kafka_cluster_name }}/{{ inventory_hostname_short }}.key'
      dest: '/var/tmp/ansible/kafka/{{ inventory_hostname_short }}.key'
    register: kafka_mirrormaker_private_key_copy_result

  - name: Copy the Kafka MirrorMaker certificate ({{ inventory_hostname_short }}.crt) to the /var/tmp/ansible/kafka directory
    copy:
      src: '{{ roles_pki_root }}/{{ role_name }}/{{ kafka_cluster_name }}/{{ inventory_hostname_short }}.crt'
      dest: '/var/tmp/ansible/kafka/{{ inventory_hostname_short }}.crt'
    register: kafka_mirrormaker_certificate_copy_result

  - name: Generate or retrieve the password for the Kafka MirrorMaker keystore
    set_fact:
      kafka_mirrormaker_keystore_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/{{ inventory_hostname_short }}-keystore-password chars=ascii_letters,digits length=16') }}"

  - name: Generate or retrieve the password for the CA truststore
    set_fact:
      ca_truststore_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/ca-truststore-password chars=ascii_letters,digits length=16') }}"

  - name: Generate the Kafka MirrorMaker keystore and CA truststore
    block:
    - name: Generate the Kafka MirrorMaker PKCS12 keystore
      openssl_pkcs12:
        action: export
        path: '{{ kafka_config.kafka_mirrormaker.etc_directory }}/pki/{{ inventory_hostname_short }}.p12'
        friendly_name: "{{ inventory_hostname_short }}"
        privatekey_path: /var/tmp/ansible/kafka/{{ inventory_hostname_short }}.key
        certificate_path: /var/tmp/ansible/kafka/{{ inventory_hostname_short }}.crt
        passphrase: '{{ kafka_mirrormaker_keystore_password }}'
        owner: '{{ kafka_config.kafka_mirrormaker.user }}'
        group: '{{ kafka_config.kafka_mirrormaker.group }}'
        mode: '0440'
        state: present

    - name: Remove the Kafka MirrorMaker CA PKCS12 truststore if it already exists
      file:
        path: '{{ kafka_config.kafka_mirrormaker.etc_directory }}/pki/ca.p12'
        state: absent

    - name: Generate the Kafka MirrorMaker CA PKCS12 truststore
      shell:
        cmd: keytool -importcert -noprompt -trustcacerts -alias "ca" -file /var/tmp/ansible/kafka/ca.crt -keystore '{{ kafka_config.kafka_mirrormaker.etc_directory }}/pki/ca.p12' -storetype PKCS12 -storepass '{{ ca_truststore_password }}'

    - name: Set the permissions for the Kafka MirrorMaker CA PKCS12 truststore
      file:
        path: '{{ kafka_config.kafka_mirrormaker.etc_directory }}/pki/ca.p12'
        owner: '{{ kafka_config.kafka_mirrormaker.user }}'
        group: '{{ kafka_config.kafka_mirrormaker.group }}'
        mode: '0440'

    when: ((ca_certificate_copy_result.changed == True) or (kafka_mirrormaker_private_key_copy_result.changed == True) or (kafka_mirrormaker_certificate_copy_result.changed == True))

- name: Create the {{ kafka_config.kafka_mirrormaker.log_directory }} directory
  file:
    path: '{{ kafka_config.kafka_mirrormaker.log_directory }}'
    owner: '{{ kafka_config.kafka_mirrormaker.user }}'
    group: '{{ kafka_config.kafka_mirrormaker.group }}'
    mode: '0750'
    state: directory

# NOTE: This is the password Kafka MirrorMaker uses to connect to the Kafka cluster
- name: Generate or retrieve the password for the Kafka MirrorMaker user
  set_fact:
    kafka_mirrormaker_user_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/kafka-mirrormaker-user-password chars=ascii_letters,digits length=16') }}"

- name: Create the Kafka MirrorMaker configuration file
  template:
    src: mirrormaker.properties.j2
    dest: '{{ kafka_config.kafka_mirrormaker.etc_directory }}/conf/mirrormaker.properties'
    owner: '{{ kafka_config.kafka_mirrormaker.user }}'
    group: '{{ kafka_config.kafka_mirrormaker.group }}'
    mode: '0440'
  register: kafka_mirrormaker_configuration_template_result

- name: Configure the mirrormaker service
  template:
    src: mirrormaker.service.j2
    dest: /lib/systemd/system/mirrormaker.service
  register: kafka_mirrormaker_service_file_template_result

- name: Restart the mirrormaker service if required
  systemd:
    name: mirrormaker.service
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: ((ca_certificate_copy_result.changed == True) or (kafka_mirrormaker_private_key_copy_result.changed == True) or (kafka_mirrormaker_certificate_copy_result.changed == True) or (kafka_mirrormaker_configuration_template_result.changed == True) or (kafka_mirrormaker_service_file_template_result.changed == True))

- name: Ensure that the mirrormaker service is started
  systemd:
    name: mirrormaker.service
    state: started
    enabled: yes

