---
# file: roles/prometheus/tasks/main.yaml

- set_fact:
    prometheus_data_directory: "{{ prometheus_data_directory if ((prometheus_data_directory is defined) and (prometheus_data_directory != None)) else '/var/lib/prometheus' }}"

- include_tasks: ubuntu.yaml
  when: ansible_distribution == "Ubuntu"
  tags:
  - unbound

- include_tasks: centos.yaml
  when: ansible_distribution == "CentOS"
  tags:
  - unbound

- name: Install the Prometheus
  block:
  - debug:
      msg: Check whether the Prometheus {{ prometheus_version }} package has been installed

  - stat:
      path: /usr/bin/prometheus
    register: prometheus_installed_stat_result

  - shell:
      cmd: /usr/bin/prometheus --version 2>&1 | head -1 | awk {'print $3'}
    register: prometheus_installed_version_output
    when: (prometheus_installed_stat_result.stat.exists == True)

  - set_fact:
      prometheus_installed_version: '{{ prometheus_installed_version_output.stdout }}'
    when: (prometheus_installed_stat_result.stat.exists == True)

  - set_fact:
      prometheus_installed_version: ''
    when: (prometheus_installed_stat_result.stat.exists == False)

  - block:
    - debug:
        msg: Install the Prometheus {{ prometheus_version }} package

    - name: Add the prometheus group
      group:
        name: prometheus
        gid: '{{ prometheus_group_id }}'
        state: present

    - name: Add the prometheus user
      user:
        name: prometheus
        uid: '{{ prometheus_user_id }}'
        group: prometheus
        create_home: no
        shell: /usr/sbin/nologin
        state: present

    - name: Check whether the Prometheus service exists
      stat:
        path: /lib/systemd/system/prometheus.service
      register: prometheus_service_stat_result

    - name: Stop the Prometheus service
      service:
        name: prometheus.service
        state: stopped
      when: prometheus_service_stat_result.stat.exists == True
      register: prometheus_service_stopped

    - name: Check whether the Prometheus {{ prometheus_version }} package has been downloaded
      become: no
      local_action: stat path=packages/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
      register: prometheus_package_stat_result

    - name: Download the Prometheus {{ prometheus_version }} package
      become: no
      local_action: get_url url='https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz' dest='packages/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz' checksum={{ prometheus_package_checksum }}
      when: (prometheus_package_stat_result.stat.exists == False)

    - name: Remove the existing prometheus binary
      file:
        path: /usr/bin/prometheus
        state: absent

    - name: Extract the prometheus binary from the Prometheus {{ prometheus_version }} package
      unarchive:
        src: packages/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
        dest: /usr/bin
        extra_opts:
        - --strip-components=1
        - prometheus-{{ prometheus_version }}.linux-amd64/prometheus
        creates: /usr/bin/prometheus

    - name: Create the /etc/prometheus directory
      file:
        path: /etc/prometheus
        owner: prometheus
        group: prometheus
        mode: 0775
        state: directory

    - name: Extract the consoles directory from the Prometheus {{ prometheus_version }} package
      unarchive:
        src: packages/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
        dest: /etc/prometheus
        extra_opts:
        - --strip-components=1
        - prometheus-{{ prometheus_version }}.linux-amd64/consoles
        creates: /etc/prometheus/consoles

    - name: Extract the console_libraries directory from the Prometheus {{ prometheus_version }} package
      unarchive:
        src: packages/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
        dest: /etc/prometheus
        extra_opts:
        - --strip-components=1
        - prometheus-{{ prometheus_version }}.linux-amd64/console_libraries
        creates: /etc/prometheus/console_libraries

    when: (prometheus_installed_version != prometheus_version)

- name: Create the {{ prometheus_data_directory }} directory
  file:
    path: '{{ prometheus_data_directory }}'
    owner: prometheus
    group: prometheus
    mode: 0775
    state: directory

- name: Create the {{ prometheus_data_directory }}/metrics2 directory
  file:
    path: '{{ prometheus_data_directory }}/metrics2'
    owner: prometheus
    group: prometheus
    mode: 0775
    state: directory

- name: Generate the Prometheus configuration
  template:
    src: prometheus.yaml.j2
    dest: /etc/prometheus/prometheus.yml

- name: Generate the Prometheus environment
  template:
    src: prometheus-environment
    dest: /etc/default/prometheus

- name: Create the Prometheus systemd unit
  template:
    src: prometheus.service.j2
    dest: /lib/systemd/system/prometheus.service

- name: Setup the Prometheus monitoring configuration
  block:
  - name: Create the /etc/prometheus/k8s directory
    file:
      path: /etc/prometheus/k8s
      owner: prometheus
      group: prometheus
      mode: 0775
      state: directory

  - name: Copy the certificate for the Kubernetes CA to the Prometheus host
    block:
    - name: Fetch the /etc/kubernetes/pki/ca.crt from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/ca.crt
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/ca.crt to the Prometheus host
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/ca.crt
        dest: /etc/prometheus/k8s/ca.crt

  - name: Save the token for the Prometheus service account
    block:
    - shell:
        cmd: kubectl -n kube-system get secrets -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='prometheus')].data.token}"|base64 --decode
      delegate_to: "{{ groups['k8s_master'][0] }}"
      register: prometheus_service_account_secret_token_output

    - set_fact:
        prometheus_service_account_secret_token: '{{ prometheus_service_account_secret_token_output.stdout }}'

    - shell:
        cmd: echo '{{ prometheus_service_account_secret_token }}' > /etc/prometheus/k8s/token

  when: ("k8s_master" in groups.keys())

- name: Restart the Prometheus service
  systemd:
    name: prometheus.service
    state: restarted
    enabled: yes
    daemon_reload: yes

