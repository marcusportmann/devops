# file: roles/k8s_common/tasks/ubuntu.yaml

- debug:
    msg: Applying the Ubuntu-specific Kubernetes common configuration

- name: Install the root CA, Kubernetes intermediate CA and Kubernetes etcd intermediate CA certificates
  block:
  - name: Create the /usr/local/share/ca-certificates/k8s-{{ k8s_cluster_name }} directory
    file:
      path: /usr/local/share/ca-certificates/k8s-{{ k8s_cluster_name }}
      state: directory

  - name: Copy the root CA certificate for the Kubernetes cluster to the /usr/share/ca-certificates/k8s-{{ k8s_cluster_name }} directory
    copy:
      src: pki/{{ k8s_cluster_name }}/ca.crt
      dest: /usr/local/share/ca-certificates/k8s-{{ k8s_cluster_name }}/ca.crt

  - name: Copy the Kubernetes intermediate CA certificate for the Kubernetes cluster to the /usr/share/ca-certificates/k8s-{{ k8s_cluster_name }} directory
    copy:
      src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-ca.crt
      dest: /usr/local/share/ca-certificates/k8s-{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-ca.crt

  - name: Update the certificate index to install the CA certificate for the Kubernetes cluster
    shell:
      cmd: /usr/sbin/update-ca-certificates

- name: Disable swap since Kubernetes cannot work with swap enabled (1/2)
  shell: |
    swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Disable swap in /etc/fstab since Kubernetes can't work with swap enabled (2/2)
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  when: ansible_swaptotal_mb > 0

- name: Add the Kubernets GPG apt key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add the Kubernetes repository
  apt_repository:
    repo: deb https://apt.kubernetes.io kubernetes-xenial main
    state: present

- name: Enable the firewall
  ufw:
    state: enabled

- name: Allow all access to tcp port 22 (SSH)
  ufw:
    rule: allow
    port: '22'
    proto: tcp

- name: Allow all access to tcp port 2379
  ufw:
    rule: allow
    port: '2379'
    proto: tcp

- name: Allow all access to tcp port 2380
  ufw:
    rule: allow
    port: '2380'
    proto: tcp
#
#- name: Allow all access to tcp port 4149 (Default cAdvisor port used to query container metrics)
#  ufw:
#    rule: allow
#    port: '4149'
#    proto: tcp
#
- name: Allow all access to tcp port 6443 (Kubernetes API)
  ufw:
    rule: allow
    port: '6443'
    proto: tcp

#- name: Allow all access to tcp port 9099 (Health check server for Calico)
#  ufw:
#    rule: allow
#    port: '9099'
#    proto: tcp
#

- name: Allow all access to tcp port 9100 (Prometheus Node Exporter)
  ufw:
    rule: allow
    port: '9100'
    proto: tcp

- name: Allow all access to tcp port 10256 (Health check server for Kube Proxy)
  ufw:
    rule: allow
    port: '10256'
    proto: tcp

- name: Allow all access to tcp port 10257 (Kube Controller Manager Port)
  ufw:
    rule: allow
    port: '10257'
    proto: tcp

- name: Allow all access to tcp port 10250 (API which allows full node access)
  ufw:
    rule: allow
    port: '10250'
    proto: tcp
#
#- name: Allow all access to tcp port 10255 (Unauthenticated read-only port, allowing access to node state)
#  ufw:
#    rule: allow
#    port: '10255'
#    proto: tcp
#
- name: Allow all access to tcp ports 30000-32767 (Nodeport)
  ufw:
    rule: allow
    port: 30000:32767
    proto: tcp

- name: Open TCP and UDP pprts for the Weave CNI provider
  block:
  - name: Allow all access to tcp port 6783 for the Weave CNI provider
    ufw:
      rule: allow
      port: '6783'
      proto: tcp

  - name: Allow all access to udp port 6783 for the Weave CNI provider
    ufw:
      rule: allow
      port: '6783'
      proto: udp

  - name: Allow all access to udp port 6784 for the Weave CNI provider
    ufw:
      rule: allow
      port: '6784'
      proto: udp

  when: (k8s_cni_provider == 'weave')

- name: Update the Apt cache
  apt: update_cache=yes cache_valid_time=3600

- name: Install the arptables package
  apt: name=arptables state=latest

- name: Install the ebtables package
  apt: name=ebtables state=latest

- name: Install the jq package
  apt: name=jq state=latest

- name: Collect the system service facts
  service_facts:
  register: services_state

- name: Collect the package facts
  package_facts:
    manager: auto

- name: Retrieve the version of the installed kubelet package
  debug:
    msg: Found kubelet package version {{ ansible_facts.packages['kubelet'][0].version  }}
  when: "'kubelet' in ansible_facts.packages"

- name: Install the kubelet package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubelet package
    command:
      cmd: apt-mark unhold kubelet

  - name: Install the kubelet package ({{ k8s_ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubelet={{ k8s_ubuntu_package_version }}

  - name: Lock the version of the kubelet package
    command:
      cmd: apt-mark hold kubelet

  when: (('kubelet' not in ansible_facts.packages) or (ansible_facts.packages['kubelet'][0].version != k8s_ubuntu_package_version))

- name: Retrieve the version of the installed kubectl package
  debug:
    msg: Found kubectl package version {{ ansible_facts.packages['kubectl'][0].version  }}
  when: "'kubectl' in ansible_facts.packages"

- name: Install the kubectl package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubectl package
    command:
      cmd: apt-mark unhold kubectl

  - name: Install the kubectl package ({{ k8s_ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubectl={{ k8s_ubuntu_package_version }}

  - name: Lock the version of the kubectl package
    command:
      cmd: apt-mark hold kubectl

  when: (('kubectl' not in ansible_facts.packages) or (ansible_facts.packages['kubectl'][0].version != k8s_ubuntu_package_version))

- name: Install the kubeadm package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubeadm package
    command:
      cmd: apt-mark unhold kubeadm

  - name: Install the kubeadm package ({{ k8s_ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubeadm={{ k8s_ubuntu_package_version }}

  - name: Lock the version of the kubeadm package
    command:
      cmd: apt-mark hold kubeadm

  when: (('kubeadm' not in ansible_facts.packages) or (ansible_facts.packages['kubeadm'][0].version != k8s_ubuntu_package_version))




#- name: Retrieve the version of the installed kubernetes-cni package
#  debug:
#    msg: Found kubernetes-cni package version {{ ansible_facts.packages['kubernetes-cni'][0].version  }}
#  when: "'kubernetes-cni' in ansible_facts.packages"
#
#- name: Install the kubernetes-cni package
#  block:
#  - name: Unlock the version of the kubernetes-cni package
#    command:
#      cmd: apt-mark unhold kubernetes-cni
#    when: ('kubernetes-cni' in ansible_facts.packages)
#
#  - name: Install the kubernetes-cni package ({{ k8s_vmware_tanzu_kubernetes_cni_version }})
#    apt:
#      state: present
#      policy_rc_d: 101
#      deb: /var/tmp/ansible/vmware-kubernetes-v{{ k8s_vmware_tanzu_kubernetes_grid_version }}/debs/kubernetes-cni_{{ k8s_vmware_tanzu_kubernetes_cni_version }}_amd64.deb
#
#  - name: Lock the version of the kubernetes-cni package
#    command:
#      cmd: apt-mark hold kubernetes-cni
#
#  when: (('kubernetes-cni' not in ansible_facts.packages) or (ansible_facts.packages['kubernetes-cni'][0].version != k8s_vmware_tanzu_kubernetes_cni_version))
#
#- name: Retrieve the version of the installed kubelet package
#  debug:
#    msg: Found kubelet package version {{ ansible_facts.packages['kubelet'][0].version  }}
#  when: "'kubelet' in ansible_facts.packages"
#
#- name: Install the kubelet package
#  block:
#  - name: Unlock the version of the kubelet package
#    command:
#      cmd: apt-mark unhold kubelet
#    when: ('kubelet' in ansible_facts.packages)
#
#  - name: Install the kubelet package ({{ k8s_vmware_tanzu_kubernetes_kubelet_version }})
#    apt:
#      state: present
#      policy_rc_d: 101
#      deb: /var/tmp/ansible/vmware-kubernetes-v{{ k8s_vmware_tanzu_kubernetes_grid_version }}/debs/kubelet_{{ k8s_vmware_tanzu_kubernetes_kubelet_version }}_amd64.deb
#
#  - name: Lock the version of the kubelet package
#    command:
#      cmd: apt-mark hold kubelet
#
#  when: (('kubelet' not in ansible_facts.packages) or (ansible_facts.packages['kubelet'][0].version != k8s_vmware_tanzu_kubernetes_kubelet_version))
#
#- name: Retrieve the version of the installed kubectl package
#  debug:
#    msg: Found kubectl package version {{ ansible_facts.packages['kubectl'][0].version  }}
#  when: "'kubectl' in ansible_facts.packages"
#
#- name: Install the kubectl package
#  block:
#  - name: Unlock the version of the kubectl package
#    command:
#      cmd: apt-mark unhold kubectl
#    when: ('kubectl' in ansible_facts.packages)
#
#  - name: Install the kubectl package ({{ k8s_vmware_tanzu_kubernetes_kubectl_version }})
#    apt:
#      state: present
#      policy_rc_d: 101
#      deb: /var/tmp/ansible/vmware-kubernetes-v{{ k8s_vmware_tanzu_kubernetes_grid_version }}/debs/kubectl_{{ k8s_vmware_tanzu_kubernetes_kubectl_version }}_amd64.deb
#
#  - name: Lock the version of the kubectl package
#    command:
#      cmd: apt-mark hold kubectl
#
#  when: (('kubectl' not in ansible_facts.packages) or (ansible_facts.packages['kubectl'][0].version != k8s_vmware_tanzu_kubernetes_kubectl_version))
#
#- name: Retrieve the version of the installed cri-tools package
#  debug:
#    msg: Found cri-tools package version {{ ansible_facts.packages['cri-tools'][0].version  }}
#  when: "'cri-tools' in ansible_facts.packages"
#
#- name: Install the cri-tools package
#  block:
#  - name: Unlock the version of the cri-tools package
#    command:
#      cmd: apt-mark unhold cri-tools
#    when: ('cri-tools' in ansible_facts.packages)
#
#  - name: Install the cri-tools package ({{ k8s_vmware_tanzu_kubernetes_cri_tools_version }})
#    apt:
#      state: present
#      policy_rc_d: 101
#      deb: /var/tmp/ansible/vmware-kubernetes-v{{ k8s_vmware_tanzu_kubernetes_grid_version }}/debs/cri-tools_{{ k8s_vmware_tanzu_kubernetes_cri_tools_version }}_amd64.deb
#
#  - name: Lock the version of the cri-tools package
#    command:
#      cmd: apt-mark hold cri-tools
#
#  when: (('cri-tools' not in ansible_facts.packages) or (ansible_facts.packages['cri-tools'][0].version != k8s_vmware_tanzu_kubernetes_cri_tools_version))
#
#- name: Retrieve the version of the installed kubeadm package
#  debug:
#    msg: Found kubeadm package version {{ ansible_facts.packages['kubeadm'][0].version  }}
#  when: "'kubeadm' in ansible_facts.packages"
#
#- name: Install the kubeadm package
#  block:
#  - name: Unlock the version of the kubeadm package
#    command:
#      cmd: apt-mark unhold kubeadm
#    when: ('kubeadm' in ansible_facts.packages)
#
#  - name: Install the kubeadm package ({{ k8s_vmware_tanzu_kubernetes_kubeadm_version }})
#    apt:
#      state: present
#      policy_rc_d: 101
#      deb: /var/tmp/ansible/vmware-kubernetes-v{{ k8s_vmware_tanzu_kubernetes_grid_version }}/debs/kubeadm_{{ k8s_vmware_tanzu_kubernetes_kubeadm_version }}_amd64.deb
#
#  - name: Lock the version of the kubeadm package
#    command:
#      cmd: apt-mark hold kubeadm
#
#  when: (('kubeadm' not in ansible_facts.packages) or (ansible_facts.packages['kubeadm'][0].version != k8s_vmware_tanzu_kubernetes_kubeadm_version))
#

