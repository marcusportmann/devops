---
# file: roles/k8s_common/tasks/ubuntu.yaml

- debug:
    msg: Applying the Ubuntu-specific Kubernetes common configuration

- name: Collect the system service facts
  service_facts:
  register: services_state

- name: Collect the package facts
  package_facts:
    manager: auto

- name: Update the Apt cache
  apt: update_cache=yes cache_valid_time=3600


#   ____ _____ ____ _____ ___ _____ ___ ____    _  _____ _____      _   _   _ _____ _   _  ___  ____  ___ _____ ___ _____ ____
#  / ___| ____|  _ \_   _|_ _|  ___|_ _/ ___|  / \|_   _| ____|    / \ | | | |_   _| | | |/ _ \|  _ \|_ _|_   _|_ _| ____/ ___|
# | |   |  _| | |_) || |  | || |_   | | |     / _ \ | | |  _|     / _ \| | | | | | | |_| | | | | |_) || |  | |  | ||  _| \___ \
# | |___| |___|  _ < | |  | ||  _|  | | |___ / ___ \| | | |___   / ___ \ |_| | | | |  _  | |_| |  _ < | |  | |  | || |___ ___) |
#  \____|_____|_| \_\|_| |___|_|   |___\____/_/   \_\_| |_____| /_/   \_\___/  |_| |_| |_|\___/|_| \_\___| |_| |___|_____|____/
#
- name: Install the root CA, Kubernetes intermediate CA and Kubernetes etcd intermediate CA certificates
  block:
  - name: Create the /usr/local/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }} directory
    file:
      path: /usr/local/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }}
      state: directory

  - name: Copy the root CA certificate for the Kubernetes cluster to the /usr/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }} directory
    copy:
      src: '{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/ca.crt'
      dest: "/usr/local/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }}/ca.crt"

  - name: Copy the Kubernetes intermediate CA certificate for the Kubernetes cluster to the /usr/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }} directory
    copy:
      src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-ca-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"
      dest: "/usr/local/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }}/k8s-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"

  - name: Update the certificate index to install the CA certificate for the Kubernetes cluster
    shell:
      cmd: /usr/sbin/update-ca-certificates


#  ____ ___ ____    _    ____  _     _____   ______        ___    ____
# |  _ \_ _/ ___|  / \  | __ )| |   | ____| / ___\ \      / / \  |  _ \
# | | | | |\___ \ / _ \ |  _ \| |   |  _|   \___ \\ \ /\ / / _ \ | |_) |
# | |_| | | ___) / ___ \| |_) | |___| |___   ___) |\ V  V / ___ \|  __/
# |____/___|____/_/   \_\____/|_____|_____| |____/  \_/\_/_/   \_\_|
#
- name: Disable swap since Kubernetes cannot work with swap enabled (1/2)
  shell: |
    swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Disable swap in /etc/fstab since Kubernetes can't work with swap enabled (2/2)
  replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
  when: ansible_swaptotal_mb > 0


#  ____  _   _ ____  ____   ___  ____ _____ ___ _   _  ____   ____   _    ____ _  __    _    ____ _____ ____
# / ___|| | | |  _ \|  _ \ / _ \|  _ \_   _|_ _| \ | |/ ___| |  _ \ / \  / ___| |/ /   / \  / ___| ____/ ___|
# \___ \| | | | |_) | |_) | | | | |_) || |  | ||  \| | |  _  | |_) / _ \| |   | ' /   / _ \| |  _|  _| \___ \
#  ___) | |_| |  __/|  __/| |_| |  _ < | |  | || |\  | |_| | |  __/ ___ \ |___| . \  / ___ \ |_| | |___ ___) |
# |____/ \___/|_|   |_|    \___/|_| \_\|_| |___|_| \_|\____| |_| /_/   \_\____|_|\_\/_/   \_\____|_____|____/
#
- name: Install the arptables package
  apt:
    name: arptables
    state: latest

- name: Install the ebtables package
  apt:
    name: ebtables
    state: latest

- name: Install the jq package
  apt:
    name: jq
    state: latest


#  _  _______ ____  _   _ _____ _       __  __  ___  ____  _   _ _     _____ ____
# | |/ / ____|  _ \| \ | | ____| |     |  \/  |/ _ \|  _ \| | | | |   | ____/ ___|
# | ' /|  _| | |_) |  \| |  _| | |     | |\/| | | | | | | | | | | |   |  _| \___ \
# | . \| |___|  _ <| |\  | |___| |___  | |  | | |_| | |_| | |_| | |___| |___ ___) |
# |_|\_\_____|_| \_\_| \_|_____|_____| |_|  |_|\___/|____/ \___/|_____|_____|____/
#
- name: Add the overlay module
  community.general.modprobe:
    name: overlay
    state: present

- name: Add the br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Ensure the overlay module is persistent
  lineinfile:
    path: /etc/modules-load.d/modules.conf
    line: overlay
    create: yes
    owner: root
    group: root
    mode: '0644'

- name: Ensure the br_netfilter module is persistent
  lineinfile:
    path: /etc/modules-load.d/modules.conf
    line: br_netfilter
    create: yes
    owner: root
    group: root
    mode: '0644'


#   ____ ___  _   _ _____  _    ___ _   _ _____ ____  ____
#  / ___/ _ \| \ | |_   _|/ \  |_ _| \ | | ____|  _ \|  _ \
# | |  | | | |  \| | | | / _ \  | ||  \| |  _| | |_) | | | |
# | |__| |_| | |\  | | |/ ___ \ | || |\  | |___|  _ <| |_| |
#  \____\___/|_| \_| |_/_/   \_\___|_| \_|_____|_| \_\____/
#
- name: Add the Docker CE apt key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add the Docker CE repository
  apt_repository:
    repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable'
    filename: 'docker-ce'
    state: present
  register: add_docker_ce_repository_result

- name: Update the Apt cache
  apt: update_cache=yes cache_valid_time=3600
  when: (add_docker_ce_repository_result.changed == True)

- name: Check whether the /etc/containerd/config.toml file exists
  stat:
    path: /etc/containerd/config.toml
  register: containerd_config_stat_result

- name: Install the containerd package
  apt:
    name: containerd.io
    state: latest
  register: install_containerd_package_result

- name: Create the containerd configuration
  block:
  - name: Create the /etc/containerd directory if it does not exist
    file:
      path: /etc/containerd
      state: directory
      mode: '0755'
      owner: root
      group: root

  - name: Create the default containerd configuration
    shell:
      cmd: containerd config default > /etc/containerd/config.toml

  - name: Configure the systemd cgroup driver for containerd
    replace:
      path: /etc/containerd/config.toml
      regexp: 'SystemdCgroup = false'
      replace: 'SystemdCgroup = true'
      backup: no
  when: (containerd_config_stat_result.stat.exists == False)

- name: Restart the containerd service if required
  systemd:
    name: containerd
    state: restarted
    enabled: yes
  when: (install_containerd_package_result.changed == True)

- name: Ensure that the containerd service is started
  systemd:
    name: containerd
    state: started
    enabled: yes


#  _  ___   _ ____  _____ ____  _   _ _____ _____ _____ ____    ____   _    ____ _  __    _    ____ _____ ____
# | |/ / | | | __ )| ____|  _ \| \ | | ____|_   _| ____/ ___|  |  _ \ / \  / ___| |/ /   / \  / ___| ____/ ___|
# | ' /| | | |  _ \|  _| | |_) |  \| |  _|   | | |  _| \___ \  | |_) / _ \| |   | ' /   / _ \| |  _|  _| \___ \
# | . \| |_| | |_) | |___|  _ <| |\  | |___  | | | |___ ___) | |  __/ ___ \ |___| . \  / ___ \ |_| | |___ ___) |
# |_|\_\\___/|____/|_____|_| \_\_| \_|_____| |_| |_____|____/  |_| /_/   \_\____|_|\_\/_/   \_\____|_____|____/
#
- name: Add the Kubernets GPG apt key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg.asc
    state: present

- name: Add the Kubernetes repository
  apt_repository:
    repo: deb https://packages.cloud.google.com/apt kubernetes-xenial main
    state: present
    filename: 'kubernetes'

- name: Retrieve the version of the installed kubelet package
  debug:
    msg: Found the installed kubelet package ({{ ansible_facts.packages['kubelet'][0].version }})
  when: "'kubelet' in ansible_facts.packages"

- name: Install the kubelet package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubelet package
    command:
      cmd: apt-mark unhold kubelet
    when: "'kubelet' in ansible_facts.packages"

  - name: Install the kubelet package ({{ k8s_config.k8s_ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubelet={{ k8s_config.k8s_ubuntu_package_version }}

  - name: Lock the version of the kubelet package
    command:
      cmd: apt-mark hold kubelet

  when: (('kubelet' not in ansible_facts.packages) or (ansible_facts.packages['kubelet'][0].version != k8s_config.k8s_ubuntu_package_version))

- name: Retrieve the version of the installed kubectl package
  debug:
    msg: Found the installed kubectl package ({{ ansible_facts.packages['kubectl'][0].version }})
  when: "'kubectl' in ansible_facts.packages"

- name: Install the kubectl package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubectl package
    command:
      cmd: apt-mark unhold kubectl
    when: "'kubectl' in ansible_facts.packages"

  - name: Install the kubectl package ({{ k8s_config.k8s_ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubectl={{ k8s_config.k8s_ubuntu_package_version }}

  - name: Lock the version of the kubectl package
    command:
      cmd: apt-mark hold kubectl

  when: (('kubectl' not in ansible_facts.packages) or (ansible_facts.packages['kubectl'][0].version != k8s_config.k8s_ubuntu_package_version))

- name: Retrieve the version of the installed kubeadm package
  debug:
    msg: Found the installed kubeadm package ({{ ansible_facts.packages['kubeadm'][0].version }})
  when: "'kubeadm' in ansible_facts.packages"

- name: Install the kubeadm package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubeadm package
    command:
      cmd: apt-mark unhold kubeadm
    when: "'kubeadm' in ansible_facts.packages"

  - name: Install the kubeadm package ({{ k8s_config.k8s_ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubeadm={{ k8s_config.k8s_ubuntu_package_version }}

  - name: Lock the version of the kubeadm package
    command:
      cmd: apt-mark hold kubeadm

  when: (('kubeadm' not in ansible_facts.packages) or (ansible_facts.packages['kubeadm'][0].version != k8s_config.k8s_ubuntu_package_version))


#  _  ___   _ ____  _____ ____  _   _ _____ _____ _____ ____    ______   ______   ____ _____ _       ____  _____ _____ _____ ___ _   _  ____ ____
# | |/ / | | | __ )| ____|  _ \| \ | | ____|_   _| ____/ ___|  / ___\ \ / / ___| / ___|_   _| |     / ___|| ____|_   _|_   _|_ _| \ | |/ ___/ ___|
# | ' /| | | |  _ \|  _| | |_) |  \| |  _|   | | |  _| \___ \  \___ \\ V /\___ \| |     | | | |     \___ \|  _|   | |   | |  | ||  \| | |  _\___ \
# | . \| |_| | |_) | |___|  _ <| |\  | |___  | | | |___ ___) |  ___) || |  ___) | |___  | | | |___   ___) | |___  | |   | |  | || |\  | |_| |___) |
# |_|\_\\___/|____/|_____|_| \_\_| \_|_____| |_| |_____|____/  |____/ |_| |____/ \____| |_| |_____| |____/|_____| |_|   |_| |___|_| \_|\____|____/
#
- name: Check whether the /etc/sysctl.d/kubernetes.conf file exists
  stat:
    path: /etc/sysctl.d/kubernetes.conf
  register: kubernetes_sysctl_stat_result

- name: Apply the Kubernetes sysctl configuration
  block:
  - name: Create the /etc/sysctl.d/kubernetes.conf file
    template:
      src: kubernetes.conf.j2
      dest: /etc/sysctl.d/kubernetes.conf

  - name: Reload the kernel parameter configuration files
    command:
      cmd: /sbin/sysctl --system

  when: (kubernetes_sysctl_stat_result.stat.exists == False)


#  _  ___   _ ____  _____ _     _____ _____   _______  _______ ____      _         _    ____   ____ ____
# | |/ / | | | __ )| ____| |   | ____|_   _| | ____\ \/ /_   _|  _ \    / \       / \  |  _ \ / ___/ ___|
# | ' /| | | |  _ \|  _| | |   |  _|   | |   |  _|  \  /  | | | |_) |  / _ \     / _ \ | |_) | |  _\___ \
# | . \| |_| | |_) | |___| |___| |___  | |   | |___ /  \  | | |  _ <  / ___ \   / ___ \|  _ <| |_| |___) |
# |_|\_\\___/|____/|_____|_____|_____| |_|   |_____/_/\_\ |_| |_| \_\/_/   \_\ /_/   \_\_| \_\\____|____/
#
#- name: Set the KUBELET_EXTRA_ARGS flag in the /etc/default/kubelet file
#  lineinfile:
#    path: /etc/default/kubelet
#    regexp: '^KUBELET_EXTRA_ARGS='
#    line: 'KUBELET_EXTRA_ARGS=--feature-gates="AllAlpha=false,RunAsGroup=true" --container-runtime=remote --cgroup-driver=systemd --container-runtime-endpoint="unix:///var/run/crio/crio.sock" --runtime-request-timeout=5m'
#    create: yes
#    owner: root
#    group: root
#    mode: '0644'
#


