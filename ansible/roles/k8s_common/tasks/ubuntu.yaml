---
# file: roles/k8s_common/tasks/ubuntu.yaml

- debug:
    msg: Applying the Ubuntu-specific Kubernetes common configuration

- name: Collect the system service facts
  service_facts:
  register: services_state

- name: Collect the package facts
  package_facts:
    manager: auto

- name: Update the Apt cache
  apt: update_cache=yes cache_valid_time=3600


#   ____ _____ ____ _____ ___ _____ ___ ____    _  _____ _____      _   _   _ _____ _   _  ___  ____  ___ _____ ___ _____ ____
#  / ___| ____|  _ \_   _|_ _|  ___|_ _/ ___|  / \|_   _| ____|    / \ | | | |_   _| | | |/ _ \|  _ \|_ _|_   _|_ _| ____/ ___|
# | |   |  _| | |_) || |  | || |_   | | |     / _ \ | | |  _|     / _ \| | | | | | | |_| | | | | |_) || |  | |  | ||  _| \___ \
# | |___| |___|  _ < | |  | ||  _|  | | |___ / ___ \| | | |___   / ___ \ |_| | | | |  _  | |_| |  _ < | |  | |  | || |___ ___) |
#  \____|_____|_| \_\|_| |___|_|   |___\____/_/   \_\_| |_____| /_/   \_\___/  |_| |_| |_|\___/|_| \_\___| |_| |___|_____|____/
#
- name: Install the root CA, Kubernetes intermediate CA and Kubernetes etcd intermediate CA certificates
  block:
  - name: Create the /usr/local/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }} directory
    file:
      path: /usr/local/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }}
      state: directory

  - name: Copy the root CA certificate for the Kubernetes cluster to the /usr/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }} directory
    copy:
      src: '{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/ca.crt'
      dest: "/usr/local/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }}/ca.crt"

  - name: Copy the Kubernetes intermediate CA certificate for the Kubernetes cluster to the /usr/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }} directory
    copy:
      src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-ca-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"
      dest: "/usr/local/share/ca-certificates/k8s-{{ k8s_config.cluster_name.replace('_', '-') }}/k8s-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"

  - name: Update the certificate index to install the CA certificate for the Kubernetes cluster
    shell:
      cmd: /usr/sbin/update-ca-certificates


#  ____ ___ ____    _    ____  _     _____   ______        ___    ____
# |  _ \_ _/ ___|  / \  | __ )| |   | ____| / ___\ \      / / \  |  _ \
# | | | | |\___ \ / _ \ |  _ \| |   |  _|   \___ \\ \ /\ / / _ \ | |_) |
# | |_| | | ___) / ___ \| |_) | |___| |___   ___) |\ V  V / ___ \|  __/
# |____/___|____/_/   \_\____/|_____|_____| |____/  \_/\_/_/   \_\_|
#
- name: Disable swap since Kubernetes cannot work with swap enabled (1/2)
  shell: |
    swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Disable swap in /etc/fstab since Kubernetes can't work with swap enabled (2/2)
  replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
  when: ansible_swaptotal_mb > 0


#  _____ ___ ____  _______        ___    _     _       ____   ___  ____ _____ ____
# |  ___|_ _|  _ \| ____\ \      / / \  | |   | |     |  _ \ / _ \|  _ \_   _/ ___|
# | |_   | || |_) |  _|  \ \ /\ / / _ \ | |   | |     | |_) | | | | |_) || | \___ \
# |  _|  | ||  _ <| |___  \ V  V / ___ \| |___| |___  |  __/| |_| |  _ < | |  ___) |
# |_|   |___|_| \_\_____|  \_/\_/_/   \_\_____|_____| |_|    \___/|_| \_\|_| |____/
#
- name: Enable the firewall
  ufw:
    state: enabled
    policy: deny

- name: Allow all hosts access to tcp port 22 (SSH)
  ufw:
    rule: allow
    port: '22'
    proto: tcp

- name: Allow all hosts access to tcp port 2379
  ufw:
    rule: allow
    port: '2379'
    proto: tcp

- name: Allow all hosts access to tcp port 2380
  ufw:
    rule: allow
    port: '2380'
    proto: tcp
#
#- name: Allow all hosts access to tcp port 4149 (Default cAdvisor port used to query container metrics)
#  ufw:
#    rule: allow
#    port: '4149'
#    proto: tcp
#
- name: Allow all hosts access to tcp port 6443 (Kubernetes API)
  ufw:
    rule: allow
    port: '6443'
    proto: tcp
#
#- name: Allow all hosts access to tcp port 9099 (Health check server for Calico)
#  ufw:
#    rule: allow
#    port: '9099'
#    proto: tcp
#
- name: Allow all hosts access to tcp port 9100 (Prometheus Node Exporter)
  ufw:
    rule: allow
    port: '9100'
    proto: tcp

- name: Allow all hosts access to tcp port 10256 (Health check server for Kube Proxy)
  ufw:
    rule: allow
    port: '10256'
    proto: tcp

- name: Allow all hosts access to tcp port 10257 (Kube Controller Manager Port)
  ufw:
    rule: allow
    port: '10257'
    proto: tcp

- name: Allow all hosts access to tcp port 10250 (API which allows full node access)
  ufw:
    rule: allow
    port: '10250'
    proto: tcp
#
#- name: Allow all hosts access to tcp port 10255 (Unauthenticated read-only port, allowing access to node state)
#  ufw:
#    rule: allow
#    port: '10255'
#    proto: tcp
#
- name: Allow all hosts access to tcp ports 30000-32767 (Nodeport)
  ufw:
    rule: allow
    port: 30000:32767
    proto: tcp

- name: Open TCP and UDP pprts for the Weave CNI provider
  block:
  - name: Allow all hosts access to tcp port 6783 for the Weave CNI provider
    ufw:
      rule: allow
      port: '6783'
      proto: tcp

  - name: Allow all access to udp port 6783 for the Weave CNI provider
    ufw:
      rule: allow
      port: '6783'
      proto: udp

  - name: Allow all access to udp port 6784 for the Weave CNI provider
    ufw:
      rule: allow
      port: '6784'
      proto: udp

  when: (k8s_config.cni_provider == 'weave')


#  ____  _   _ ____  ____   ___  ____ _____ ___ _   _  ____   ____   _    ____ _  __    _    ____ _____ ____
# / ___|| | | |  _ \|  _ \ / _ \|  _ \_   _|_ _| \ | |/ ___| |  _ \ / \  / ___| |/ /   / \  / ___| ____/ ___|
# \___ \| | | | |_) | |_) | | | | |_) || |  | ||  \| | |  _  | |_) / _ \| |   | ' /   / _ \| |  _|  _| \___ \
#  ___) | |_| |  __/|  __/| |_| |  _ < | |  | || |\  | |_| | |  __/ ___ \ |___| . \  / ___ \ |_| | |___ ___) |
# |____/ \___/|_|   |_|    \___/|_| \_\|_| |___|_| \_|\____| |_| /_/   \_\____|_|\_\/_/   \_\____|_____|____/
#
- name: Install the arptables package
  apt: name=arptables state=latest

- name: Install the ebtables package
  apt: name=ebtables state=latest

- name: Install the jq package
  apt: name=jq state=latest


#   ____ ____  ___       ___
#  / ___|  _ \|_ _|     / _ \
# | |   | |_) || |_____| | | |
# | |___|  _ < | |_____| |_| |
#  \____|_| \_\___|     \___/
#
- name: Add the CRI-O GPG apt key
  apt_key:
    url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/xUbuntu_{{ ansible_distribution_version }}/Release.key
    state: present

- name: Add the devel_kubic_libcontainers_stable repository
  apt_repository:
    repo: 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ ansible_distribution_version }}/ /'
    filename: 'devel_kubic_libcontainers_stable'
    state: present

- name: Add the devel_kubic_libcontainers_stable_cri_o repository
  apt_repository:
    repo: 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ k8s_config.cri_o_version }}/xUbuntu_{{ ansible_distribution_version }}/ /'
    filename: 'devel_kubic_libcontainers_stable_cri_o'
    state: present

- name: Retrieve the version of the installed crio-o package
  debug:
    msg: Found the installed cri-o package ({{ ansible_facts.packages['cri-o'][0].version }})
  when: "'cri-o' in ansible_facts.packages"

- name: Install the cri-o package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the cri-o package
    command:
      cmd: apt-mark unhold cri-o

  - name: Install the cri-o package ({{ k8s_config.cri_o_ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - cri-o={{ k8s_config.cri_o_ubuntu_package_version }}

  - name: Lock the version of the cri-o package
    command:
      cmd: apt-mark hold cri-o

  when: (('cri-o' not in ansible_facts.packages) or (ansible_facts.packages['cri-o'][0].version != k8s_config.cri_o_ubuntu_package_version))

- name: Add the overlay module
  community.general.modprobe:
    name: overlay
    state: present

- name: Add the br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Ensure the overlay module is persistent
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/modules.conf
    line: overlay
    create: yes
    owner: root
    group: root
    mode: '0644'

- name: Ensure the br_netfilter module is persistent
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/modules.conf
    line: br_netfilter
    create: yes
    owner: root
    group: root
    mode: '0644'

- name: Copy the CRI-O configuration file
  copy:
    src: files/99-kubernetes-cri.conf
    dest: '/etc/sysctl.d/99-kubernetes-cri.conf'

- name: Ensure that the CRI-O service is started
  systemd:
    name: cri-o.service
    state: started
    enabled: yes


#  _  ___   _ ____  _____ ____  _   _ _____ _____ _____ ____    ____   _    ____ _  __    _    ____ _____ ____
# | |/ / | | | __ )| ____|  _ \| \ | | ____|_   _| ____/ ___|  |  _ \ / \  / ___| |/ /   / \  / ___| ____/ ___|
# | ' /| | | |  _ \|  _| | |_) |  \| |  _|   | | |  _| \___ \  | |_) / _ \| |   | ' /   / _ \| |  _|  _| \___ \
# | . \| |_| | |_) | |___|  _ <| |\  | |___  | | | |___ ___) | |  __/ ___ \ |___| . \  / ___ \ |_| | |___ ___) |
# |_|\_\\___/|____/|_____|_| \_\_| \_|_____| |_| |_____|____/  |_| /_/   \_\____|_|\_\/_/   \_\____|_____|____/
#
- name: Add the Kubernets GPG apt key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add the Kubernetes repository
  apt_repository:
    repo: deb https://apt.kubernetes.io kubernetes-xenial main
    state: present

- name: Retrieve the version of the installed kubelet package
  debug:
    msg: Found the installed kubelet package ({{ ansible_facts.packages['kubelet'][0].version }})
  when: "'kubelet' in ansible_facts.packages"

- name: Install the kubelet package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubelet package
    command:
      cmd: apt-mark unhold kubelet

  - name: Install the kubelet package ({{ k8s_config.ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubelet={{ k8s_config.ubuntu_package_version }}

  - name: Lock the version of the kubelet package
    command:
      cmd: apt-mark hold kubelet

  when: (('kubelet' not in ansible_facts.packages) or (ansible_facts.packages['kubelet'][0].version != k8s_config.ubuntu_package_version))

- name: Retrieve the version of the installed kubectl package
  debug:
    msg: Found the installed kubectl package ({{ ansible_facts.packages['kubectl'][0].version }})
  when: "'kubectl' in ansible_facts.packages"

- name: Install the kubectl package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubectl package
    command:
      cmd: apt-mark unhold kubectl

  - name: Install the kubectl package ({{ k8s_config.ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubectl={{ k8s_config.ubuntu_package_version }}

  - name: Lock the version of the kubectl package
    command:
      cmd: apt-mark hold kubectl

  when: (('kubectl' not in ansible_facts.packages) or (ansible_facts.packages['kubectl'][0].version != k8s_config.ubuntu_package_version))

- name: Retrieve the version of the installed kubeadm package
  debug:
    msg: Found the installed kubeadm package ({{ ansible_facts.packages['kubeadm'][0].version }})
  when: "'kubeadm' in ansible_facts.packages"

- name: Install the kubeadm package
  block:
  - name: Update the Apt cache
    apt: update_cache=yes cache_valid_time=3600

  - name: Unlock the version of the kubeadm package
    command:
      cmd: apt-mark unhold kubeadm

  - name: Install the kubeadm package ({{ k8s_config.ubuntu_package_version }})
    apt:
      state: present
      policy_rc_d: 101
      name:
       - kubeadm={{ k8s_config.ubuntu_package_version }}

  - name: Lock the version of the kubeadm package
    command:
      cmd: apt-mark hold kubeadm

  when: (('kubeadm' not in ansible_facts.packages) or (ansible_facts.packages['kubeadm'][0].version != k8s_config.ubuntu_package_version))

