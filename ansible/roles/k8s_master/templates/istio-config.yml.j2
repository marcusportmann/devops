# TODO: The API overlay configuration for the egressGateway is a temporary fix for the defect referenced by https://github.com/istio/istio/issues/20082 and needs to be removed.

apiVersion: install.istio.io/v1alpha2
kind: IstioControlPlane

spec:

{% if ((istio_profile is defined) and (istio_profile != None))  %}
  profile: {{ istio_profile }}
{% else %}
  profile: sds
{% endif %}

  autoInjection:
    components:
      injector:
        k8s:
          hpaSpec:
            minReplicas: 1
          resources:
            requests:
              cpu: 10m
              memory: 40Mi

  configManagement:
    components:
      galley:
        k8s:
          hpaSpec:
            minReplicas: 1
          resources:
            requests:
              cpu: 10m
              memory: 40Mi

  gateways:
    components:
      ingressGateway:
        k8s:
          hpaSpec:
            minReplicas: 1
          resources:
            requests:
              cpu: 10m
              memory: 40Mi

{% if ((istio_profile is defined) and (istio_profile != None) and (istio_profile == "demo"))  %}

      egressGateway:
        enabled: true
        k8s:
          overlays:
            - kind: Deployment
              name: istio-egressgateway
              patches:
                - path: spec.template.spec.volumes
                  value:
                    - name: istio-token
                      projected:
                        sources:
                          - serviceAccountToken:
                              audience: istio-ca
                              expirationSeconds: 43200
                              path: istio-token
                    - hostPath:
                        path: /var/run/sds
                      name: sdsudspath
                    - name: istio-certs
                      secret:
                        optional: true
                        secretName: istio.default
                    - name: egressgateway-certs
                      secret:
                        optional: true
                        secretName: istio-egressgateway-certs
                    - name: egressgateway-ca-certs
                      secret:
                        optional: true
                        secretName: istio-egressgateway-ca-certs
                - path: spec.template.spec.containers.[name:istio-proxy].volumeMounts
                  value:
                    - mountPath: /var/run/sds
                      name: sdsudspath
                      readOnly: true
                    - mountPath: /var/run/secrets/tokens
                      name: istio-token
                    - mountPath: /etc/certs
                      name: istio-certs
                      readOnly: true
                    - mountPath: /etc/istio/egressgateway-certs
                      name: egressgateway-certs
                      readOnly: true
                    - mountPath: /etc/istio/egressgateway-ca-certs
                      name: egressgateway-ca-certs
                      readOnly: true

{% endif %}

  policy:
    components:
      policy:
        k8s:
          hpaSpec:
            minReplicas: 1
          resources:
            requests:
              cpu: 10m
              memory: 40Mi

  security:
    components:
      citadel:
        k8s:
          hpaSpec:
            minReplicas: 1
          resources:
            requests:
              cpu: 10m
              memory: 40Mi

  telemetry:
    components:
      telemetry:
        k8s:
          hpaSpec:
            minReplicas: 1
          resources:
            requests:
              cpu: 10m
              memory: 40Mi

  trafficManagement:
    components:
      pilot:
        k8s:
          hpaSpec:
            minReplicas: 1
          resources:
            requests:
              cpu: 10m
              memory: 40Mi

  values:
    gateways:
      istio-ingressgateway:
        labels:
          app: xxx-ingressgateway
          istio: xxx-ingressgateway
        type: NodePort
        sds:
          enabled: true
        ports:
          - name: tcp-envoy
            port: 15000
            targetPort: 15000
          - name: http-ingress-gateway
            port: 15020
            targetPort: 15020
          - name: http-80
            port: 80
            targetPort: 80
            nodePort: 30080
          - name: https-443
            port: 443
            targetPort: 443
            nodePort: 30443
#           - name: tcp
#             port: 31400
#             nodePort: 31400

{% if ((istio_kiali_enabled is defined) and (istio_kiali_enabled != None) and (istio_kiali_enabled == True))  %}
          - name: https-kiali
            port: 15029
            targetPort: 15029
            nodePort: 30029
{% endif %}
{% if ((istio_prometheus_enabled is defined) and (istio_prometheus_enabled != None) and (istio_prometheus_enabled == True))  %}
          - name: https-prometheus
            port: 15030
            targetPort: 15030
            nodePort: 30030
{% endif %}
{% if ((istio_grafana_enabled is defined) and (istio_grafana_enabled != None) and (istio_grafana_enabled == True))  %}
          - name: https-grafana
            port: 15031
            targetPort: 15031
            nodePort: 30031
{% endif %}
{% if ((istio_tracing_enabled is defined) and (istio_tracing_enabled != None) and (istio_tracing_enabled == True))  %}
          - name: https-tracing
            port: 15032
            targetPort: 15032
            nodePort: 30032
{% endif %}
          - name: tls-ingress
            port: 15443
            targetPort: 15443
    global:
      mtls:
        enabled: true
      proxy:
        accessLogFile: "/dev/stdout"
        logLevel: "debug"
        clusterDomain: {{ k8s_cluster_domain }}
      sds:
        enabled: true
    security:
      selfSigned: true
    sidecarInjectorWebhook:
      rewriteAppHTTPProbe: true


{% if ((istio_profile is defined) and (istio_profile != None) and (istio_profile != "demo"))  %}

{% if ((istio_grafana_enabled is defined) and (istio_grafana_enabled != None) and (istio_grafana_enabled == True))  %}
    grafana:
      enabled: true
      security:
        enabled: false
{% else %}
    grafana:
      enabled: false
{% endif %}
{% if ((istio_kiali_enabled is defined) and (istio_kiali_enabled != None) and (istio_kiali_enabled == True))  %}
    kiali:
      enabled: true
      security:
        enabled: false
{% else %}
    kiali:
      enabled: false
{% endif %}
{% if ((istio_prometheus_enabled is defined) and (istio_prometheus_enabled != None) and (istio_prometheus_enabled == True))  %}
    prometheus:
      enabled: true
{% else %}
    prometheus:
      enabled: false
{% endif %}
{% if ((istio_tracing_enabled is defined) and (istio_tracing_enabled != None) and (istio_tracing_enabled == True))  %}
    tracing:
      enabled: true
{% else %}
    tracing:
      enabled: false
{% endif %}

{% endif %}
