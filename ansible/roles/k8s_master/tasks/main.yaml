---
# file: roles/k8s_master/tasks/main.yaml

- fail:
    msg: 'No cluster_name specified for the Kubernetes cluster'
  when: ((k8s_config.cluster_name is not defined) or (k8s_config.cluster_name == None) or (k8s_config.cluster_name == ''))

- fail:
    msg: 'No cluster_domain specified for the Kubernetes cluster'
  when: ((k8s_config.cluster_domain is not defined) or (k8s_config.cluster_domain == None) or (k8s_config.cluster_domain == ''))


#  _  _____ ____       _    _     _       __  __    _    ____ _____ _____ ____  ____
# | |/ ( _ ) ___|     / \  | |   | |     |  \/  |  / \  / ___|_   _| ____|  _ \/ ___|
# | ' // _ \___ \    / _ \ | |   | |     | |\/| | / _ \ \___ \ | | |  _| | |_) \___ \
# | . \ (_) |__) |  / ___ \| |___| |___  | |  | |/ ___ \ ___) || | | |___|  _ < ___) |
# |_|\_\___/____/  /_/   \_\_____|_____| |_|  |_/_/   \_\____/ |_| |_____|_| \_\____/
#
- name: Create the configuration directories for the Kubernetes API server and scheduler
  block:
  - name: Create the /etc/kubernetes/apiserver directory
    file:
      path: /etc/kubernetes/apiserver
      state: directory

  - name: Create the /etc/kubernetes/scheduler directory
    file:
      path: /etc/kubernetes/scheduler
      state: directory

- name: Copy the standard keys and certificates for the Kubernetes cluster
  block:
  - name: Create the /etc/kubernetes/pki/etcd directory
    file:
      path: /etc/kubernetes/pki/etcd
      state: directory

  - name: Copy the Kubernetes intermediate CA private key to the /etc/kubernetes/pki directory
    copy:
      src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-ca-{{ k8s_config.cluster_name.replace('_', '-') }}.key"
      dest: '/etc/kubernetes/pki/ca.key'

  - name: Copy the Kubernetes intermediate CA certificate to the /etc/kubernetes/pki directory
    copy:
      src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-ca-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"
      dest: '/etc/kubernetes/pki/ca.crt'


#  _  _____ ____    _____ ___ ____  ____ _____   __  __    _    ____ _____ _____ ____
# | |/ ( _ ) ___|  |  ___|_ _|  _ \/ ___|_   _| |  \/  |  / \  / ___|_   _| ____|  _ \
# | ' // _ \___ \  | |_   | || |_) \___ \ | |   | |\/| | / _ \ \___ \ | | |  _| | |_) |
# | . \ (_) |__) | |  _|  | ||  _ < ___) || |   | |  | |/ ___ \ ___) || | | |___|  _ <
# |_|\_\___/____/  |_|   |___|_| \_\____/ |_|   |_|  |_/_/   \_\____/ |_| |_____|_| \_\
#
- name: Initialize the first master node in the Kubernetes cluster
  block:
  - name: Check whether the kubelet service has been configured
    stat:
      path: /var/lib/kubelet/config.yaml
    register: kubelet_config_stat_result

  - name: Initializing the first master node in the Kubernetes cluster
    block:
    - name: Copy the keys and certificates for the stacked etcd topology
      block:
      - name: Copy the Kubernetes intermediate CA private key to the /etc/kubernetes/pki/etcd directory
        copy:
          src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-etcd-ca-{{ k8s_config.cluster_name.replace('_', '-') }}.key"
          dest: '/etc/kubernetes/pki/etcd/ca.key'

      - name: Copy the Kubernetes intermediate CA certificate to the /etc/kubernetes/pki/etcd directory
        copy:
          src: "{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/k8s-etcd-ca-{{ k8s_config.cluster_name.replace('_', '-') }}.crt"
          dest: '/etc/kubernetes/pki/etcd/ca.crt'

      when: k8s_config.etcd_topology == 'stacked'

    - name: Copy the keys and certificates for the external etcd topology
      block:
      - name: Copy the etcd-ca.crt certificate to the /etc/kubernetes/pki/etcd directory
        copy:
          src: '{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/etcd-ca.crt'
          dest: '/etc/kubernetes/pki/etcd/ca.crt'

      - name: Copy the {{ inventory_hostname_short }}.key private key to the /etc/kubernetes/pki/etcd directory
        copy:
          src: '{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/{{ inventory_hostname_short }}.key'
          dest: '/etc/kubernetes/pki/etcd/{{ inventory_hostname_short }}.key'

      - name: Copy the {{ inventory_hostname_short }}.crt certificate to the /etc/kubernetes/pki/etcd directory
        copy:
          src: '{{ pki_root }}/{{ role_name }}/{{ k8s_config.cluster_name }}/{{ inventory_hostname_short }}.crt'
          dest: '/etc/kubernetes/pki/etcd/{{ inventory_hostname_short }}.crt'

      when: k8s_config.etcd_topology == 'external'

    - command:
        cmd: hostname -i
      register: hostname_i_result

    - set_fact:
        k8s_apiserver_advertise_address: '{{ hostname_i_result.stdout_lines[0] }}'

    - name: Create the Kubernetes API server encryption configuration
      block:
      - name: Generate the Kubernetes API server encryption key
        shell:
          cmd: head -c 32 /dev/urandom | base64
        register: generate_kube_apiserver_encryption_key_result

      - set_fact:
          kube_apiserver_encryption_key: '{{ generate_kube_apiserver_encryption_key_result.stdout }}'

      - template:
          src: k8s-apiserver-encryption.yaml.j2
          dest: /etc/kubernetes/apiserver/encryption.yaml

      - name: Set the permissions for the /etc/kubernetes/apiserver/encryption.yaml file
        file:
          path: /etc/kubernetes/apiserver/encryption.yaml
          owner: root
          group: root
          mode: 0600
          state: file

    - name: Create the Kubernetes scheduler configuration
      block:
      - name: Create the scheduler-config.yaml configuration file under the /etc/kubernetes/scheduler directory
        template:
          src: scheduler-config.yaml.j2
          dest: /etc/kubernetes/scheduler/scheduler-config.yaml

      - name: Create the scheduler-policy.cfg configuration file under the /etc/kubernetes/scheduler directory
        template:
          src: scheduler-policy.cfg.j2
          dest: /etc/kubernetes/scheduler/scheduler-policy.cfg

    - name: Create the Kubernetes cluster configuration
      template:
        src: k8s-config.yaml.j2
        dest: /var/tmp/ansible/k8s-config.yaml

    - name: Initialize the Kubernetes cluster
      shell:
        cmd: /usr/bin/kubeadm init --config /var/tmp/ansible/k8s-config.yaml

    - name: Copy the Kubernetes configuration to the root user
      block:
      - name: Create the /root/.kube directory
        file:
          path: /root/.kube
          owner: root
          group: root
          mode: 0700
          state: directory

      - name: Copy the /etc/kubernetes/admin.conf file to the /root/.kube directory
        command:
          cmd: cp /etc/kubernetes/admin.conf /root/.kube/config

      - name: Set the permissions for the /root/.kube/config file
        file:
          path: /root/.kube/config
          owner: root
          group: root
          mode: 0600
          state: file

    - name: Copy the Kubernetes configuration to the k8s-admin user
      block:
      - name: Create the /home/k8s-admin/.kube directory
        file:
          path: /home/k8s-admin/.kube
          owner: k8s-admin
          group: k8s-admin
          mode: 0750
          state: directory

      - name: Copy the /etc/kubernetes/admin.conf file to the /home/k8s-admin/.kube directory
        command:
          cmd: cp /etc/kubernetes/admin.conf /home/k8s-admin/.kube/config

      - name: Set the permissions for the /home/k8s-admin/.kube/config file
        file:
          path: /home/k8s-admin/.kube/config
          owner: k8s-admin
          group: k8s-admin
          mode: 0640
          state: file

    - name: Setup the kubeshell script
      block:
      - name: Create the kubeshell script
        template:
          src: kubeshell.j2
          dest: /usr/bin/kubeshell

      - name: Set the permissions for the kubeshell script
        file:
          path: /usr/bin/kubeshell
          owner: root
          group: root
          mode: 0750
          state: file

    - name: Allows pods to scheduled on the master if there are no worker nodes
      shell:
        cmd: /usr/bin/kubectl taint node `hostname` node-role.kubernetes.io/master:NoSchedule-
      when: ('k8s_worker' not in groups.keys())

    - name: Create the Prometheus service account
      block:
      - template:
          src: prometheus-service-account.yaml.j2
          dest: /var/tmp/ansible/prometheus-service-account.yaml

      - shell:
          cmd: /usr/bin/kubectl apply -f /var/tmp/ansible/prometheus-service-account.yaml

    when: (kubelet_config_stat_result.stat.exists == False)

  - name: Check whether a CNI provider has been configured
    stat:
      path: /etc/cni
    register: etc_cni_stat_result

  - name: Configure the Weave CNI provider
    block:
    - name: Initialize the Weave CNI provider
      shell:
        cmd: /usr/bin/kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(/usr/bin/kubectl version | base64 | tr -d '\n')&env.IPALLOC_RANGE={{k8s_config.pod_subnet}}"

    - name: Download the Weave script
      get_url:
        url: https://git.io/weave
        dest: /usr/bin/weave
      register: download_weave_script_result
      until: download_weave_script_result is succeeded
      retries: 3
      delay: 10

    - name: Set the permissions for the /usr/bin/weave file
      file:
        path: /usr/bin/weave
        owner: root
        group: root
        mode: 0770
        state: file

    - name: Sleep for 15 seconds to allow the Weave CNI provider to initialize
      wait_for:
        timeout: 15

    when: ((etc_cni_stat_result.stat.exists == False) and (k8s_config.cni_provider == 'weave'))

  - name: Wait for Kubernetes node initialization to complete
    command:
      cmd: /usr/bin/kubectl wait --namespace=kube-system --for=condition=Ready pods --all --timeout=600s

  when: (groups['k8s_master'][0] == inventory_hostname)


#  _  _____ ____       _    ____  ____ ___ _____ ___ ___  _   _    _    _       __  __    _    ____ _____ _____ ____
# | |/ ( _ ) ___|     / \  |  _ \|  _ \_ _|_   _|_ _/ _ \| \ | |  / \  | |     |  \/  |  / \  / ___|_   _| ____|  _ \
# | ' // _ \___ \    / _ \ | | | | | | | |  | |  | | | | |  \| | / _ \ | |     | |\/| | / _ \ \___ \ | | |  _| | |_) |
# | . \ (_) |__) |  / ___ \| |_| | |_| | |  | |  | | |_| | |\  |/ ___ \| |___  | |  | |/ ___ \ ___) || | | |___|  _ <
# |_|\_\___/____/  /_/   \_\____/|____/___| |_| |___\___/|_| \_/_/   \_\_____| |_|  |_/_/   \_\____/ |_| |_____|_| \_\
#
- name: Initialize an additional master node in the Kubernetes cluster
  block:
  - name: Check whether the kubelet service has been configured
    stat:
      path: /var/lib/kubelet/config.yaml
    register: kubelet_config_stat_result

  - name: Initializing the additional master node in the Kubernetes cluster
    block:
    - name: Fetch the /etc/kubernetes/scheduler/scheduler-config.yaml file from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/scheduler/scheduler-config.yaml
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/scheduler/scheduler-config.yaml to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/scheduler/scheduler-config.yaml
        dest: /etc/kubernetes/scheduler/scheduler-config.yaml

    - name: Fetch the /etc/kubernetes/scheduler/scheduler-policy.cfg file from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/scheduler/scheduler-policy.cfg
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/scheduler/scheduler-policy.cfg to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/scheduler/scheduler-policy.cfg
        dest: /etc/kubernetes/scheduler/scheduler-policy.cfg

    - name: Fetch the /etc/kubernetes/apiserver/encryption.yaml file from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/apiserver/encryption.yaml
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/apiserver/encryption.yaml to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/apiserver/encryption.yaml
        dest: /etc/kubernetes/apiserver/encryption.yaml

    - name: Set the permissions for the /etc/kubernetes/apiserver/encryption.yaml file
      file:
        path: /etc/kubernetes/apiserver/encryption.yaml
        owner: root
        group: root
        mode: 0600
        state: file

    - name: Remove the local copy of the encryption.yaml file
      become: no
      local_action: file path=fetched_files/{{ inventory_hostname }}/etc/kubernetes/apiserver/encryption.yaml state=absent

    - name: Fetch the /etc/kubernetes/pki/sa.key from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/sa.key
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/sa.key to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/sa.key
        dest: /etc/kubernetes/pki/sa.key

    - name: Fetch the /etc/kubernetes/pki/sa.pub from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/sa.pub
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/sa.pub to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/sa.pub
        dest: /etc/kubernetes/pki/sa.pub

    - name: Fetch the /etc/kubernetes/pki/front-proxy-ca.key from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/front-proxy-ca.key
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/front-proxy-ca.key to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/front-proxy-ca.key
        dest: /etc/kubernetes/pki/front-proxy-ca.key

    - name: Fetch the /etc/kubernetes/pki/front-proxy-ca.crt from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/front-proxy-ca.crt
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/front-proxy-ca.crt to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/front-proxy-ca.crt
        dest: /etc/kubernetes/pki/front-proxy-ca.crt

    - name: Fetch the /etc/kubernetes/pki/etcd/ca.key from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/etcd/ca.key
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/etcd/ca.key to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/etcd/ca.key
        dest: /etc/kubernetes/pki/etcd/ca.key

    - name: Fetch the /etc/kubernetes/pki/etcd/ca.crt from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/etcd/ca.crt
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/etcd/ca.crt to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/etcd/ca.crt
        dest: /etc/kubernetes/pki/etcd/ca.crt

    - command:
        cmd: hostname -i
      register: hostname_i_result

    - set_fact:
        k8s_apiserver_advertise_address: '{{ hostname_i_result.stdout_lines[0] }}'

    - name: Retrieve the Kubernetes join command from the first master
      command:
        cmd: /usr/bin/kubeadm token create --print-join-command
      register: kubeadm_join_command_result
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Save the Kubernetes join command
      set_fact:
        kubeadm_join_command: '{{ kubeadm_join_command_result.stdout_lines[0] }}'

    - name: Execute the command to Join the additional master to the Kubernetes cluster
      command:
        cmd: '{{ kubeadm_join_command }} --control-plane --apiserver-advertise-address={{ k8s_apiserver_advertise_address }}'

    - name: Wait for Kubernetes node initialization to complete
      command:
        cmd: /usr/bin/kubectl wait --namespace=kube-system --for=condition=Ready pods --all --timeout=600s
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the Kubernetes configuration to the root user
      block:
      - name: Create the /root/.kube directory
        file:
          path: /root/.kube
          owner: root
          group: root
          mode: 0750
          state: directory

      - name: Copy the /etc/kubernetes/admin.conf file to the /root/.kube directory
        command:
          cmd: cp /etc/kubernetes/admin.conf /root/.kube/config

      - name: Set the permissions for the /root/.kube/config file
        file:
          path: /root/.kube/config
          owner: k8s-admin
          group: k8s-admin
          mode: 0640
          state: file

    - name: Copy the Kubernetes configuration to the k8s-admin user
      block:
      - name: Create the /home/k8s-admin/.kube directory
        file:
          path: /home/k8s-admin/.kube
          owner: k8s-admin
          group: k8s-admin
          mode: 0750
          state: directory

      - name: Copy the /etc/kubernetes/admin.conf file to the /home/k8s-admin/.kube directory
        command:
          cmd: cp /etc/kubernetes/admin.conf /home/k8s-admin/.kube/config

      - name: Set the permissions for the /home/k8s-admin/.kube/config file
        file:
          path: /home/k8s-admin/.kube/config
          owner: k8s-admin
          group: k8s-admin
          mode: 0640
          state: file

    - name: Setup the kubeshell script
      block:
      - name: Create the kubeshell script
        template:
          src: kubeshell.j2
          dest: /usr/bin/kubeshell

      - name: Set the permissions for the kubeshell script
        file:
          path: /usr/bin/kubeshell
          owner: root
          group: root
          mode: 0770
          state: file

    - name: Allows pods to scheduled on the master if there are no worker nodes
      command:
        cmd: /usr/bin/kubectl taint node {{ inventory_hostname_short }} node-role.kubernetes.io/master:NoSchedule-
      when: ('k8s_worker' not in groups.keys())

    when: kubelet_config_stat_result.stat.exists == False

  when: (groups['k8s_master'][0] != inventory_hostname)

- name: Ensure the kubelet service is enabled and started
  systemd:
    name: kubelet.service
    enabled: yes
    state: started


#  ____  _____    _    _     _____ ____    ____  _____ ____ ____  _____ _____ ____
# / ___|| ____|  / \  | |   | ____|  _ \  / ___|| ____/ ___|  _ \| ____|_   _/ ___|
# \___ \|  _|   / _ \ | |   |  _| | | | | \___ \|  _|| |   | |_) |  _|   | | \___ \
#  ___) | |___ / ___ \| |___| |___| |_| |  ___) | |__| |___|  _ <| |___  | |  ___) |
# |____/|_____/_/   \_\_____|_____|____/  |____/|_____\____|_| \_\_____| |_| |____/
#
- name: Install the Bitnami Labs Sealed Secrets Extension
  block:
  - debug:
      msg: Check whether the kubeseal {{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }} package has been installed

  - stat:
      path: /usr/bin/kubeseal
    register: kubeseal_installed_stat_result

  - shell:
      cmd: /usr/bin/kubeseal --version |  awk -F ' ' {'print $3'} | cut -c2-
    register: kubeseal_installed_version_output
    when: (kubeseal_installed_stat_result.stat.exists == True)

  - set_fact:
      kubeseal_installed_version: '{{ kubeseal_installed_version_output.stdout }}'
    when: (kubeseal_installed_stat_result.stat.exists == True)

  - set_fact:
      kubeseal_installed_version: ''
    when: (kubeseal_installed_stat_result.stat.exists == False)

  - name: Install the Bitnami Labs kubeseal package
    block:
    - debug:
        msg: Install the Bitnami Labs kubeseal {{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }} package

    - name: Check whether the kubeseal {{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }} package has been downloaded
      become: no
      local_action: stat path=packages/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/kubeseal-linux-amd64-{{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }}
      register: kubeseal_package_stat_result

    - name: Download the kubeseal {{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }} package
      become: no
      local_action: get_url url='https://github.com/bitnami-labs/sealed-secrets/releases/download/v{{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }}/kubeseal-linux-amd64' dest='packages/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/kubeseal-linux-amd64-{{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }}'
      when: (kubeseal_package_stat_result.stat.exists == False)

    - name: Remove the existing kubeseal binary
      file:
        path: /usr/bin/kubeseal
        state: absent

    - name: Copy the kubeseal binary
      copy:
        src: packages/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/kubeseal-linux-amd64-{{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }}
        dest: /usr/bin

    - name: Rename the kubeseal binary
      command:
        cmd: mv /usr/bin/kubeseal-linux-amd64-{{ k8s_config.bitnami_labs_sealed_secrets_kubeseal_version }} /usr/bin/kubeseal
        creates: /usr/bin/kubeseal

    - name: Set the permissions for the kubeseal binary
      file:
        path: /usr/bin/kubeseal
        owner: root
        group: root
        mode: '0770'
        state: file

    when: (kubeseal_installed_version.startswith(k8s_config.bitnami_labs_sealed_secrets_kubeseal_version) == False)

  - name: Check if Bitnami Labs Sealed Secrets is installed
    shell:
      cmd: /usr/bin/helm -n kube-system list --filter 'sealed-secrets' --output json | jq -r '.[0].chart' | cut -s -f3- -d-
    register: sealed_secrets_installed_helm_chart_version_output

  - name: Install Bitnami Labs Sealed Secrets
    block:
    - name: Generate the Bitnami Labs Sealed Secrets Helm values
      template:
        src: sealed-secrets-values.yaml.j2
        dest: /var/tmp/ansible/sealed-secrets-values.yaml

    - name: Install Bitnami Labs Sealed Secrets using Helm
      command:
        cmd: /usr/bin/helm upgrade sealed-secrets stable/sealed-secrets --install --version={{ k8s_config.bitnami_labs_sealed_secrets_helm_chart_version }} --namespace=kube-system --values=/var/tmp/ansible/sealed-secrets-values.yaml

    when: sealed_secrets_installed_helm_chart_version_output.stdout != k8s_config.bitnami_labs_sealed_secrets_helm_chart_version

  when: ((groups['k8s_master'][0] == inventory_hostname) and (k8s_config.bitnami_labs_sealed_secrets_enabled is defined) and (k8s_config.bitnami_labs_sealed_secrets_enabled != None) and (k8s_config.bitnami_labs_sealed_secrets_enabled == true))


