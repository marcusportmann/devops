# file: roles/k8s_master/tasks/main.yaml

- include_tasks: ubuntu.yaml
  when: ansible_distribution == "Ubuntu"
  tags:
    - unbound

- include_tasks: centos.yaml
  when: ansible_distribution == "CentOS"
  tags:
    - unbound

- name: Copying the standard keys and certificates for the "{{ k8s_cluster_name }}" Kubernetes cluster
  block:
  - name: Create the /etc/kubernetes/apiserver directory
    file:
      path: /etc/kubernetes/apiserver
      state: directory
  
  - name: Create the /etc/kubernetes/scheduler directory
    file:
      path: /etc/kubernetes/scheduler
      state: directory

  - name: Create the /etc/kubernetes/pki/etcd directory
    file:
      path: /etc/kubernetes/pki/etcd
      state: directory

  - name: Copy the Kubernetes intermediate CA private key to the /etc/kubernetes/pki directory
    copy:
      src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-ca.key
      dest: /etc/kubernetes/pki/ca.key

  - name: Copy the Kubernetes intermediate CA certificate to the /etc/kubernetes/pki directory
    copy:
      src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-ca.crt
      dest: /etc/kubernetes/pki/ca.crt

- name: Initialize the first master node in the Kubernetes cluster
  block:    
  - name: Check whether the kubelet service has been configured
    stat:
      path: /var/lib/kubelet/config.yaml
    register: kubelet_config_stat_result

  - name: Initializing the first master node in the Kubernetes cluster
    block:
    - name: Copying the keys and certificates for the stacked etcd topology
      block:
      - name: Copy the Kubernetes intermediate CA private key to the /etc/kubernetes/pki/etcd directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-etcd-ca.key
          dest: /etc/kubernetes/pki/etcd/ca.key

      - name: Copy the Kubernetes intermediate CA certificate to the /etc/kubernetes/pki/etcd directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-etcd-ca.crt
          dest: /etc/kubernetes/pki/etcd/ca.crt

      when: k8s_etcd_topology == "stacked"

    - name: Copying the keys and certificates for the external etcd topology
      block:
      - name: Copy the etcd-ca.crt certificate to the /etc/kubernetes/pki/etcd directory
        copy:
          src: pki/{{ k8s_cluster_name }}/etcd-ca.crt
          dest: /etc/kubernetes/pki/etcd/ca.crt

      - name: Copy the {{ inventory_hostname_short }}-etcd-client.key private key to the /etc/kubernetes/pki/etcd directory
        copy:
          src: pki/{{ k8s_cluster_name }}/{{ inventory_hostname_short }}-etcd-client.key
          dest: /etc/kubernetes/pki/etcd/{{ inventory_hostname_short }}-etcd-client.key

      - name: Copy the {{ inventory_hostname_short }}-etcd-client.crt certificate to the /etc/kubernetes/pki/etcd directory
        copy:
          src: pki/{{ k8s_cluster_name }}/{{ inventory_hostname_short }}-etcd-client.crt
          dest: /etc/kubernetes/pki/etcd/{{ inventory_hostname_short }}-etcd-client.crt

      when: k8s_etcd_topology == "external"

    - command:
        cmd: hostname -i
      register: hostname_i_result

    - set_fact:
        k8s_apiserver_advertise_address: "{{ hostname_i_result.stdout_lines[0] }}"

    - name: Create the Kubernetes API server encryption configuration
      block:
      - name: Generate the Kubernetes API server encryption key
        shell:
          cmd: head -c 32 /dev/urandom | base64
        register: generate_kube_apiserver_encryption_key_result
        
      - set_fact:
          kube_apiserver_encryption_key: "{{ generate_kube_apiserver_encryption_key_result.stdout }}"
        
      - template:
          src: k8s-apiserver-encryption.yaml
          dest: /etc/kubernetes/apiserver/encryption.yaml
        
      - name: Set the permissions for the /etc/kubernetes/apiserver/encryption.yaml file
        file:
          path: /etc/kubernetes/apiserver/encryption.yaml
          owner: root
          group: root
          mode: 0600
          state: file
        
    - name: Create the Kubernetes scheduler configuration
      block:
      - name: Create the scheduler-config.yaml configuration file under the /etc/kubernetes/scheduler directory
        template:
          src: scheduler-config.yaml.j2
          dest: /etc/kubernetes/scheduler/scheduler-config.yaml

      - name: Create the scheduler-policy.cfg configuration file under the /etc/kubernetes/scheduler directory
        template:
          src: scheduler-policy.cfg.j2
          dest: /etc/kubernetes/scheduler/scheduler-policy.cfg
              
    - name: Create the Kubernetes cluster configuration
      template:
        src: k8s-config.yaml.j2
        dest: /tmp/k8s-config.yaml              

    - name: Initialize the Kubernetes cluster
      shell:
        cmd: /usr/bin/kubeadm init --config /tmp/k8s-config.yaml

    - name: Copy the Kubernetes configuration to the root user
      block:
      - name: Create the /root/.kube directory
        file:
          path: /root/.kube
          owner: root
          group: root
          mode: 0700
          state: directory

      - name: Copy the /etc/kubernetes/admin.conf file to the /root/.kube directory
        command:
          cmd: cp /etc/kubernetes/admin.conf /root/.kube/config

      - name: Set the permissions for the /root/.kube/config file
        file:
          path: /root/.kube/config
          owner: root
          group: root
          mode: 0600
          state: file

    - name: Copy the Kubernetes configuration to the k8s-admin user
      block:
      - name: Create the /home/k8s-admin/.kube directory
        file:
          path: /home/k8s-admin/.kube
          owner: k8s-admin
          group: k8s-admin
          mode: 0750
          state: directory

      - name: Copy the /etc/kubernetes/admin.conf file to the /home/k8s-admin/.kube directory
        command:
          cmd: cp /etc/kubernetes/admin.conf /home/k8s-admin/.kube/config

      - name: Set the permissions for the /home/k8s-admin/.kube/config file
        file:
          path: /home/k8s-admin/.kube/config
          owner: k8s-admin
          group: k8s-admin
          mode: 0640
          state: file
              
    - name: Setup the kubeshell script
      block:
      - name: Create the kubeshell script
        template:
          src: kubeshell.j2
          dest: /usr/bin/kubeshell
          
      - name: Set the permissions for the kubeshell script
        file:
          path: /usr/bin/kubeshell
          owner: root
          group: root
          mode: 0750
          state: file          

    - name: Allows pods to scheduled on the master if there are no worker nodes
      command:
        cmd: /usr/bin/kubectl taint node {{ inventory_hostname_short }} node-role.kubernetes.io/master:NoSchedule-
      when: ("k8s_worker" not in groups.keys())

    - name: Create the Prometheus service account
      block:
      - template:
          src: prometheus-service-account.yaml.j2
          dest: /tmp/prometheus-service-account.yaml

      - shell:
          cmd: /usr/bin/kubectl apply -f /tmp/prometheus-service-account.yaml

    - name: Deploy the kube-state-metrics service if there are no worker nodes
      block:
      - template:
          src: kube-state-metrics.yaml.j2
          dest: /tmp/kube-state-metrics.yaml

      - shell:
          cmd: /usr/bin/kubectl apply -f /tmp/kube-state-metrics.yaml

    when: kubelet_config_stat_result.stat.exists == False

  - name: Check whether a CNI provider has been configured
    stat:
      path: /etc/cni
    register: etc_cni_stat_result

  - name: Configure the Weave CNI provider
    block:
    - name: Initialize the Weave CNI provider
      shell:
        cmd: /usr/bin/kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(/usr/bin/kubectl version | base64 | tr -d '\n')&env.IPALLOC_RANGE={{k8s_pod_subnet}}"

    - name: Download the Weave script
      get_url:
        url: https://git.io/weave
        dest: /usr/bin/weave
      register: download_weave_script_result
      until: download_weave_script_result is succeeded
      retries: 3
      delay: 10

    - name: Set the permissions for the /usr/bin/weave file
      file:
        path: /usr/bin/weave
        owner: root
        group: root
        mode: 0770
        state: file

    when: ((etc_cni_stat_result.stat.exists == False) and (k8s_cni_provider == 'weave'))

  - name: Sleep for 15 seconds to allow the Weave CNI provider to initialize
    wait_for:
      timeout: 15

  - name: Wait for Kubernetes node initialization to complete
    command:
      cmd: /usr/bin/kubectl wait --namespace=kube-system --for=condition=Ready pods --all --timeout=600s

  when: groups['k8s_master'][0] == inventory_hostname

- name: Initialize an additional master node in the Kubernetes cluster
  block:
  - name: Check whether the kubelet service has been configured
    stat:
      path: /var/lib/kubelet/config.yaml
    register: kubelet_config_stat_result

  - name: Initializing the additional master node in the Kubernetes cluster
    block:
    - name: Fetch the /etc/kubernetes/pki/sa.key from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/sa.key
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/sa.key to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/sa.key
        dest: /etc/kubernetes/pki/sa.key

    - name: Fetch the /etc/kubernetes/pki/sa.pub from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/sa.pub
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/sa.pub to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/sa.pub
        dest: /etc/kubernetes/pki/sa.pub

    - name: Fetch the /etc/kubernetes/pki/front-proxy-ca.key from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/front-proxy-ca.key
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/front-proxy-ca.key to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/front-proxy-ca.key
        dest: /etc/kubernetes/pki/front-proxy-ca.key

    - name: Fetch the /etc/kubernetes/pki/front-proxy-ca.crt from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/front-proxy-ca.crt
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/front-proxy-ca.crt to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/front-proxy-ca.crt
        dest: /etc/kubernetes/pki/front-proxy-ca.crt

    - name: Fetch the /etc/kubernetes/pki/etcd/ca.key from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/etcd/ca.key
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/etcd/ca.key to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/etcd/ca.key
        dest: /etc/kubernetes/pki/etcd/ca.key

    - name: Fetch the /etc/kubernetes/pki/etcd/ca.crt from the first master node in the Kubernetes cluster
      fetch:
        src: /etc/kubernetes/pki/etcd/ca.crt
        dest: fetched_files
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Copy the /etc/kubernetes/pki/etcd/ca.crt to the additional master
      copy:
        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/etcd/ca.crt
        dest: /etc/kubernetes/pki/etcd/ca.crt

    - command:
        cmd: hostname -i
      register: hostname_i_result

    - set_fact:
        k8s_apiserver_advertise_address: "{{ hostname_i_result.stdout_lines[0] }}"

    - name: Retrieve the Kubernetes join command from the first master
      command:
        cmd: /usr/bin/kubeadm token create --print-join-command
      register: kubeadm_join_command_result
      delegate_to: "{{ groups['k8s_master'][0] }}"

    - name: Save the Kubernetes join command
      set_fact:
        kubeadm_join_command: "{{ kubeadm_join_command_result.stdout_lines[0] }}"

    - name: Execute the command to Join the additional master to the Kubernetes cluster
      command:
        cmd: "{{ kubeadm_join_command }} --control-plane --apiserver-advertise-address={{ k8s_apiserver_advertise_address }}"

    - name: Copy the Kubernetes configuration to the root user
      block:
      - name: Create the /root/.kube directory
        file:
          path: /root/.kube
          owner: root
          group: root
          mode: 0750
          state: directory

      - name: Copy the /etc/kubernetes/admin.conf file to the /root/.kube directory
        command:
          cmd: cp /etc/kubernetes/admin.conf /root/.kube/config

      - name: Set the permissions for the /root/.kube/config file
        file:
          path: /root/.kube/config
          owner: k8s-admin
          group: k8s-admin
          mode: 0640
          state: file

    - name: Copy the Kubernetes configuration to the k8s-admin user
      block:
      - name: Create the /home/k8s-admin/.kube directory
        file:
          path: /home/k8s-admin/.kube
          owner: k8s-admin
          group: k8s-admin
          mode: 0750
          state: directory

      - name: Copy the /etc/kubernetes/admin.conf file to the /home/k8s-admin/.kube directory
        command:
          cmd: cp /etc/kubernetes/admin.conf /home/k8s-admin/.kube/config

      - name: Set the permissions for the /home/k8s-admin/.kube/config file
        file:
          path: /home/k8s-admin/.kube/config
          owner: k8s-admin
          group: k8s-admin
          mode: 0640
          state: file

    - name: Setup the kubeshell script
      block:
      - name: Create the kubeshell script
        template:
          src: kubeshell.j2
          dest: /usr/bin/kubeshell
          
      - name: Set the permissions for the kubeshell script
        file:
          path: /usr/bin/kubeshell
          owner: root
          group: root
          mode: 0770
          state: file

    - name: Allows pods to scheduled on the master if there are no worker nodes
      command:
        cmd: /usr/bin/kubectl taint node {{ inventory_hostname_short }} node-role.kubernetes.io/master:NoSchedule-
      when: ("k8s_worker" not in groups.keys())

    when: kubelet_config_stat_result.stat.exists == False

  when: groups['k8s_master'][0] != inventory_hostname

- name: Install Helm
  block:
  - debug:
      msg: Check whether the helm {{ helm_version }} package has been installed

  - stat:
      path: /usr/bin/helm
    register: helm_installed_stat_result

  - shell:
      cmd: /usr/bin/helm version --short | head -1 | awk -F '+' {'print $1'} | cut -c2-
    register: helm_installed_version_output
    when: (helm_installed_stat_result.stat.exists == True)

  - set_fact:
      helm_installed_version: '{{ helm_installed_version_output.stdout }}'
    when: (helm_installed_stat_result.stat.exists == True)

  - set_fact:
      helm_installed_version: ''
    when: (helm_installed_stat_result.stat.exists == False)

  - block:
    - debug:
        msg: Install the helm {{ helm_version }} package

    - name: Check whether the helm {{ helm_version }} package has been downloaded
      become: no
      local_action: stat path=packages/helm-v{{ helm_version }}-linux-amd64.tar.gz
      register: helm_package_stat_result  

    - name: Download the helm {{ helm_version }} package
      become: no
      local_action: get_url url='https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz' dest='packages/helm-v{{ helm_version }}-linux-amd64.tar.gz' checksum={{ helm_package_checksum }}
      when: (helm_package_stat_result.stat.exists == False)

    - name: Remove the existing helm binary
      file:
        path: /usr/bin/helm
        state: absent

    - name: Extract the helm binary from the helm {{ helm_version }} package
      unarchive:
        src: packages/helm-v{{ helm_version }}-linux-amd64.tar.gz
        dest: /usr/bin
        extra_opts:
        - --strip-components=1
        - linux-amd64/helm
        creates: /usr/bin/helm

    when: (helm_installed_version != helm_version)

- name: Install istioctl
  block:
  - debug:
      msg: Check whether the istioctl {{ istioctl_version }} package has been installed

  - stat:
      path: /usr/bin/istioctl
    register: istioctl_installed_stat_result

  - shell:
      cmd: /usr/bin/istioctl version --remote=false
    register: istioctl_installed_version_output
    when: (istioctl_installed_stat_result.stat.exists == True)

  - set_fact:
      istioctl_installed_version: '{{ istioctl_installed_version_output.stdout }}'
    when: (istioctl_installed_stat_result.stat.exists == True)

  - set_fact:
      istioctl_installed_version: ''
    when: (istioctl_installed_stat_result.stat.exists == False)

  - block:
    - debug:
        msg: Install the istioctl {{ istioctl_version }} package
        
    - name: Check whether the istioctl {{ istioctl_version }} package has been downloaded
      become: no
      local_action: stat path=packages/istioctl-{{ istioctl_version }}-linux.tar.gz
      register: istioctl_package_stat_result  

    - name: Download the istioctl {{ istioctl_version }} package
      become: no
      local_action: get_url url='https://github.com/istio/istio/releases/download/{{ istioctl_version }}/istioctl-{{ istioctl_version }}-linux.tar.gz' dest='packages/istioctl-{{ istioctl_version }}-linux.tar.gz' checksum={{ istioctl_package_checksum }}
      when: (istioctl_package_stat_result.stat.exists == False)

    - name: Remove the existing istioctl binary
      file:
        path: /usr/bin/istioctl
        state: absent

    - name: Extract the istioctl binary from the istioctl {{ istioctl_version }} package
      unarchive:
        src: packages/istioctl-{{ istioctl_version }}-linux.tar.gz
        dest: /usr/bin
        creates: /usr/bin/istioctl

    when: (istioctl_installed_version != istioctl_version)

  when: ((istio_enabled is defined) and (istio_enabled != None) and (istio_enabled == true))

- name: Initialize the Istio service mesh
  block:
  - name: Download and extract the Istio package if required
    block:
    - name: Check whether the istio {{ istio_version }} package has been downloaded
      become: no
      local_action: stat path=packages/istio-{{ istio_version }}-linux.tar.gz
      register: istio_package_stat_result  

    - name: Download the istio {{ istio_version }} package
      become: no
      local_action: get_url url='https://github.com/istio/istio/releases/download/{{ istio_version }}/istio-{{ istio_version }}-linux.tar.gz' dest='packages/istio-{{ istio_version }}-linux.tar.gz' checksum={{ istio_package_checksum }}
      when: (istio_package_stat_result.stat.exists == False)

    - name: Extract the istio {{ istio_version }} package
      unarchive:
        src: packages/istio-{{ istio_version }}-linux.tar.gz
        dest: /tmp
        creates: /tmp/istio-{{ istio_version }}
  
  - name: Check if istio-system namespace exists
    shell:
      cmd: /usr/bin/kubectl get ns | awk  {'print $1'} | grep istio-system | wc -l
    register: istio_system_namespace_exists_output

  - name: Install and configure the Istio service mesh
    block:
    - name: Copying the keys and certificates for the Istio service mesh
      block:
      - name: Create the /tmp/istio-pki directory
        file:
          path: /tmp/istio-pki
          state: directory

      - name: Copy the Istio intermediate CA private key to the /tmp/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ca.key
          dest: /tmp/istio-pki/ca-key.pem

      - name: Copy the Istio intermediate CA certificate to the /tmp/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ca.crt
          dest: /tmp/istio-pki/ca-cert.pem

      - name: Copy the Root CA certificate to the /tmp/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/ca.crt
          dest: /tmp/istio-pki/root-cert.pem

      - name: Copy the Istio intermediate CA certificate chain to the /tmp/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ca-chain.crt
          dest: /tmp/istio-pki/cert-chain.pem

      - name: Copy the Istio ingress gateway private key to the /tmp/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ingressgateway.key
          dest: /tmp/istio-pki/ingressgateway-key.pem

      - name: Copy the Istio ingress gateway certificate to the /tmp/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-ingressgateway.crt
          dest: /tmp/istio-pki/ingressgateway-cert.pem

      - name: Copy the Istio telemetry gateway private key to the /tmp/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-telemetry-gateway.key
          dest: /tmp/istio-pki/telemetry-gateway-key.pem

      - name: Copy the Istio telemetry gateway certificate to the /tmp/istio-pki directory
        copy:
          src: pki/{{ k8s_cluster_name }}/k8s-{{ k8s_cluster_name }}-istio-telemetry-gateway.crt
          dest: /tmp/istio-pki/telemetry-gateway-cert.pem

    - name: Create the istio-system namespace
      command:
        cmd: /usr/bin/kubectl create ns istio-system

    - name: Create the secret in the istio-system namespace for the Istio intermediate CA private key and certificates
      command:
        cmd: /usr/bin/kubectl create -n istio-system secret generic cacerts  --from-file=/tmp/istio-pki/ca-cert.pem --from-file=/tmp/istio-pki/ca-key.pem --from-file=/tmp/istio-pki/root-cert.pem --from-file=/tmp/istio-pki/cert-chain.pem

    - name: Create the secret in the istio-system namespace for the Istio ingress gateway private key and certificate
      command:
        cmd: /usr/bin/kubectl create -n istio-system secret tls istio-ingressgateway-certs --key=/tmp/istio-pki/ingressgateway-key.pem --cert=/tmp/istio-pki/ingressgateway-cert.pem

    - name: Create the secret in the istio-system namespace for the Istio ingress gateway CA certificate
      command:
        cmd: /usr/bin/kubectl create -n istio-system secret generic istio-ingressgateway-ca-certs --from-file=/tmp/istio-pki/root-cert.pem

    - name: Create the secret in the istio-system namespace for the Istio telemetry gateway private key and certificate
      command:
        cmd: /usr/bin/kubectl create -n istio-system secret tls telemetry-gateway-cert --key=/tmp/istio-pki/telemetry-gateway-key.pem --cert=/tmp/istio-pki/telemetry-gateway-cert.pem

    - name: Create the secret in the istio-system namespace for the Istio telemetry gateway CA certificate
      command:
        cmd: /usr/bin/kubectl create -n istio-system secret generic telemetry-gateway-cert-cacert --from-file=/tmp/istio-pki/root-cert.pem

    - name: Initialize the Kiali secret
      block:
      - template:
          src: kiali-secret.yaml.j2
          dest: /tmp/kiali-secret.yaml

      - name: Create the Kiali secret
        command:
          cmd: /usr/bin/kubectl apply -f /tmp/kiali-secret.yaml

      when: ((istio_kiali_enabled is defined) and (istio_kiali_enabled != None) and (istio_kiali_enabled == true))

    - name: Create the Istio configuration file
      template:
        src: istio-config.yaml.j2
        dest: /tmp/istio-config.yaml

    - name: Initialize the Istio service mesh
      shell:
        cmd: /usr/bin/istioctl manifest apply -f /tmp/istio-config.yaml

    - name: Wait for the Istio service mesh initialization to complete
      command:
        cmd: /usr/bin/kubectl wait --namespace=istio-system --for=condition=Ready pods --all --timeout=900s
      when: ("k8s_worker" not in groups.keys())

    - block:
      - template:
          src: jaeger-ingress.yaml.j2
          dest: /tmp/jaeger-ingress.yaml

      - name: Enable ingress for Jaeger
        command:
          cmd: /usr/bin/kubectl apply -f /tmp/jaeger-ingress.yaml

      when: ((istio_tracing_enabled is defined) and (istio_tracing_enabled != None) and (istio_tracing_enabled == true))

    - block:
      - template:
          src: kiali-ingress.yaml.j2
          dest: /tmp/kiali-ingress.yaml

      - name: Enable ingress for Kiali
        command:
          cmd: /usr/bin/kubectl apply -f /tmp/kiali-ingress.yaml

      when: ((istio_kiali_enabled is defined) and (istio_kiali_enabled != None) and (istio_kiali_enabled == true))

    - block:
      - template:
          src: grafana-ingress.yaml.j2
          dest: /tmp/grafana-ingress.yaml

      - name: Enable ingress for Grafana
        command:
          cmd: /usr/bin/kubectl apply -f /tmp/grafana-ingress.yaml

      when: ((istio_grafana_enabled is defined) and (istio_grafana_enabled != None) and (istio_grafana_enabled == true))

    - block:
      - template:
          src: prometheus-ingress.yaml.j2
          dest: /tmp/prometheus-ingress.yaml

      - name: Enable ingress for Prometheus
        command:
          cmd: /usr/bin/kubectl apply -f /tmp/prometheus-ingress.yaml

      when: ((istio_prometheus_enabled is defined) and (istio_prometheus_enabled != None) and (istio_prometheus_enabled == true))

    when: istio_system_namespace_exists_output.stdout == "0"

  when: ((groups['k8s_master'][0] == inventory_hostname) and (istio_enabled is defined) and (istio_enabled != None) and (istio_enabled == true))

- name: Install Longhorn if it is enabled
  block:

  - name: Check if longhorn-system namespace exists
    shell:
      cmd: /usr/bin/kubectl get ns | awk  {'print $1'} | grep longhorn-system | wc -l
    register: longhorn_system_namespace_exists_output

  - block:
    - template:
        src: longhorn.yaml.j2
        dest: /tmp/longhorn.yaml

    - name: Apply the Longhorn configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/longhorn.yaml
  
    when: longhorn_system_namespace_exists_output.stdout == "0"

  when: ((longhorn_enabled is defined) and (longhorn_enabled != None) and (longhorn_enabled == true))

- name: Install the Operator Lifecycle Manager if it is enabled
  block:
  
  - name: Check if Operator Lifecycle Manager (olm) namespace exists
    shell:
      cmd: /usr/bin/kubectl get ns | awk  {'print $1'} | grep olm | wc -l
    register: operator_lifecycle_manager_namespace_exists_output
  
  - block:
    - name: Retrieve the Operator Lifecycle Manager Custom Resource Definitions configuration
      get_url:
        url: https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/release-4.6/deploy/upstream/quickstart/crds.yaml
        dest: /tmp/operator-lifecycle-manager-crds.yaml
      register: get_operator_lifecycle_manager_crds_result
      until: get_operator_lifecycle_manager_crds_result is succeeded
      retries: 3
      delay: 10      
    
    - name: Apply the Operator Lifecycle Manager Custom Resource Definitions configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/operator-lifecycle-manager-crds.yaml

    - name: Sleep for 15 seconds to allow the Operator Lifecycle Manager Custom Resource Definitions configuration to be applied
      wait_for:
        timeout: 15

    - name: Retrieve the Operator Lifecycle Manager configuration
      get_url:
        url: https://raw.githubusercontent.com/operator-framework/operator-lifecycle-manager/release-4.6/deploy/upstream/quickstart/olm.yaml
        dest: /tmp/operator-lifecycle-manager-olm.yaml
      register: get_operator_lifecycle_manager_configuration_result
      until: get_operator_lifecycle_manager_configuration_result is succeeded
      retries: 3
      delay: 10      
  
    - name: Apply the Operator Lifecycle Manager configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/operator-lifecycle-manager-olm.yaml
        
    when: operator_lifecycle_manager_namespace_exists_output.stdout == "0"        
 
  when: ((operator_lifecycle_manager_enabled is defined) and (operator_lifecycle_manager_enabled != None) and (operator_lifecycle_manager_enabled == true))
  
- name: Install the Postgres Operator if it is enabled
  block:
  
  - name: Check if Postgres Operator is installed
    shell:
      cmd: kubectl get subscription -n operators 2>&1 | grep postgres-operator | wc -l
    register: postgres_operator_installed_output
    
  - block:
    - name: Generate the Postgres Operator configuration
      template:
        src: postgres-operator.yaml.j2
        dest: /tmp/postgres-operator.yaml
      
    - name: Apply the Postgres Operator configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/postgres-operator.yaml
    
    when: postgres_operator_installed_output.stdout == "0"
  
  when: ((postgres_operator_enabled is defined) and (postgres_operator_enabled != None) and (postgres_operator_enabled == true))
  
- name: Install the Prometheus Operator if it is enabled
  block:
  
  - name: Check if Prometheus Operator is installed
    shell:
      cmd: kubectl get subscription -n operators 2>&1 | grep prometheus-operator | wc -l
    register: prometheus_operator_installed_output
    
  - block:  
    - name: Generate the Prometheus Operator configuration
      template:
        src: prometheus-operator.yaml.j2
        dest: /tmp/prometheus-operator.yaml
  
    - name: Apply the Prometheus Operator configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/prometheus-operator.yaml
    
    when: prometheus_operator_installed_output.stdout == "0"
  
  when: ((prometheus_operator_enabled is defined) and (prometheus_operator_enabled != None) and (prometheus_operator_enabled == true))
   
- name: Install the TopoLVM CSI plugin
  block:
  
  - name: Check if topolvm-system namespace exists
    shell:
      cmd: /usr/bin/kubectl get ns | awk  {'print $1'} | grep topolvm-system | wc -l
    register: topolvm_system_namespace_exists_output    

  - block:
  
    - set_fact:
        topolvm_mutatingwebhook_key: "{{ lookup('file', './files/pki/' + k8s_cluster_name + '/topolvm-mutatingwebhook.key') | b64encode }}"
        
    - set_fact:
        topolvm_mutatingwebhook_crt: "{{ lookup('file', './files/pki/' + k8s_cluster_name + '/topolvm-mutatingwebhook.crt') | b64encode }}"

    - set_fact:
        topolvm_mutatingwebhook_ca_bundle: "{{ lookup('file', './files/pki/' + k8s_cluster_name + '/ca-bundle.crt') | b64encode }}"
  
    - name: Generate the initial TopoLVM configuration
      template:
        src: topolvm-init.yaml.j2
        dest: /tmp/topolvm-init.yaml
        
    - name: Apply the initial TopoLVM configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/topolvm-init.yaml  
        
    - name: Disable the TopoLVM mutating webhook for the kube-system namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns kube-system topolvm.cybozu.com/webhook=ignore

    - name: Disable the TopoLVM mutating webhook for the istio-system namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns istio-system topolvm.cybozu.com/webhook=ignore
      when: ((istio_enabled is defined) and (istio_enabled != None) and (istio_enabled == true))

    - name: Disable the TopoLVM mutating webhook for the longhorn-system namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns longhorn-system topolvm.cybozu.com/webhook=ignore
      when: ((longhorn_enabled is defined) and (longhorn_enabled != None) and (longhorn_enabled == true))

    - name: Disable the TopoLVM mutating webhook for the olm namespace
      command:
        cmd: /usr/bin/kubectl label --overwrite ns olm topolvm.cybozu.com/webhook=ignore
      when: ((operator_lifecycle_manager_enabled is defined) and (operator_lifecycle_manager_enabled != None) and (operator_lifecycle_manager_enabled == true))

    - name: Generate the TopoLVM Custom Resource Definition configuration
      template:
        src: topolvm-crd.yaml.j2
        dest: /tmp/topolvm-crd.yaml
    
    - name: Apply the TopoLVM Custom Resource Definition configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/topolvm-crd.yaml

    - name: Generate the TopoLVM Pod Security Policy configuration
      template:
        src: topolvm-psp.yaml.j2
        dest: /tmp/topolvm-psp.yaml

    - name: Apply the TopoLVM Pod Security Policy configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/topolvm-psp.yaml

    - name: Generate the TopoLVM Scheduler daemonset configuration
      template:
        src: topolvm-scheduler-daemonset.yaml.j2
        dest: /tmp/topolvm-scheduler.yaml
      when: ("k8s_master" in groups.keys())
        
    - name: Generate the TopoLVM Scheduler service configuration
      template:
        src: topolvm-scheduler-service.yaml.j2
        dest: /tmp/topolvm-scheduler.yaml
      when: ("k8s_master" not in groups.keys())
        
    - name: Apply the TopoLVM Scheduler configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/topolvm-scheduler.yaml

    - name: Generate the TopoLVM Mutating Webhooks configuration
      template:
        src: topolvm-mutatingwebhooks.yaml.j2
        dest: /tmp/topolvm-mutatingwebhooks.yaml
    
    - name: Apply the TopoLVM Mutating Webhooks configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/topolvm-mutatingwebhooks.yaml

    - name: Generate the TopoLVM Controller configuration
      template:
        src: topolvm-controller.yaml.j2
        dest: /tmp/topolvm-controller.yaml
    
    - name: Apply the TopoLVM Controller configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/topolvm-controller.yaml

    - name: Generate the TopoLVM Node configuration    
      template:
        src: topolvm-node.yaml.j2
        dest: /tmp/topolvm-node.yaml
    
    - name: Apply the TopoLVM Node configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/topolvm-node.yaml
        
    - name: Generate the TopoLVM Provisioner configuration    
      template:
        src: topolvm-provisioner.yaml.j2
        dest: /tmp/topolvm-provisioner.yaml
    
    - name: Apply the TopoLVM Provisioner configuration to Kubernetes
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/topolvm-provisioner.yaml
        
    when: topolvm_system_namespace_exists_output.stdout == "0"        

  when: ((topolvm_enabled is defined) and (topolvm_enabled != None) and (topolvm_enabled == true))

- name: Install the Bitnami Labs Sealed Secrets Extension
  block:
  - debug:
      msg: Check whether the kubeseal {{ helm_version }} package has been installed

  - stat:
      path: /usr/bin/kubeseal
    register: kubeseal_installed_stat_result

  - shell:
      cmd: /usr/bin/kubeseal --version |  awk -F ' ' {'print $3'} | cut -c2-
    register: kubeseal_installed_version_output
    when: (kubeseal_installed_stat_result.stat.exists == True)

  - set_fact:
      kubeseal_installed_version: '{{ kubeseal_installed_version_output.stdout }}'
    when: (kubeseal_installed_stat_result.stat.exists == True)

  - set_fact:
      kubeseal_installed_version: ''
    when: (kubeseal_installed_stat_result.stat.exists == False)

  - name: Install the Bitnami Labs kubeseal package
    block:
    - debug:
        msg: Install the Bitnami Labs kubeseal {{ bitnami_labs_sealed_secrets_version }} package

    - name: Check whether the kubeseal {{ bitnami_labs_sealed_secrets_version }} package has been downloaded
      become: no
      local_action: stat path=packages/kubeseal-linux-amd64-{{ bitnami_labs_sealed_secrets_version }}
      register: helm_package_stat_result  

    - name: Download the kubeseal {{ bitnami_labs_sealed_secrets_version }} package
      become: no
      local_action: get_url url='https://github.com/bitnami-labs/sealed-secrets/releases/download/v{{ bitnami_labs_sealed_secrets_version }}/kubeseal-linux-amd64' dest='packages/kubeseal-linux-amd64-{{ bitnami_labs_sealed_secrets_version }}'
      when: (helm_package_stat_result.stat.exists == False)

    - name: Remove the existing kubeseal binary
      file:
        path: /usr/bin/kubeseal
        state: absent

    - name: Copy the kubeseal binary
      copy:
        src: packages/kubeseal-linux-amd64-{{ bitnami_labs_sealed_secrets_version }}
        dest: /usr/bin
        
    - name: Rename the kubeseal binary
      command:
        cmd: mv /usr/bin/kubeseal-linux-amd64-{{ bitnami_labs_sealed_secrets_version }} /usr/bin/kubeseal
        creates: /usr/bin/kubeseal
        
    - name: Set the permissions for the kubeseal binary
      file:
        path: /usr/bin/kubeseal
        owner: root
        group: root
        mode: 0770
        state: file

    when: (kubeseal_installed_version != bitnami_labs_sealed_secrets_version)
    
  - shell:
      cmd: /usr/bin/kubectl -n kube-system get deployments | grep "sealed-secrets-controller" | wc -l
    register: bitnami_labs_sealed_secrets_controller_installed_output
    
  - set_fact:
      bitnami_labs_sealed_secrets_controller_installed_version: ''
    when: bitnami_labs_sealed_secrets_controller_installed_output.stdout == "0"
        
  - shell:
      cmd: /usr/bin/kubectl -n kube-system describe deployment sealed-secrets-controller | grep "Image:" | sed 's/.*:v//'
    register: bitnami_labs_sealed_secrets_controller_installed_version_output
    when: bitnami_labs_sealed_secrets_controller_installed_output.stdout == "1"

  - set_fact:
      bitnami_labs_sealed_secrets_controller_installed_version: '{{ bitnami_labs_sealed_secrets_controller_installed_version_output.stdout }}'
    when: bitnami_labs_sealed_secrets_controller_installed_output.stdout == "1"
  
  - name: Install the Bitnami Labs SealedSecret CRD and server-side controller
    block:
    - debug:
        msg: Install the Bitnami Labs SealedSecret CRD and server-side controller
        
    - name: Retrieve the Bitnami Labs SealedSecret CRD and server-side controller configuration
      get_url:
        url: https://github.com/bitnami-labs/sealed-secrets/releases/download/v{{ bitnami_labs_sealed_secrets_version }}/controller.yaml
        dest: /tmp/bitnami-labs-sealed-secret-controller-{{ bitnami_labs_sealed_secrets_version }}.yaml
      register: get_bitnami_labs_sealed_secret_controller_result
      until: get_bitnami_labs_sealed_secret_controller_result is succeeded
      retries: 3
      delay: 10      
    
    - name: Apply the Bitnami Labs SealedSecret CRD and server-side controller configuration
      command: 
        cmd: /usr/bin/kubectl apply -f /tmp/bitnami-labs-sealed-secret-controller-{{ bitnami_labs_sealed_secrets_version }}.yaml

    when: (bitnami_labs_sealed_secrets_controller_installed_version != bitnami_labs_sealed_secrets_version)
  
  when: ((bitnami_labs_sealed_secrets_enabled is defined) and (bitnami_labs_sealed_secrets_enabled != None) and (bitnami_labs_sealed_secrets_enabled == true))







# Delete the Postgres operator
# kubectl delete -f /tmp/postgres-operator.yaml 
# kubectl delete clusterserviceversion -n operators postgres-operator.v1.3.0
