---
# file: roles/postgresql/tasks/main.yaml

- import_tasks: assert.yaml
  run_once: yes
  delegate_to: localhost

- name: Create the /var/tmp/ansible/{{ role_name }} directory
  file:
    path: '/var/tmp/ansible/{{ role_name }}'
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: directory


#  ____  _____ _____   _____ _    ____ _____ ____
# / ___|| ____|_   _| |  ___/ \  / ___|_   _/ ___|
# \___ \|  _|   | |   | |_ / _ \| |     | | \___ \
#  ___) | |___  | |   |  _/ ___ \ |___  | |  ___) |
# |____/|_____| |_|   |_|/_/   \_\____| |_| |____/
#
- set_fact:
    postgresql_cluster_config: ''

- name: Finding the PostgreSQL cluster config for the host ({{ ansible_fqdn }})
  set_fact:
    postgresql_cluster_config: '{{ item.0 }}'
  when: ((item.1.hostname is defined) and (item.1.hostname != None) and (item.1.hostname == ansible_fqdn))
  loop: "{{ postgresql_config.clusters | subelements('servers') }}"
  no_log: True

- set_fact:
    postgresql_server_config: ''

- name: Finding the PostgreSQL server config for the host ({{ ansible_fqdn }})
  set_fact:
    postgresql_server_config: '{{ item.1 }}'
  when: ((item.1.hostname is defined) and (item.1.hostname != None) and (item.1.hostname == ansible_fqdn))
  loop: "{{ postgresql_config.clusters | subelements('servers') }}"
  no_log: True

- fail:
    msg: "The host {{ ansible_fqdn }} is not associated with a PostgreSQL cluster"
  when: ((postgresql_cluster_config is not defined) or (postgresql_cluster_config == None) or (postgresql_cluster_config == ''))

- debug:
    msg: 'PostgreSQL Cluster Name: {{ postgresql_cluster_config.name }}'


#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'
  tags:
  - unbound


#  ____   ___  ____ _____ ____ ____  _____ ____   ___  _
# |  _ \ / _ \/ ___|_   _/ ___|  _ \| ____/ ___| / _ \| |
# | |_) | | | \___ \ | || |  _| |_) |  _| \___ \| | | | |
# |  __/| |_| |___) || || |_| |  _ <| |___ ___) | |_| | |___
# |_|    \___/|____/ |_| \____|_| \_\_____|____/ \__\_\_____|
#
- name: Configure global settings
  lineinfile:
    dest: "{{ postgresql_config_directory }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = '{{ item.value }}'"
    state: "{{ item.state | default('present') }}"
    mode: 0644
  with_items: "{{ postgresql_config.global_config_options }}"
  notify: restart postgresql

- name: Configure server settings
  lineinfile:
    dest: "{{ postgresql_config_directory }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = '{{ item.value }}'"
    state: "{{ item.state | default('present') }}"
    mode: 0644
  with_items: "{{ postgresql_server_config.config_options }}"
  notify: restart postgresql
  when: ((postgresql_server_config.config_options is defined) and (postgresql_server_config.config_options != None))

- name: Configure host based authentication (if entries are configured)
  template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgresql_config_directory }}/pg_hba.conf"
    owner: '{{ postgresql_config.user }}'
    group: '{{ postgresql_config.group }}'
    mode: 0600
  notify: restart postgresql

- name: Ensure that the {{ postgresql_service }} service is started
  systemd:
    name: '{{ postgresql_service }}'
    state: started
    enabled: yes

- name: Ensure PostgreSQL databases are present
  postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    owner: "{{ item.owner | default(postgresql_config.user) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_cluster_config.databases }}"
  become: true
  become_user: "{{ postgresql_config.user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true

- name: Ensure PostgreSQL users are present
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    priv: "{{ item.priv | default(omit) }}"
    role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
    db: "{{ item.db | default(omit) }}"
  with_items: "{{ postgresql_cluster_config.users }}"
  no_log: "{{ postgresql_config.users_no_log }}"
  become: true
  become_user: "{{ postgresql_config.user }}"
  # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
  vars:
    ansible_ssh_pipelining: true
  environment:
    PGOPTIONS: '-c password_encryption=scram-sha-256'



