---
# file: roles/postgresql/tasks/redhat.yaml

- debug:
    msg: Applying the RedHat-specific Postgresql configuration

- set_fact:
    postgresql_config_directory: '{{ postgresql_config.data_directory_root|default("/var/lib") }}/pgsql/{{ postgresql_config.version }}/data'

- set_fact:
    postgresql_bin_directory: '/usr/pgsql-{{ postgresql_config.version }}/bin'

- set_fact:
    postgresql_default_data_directory: '/var/lib/pgsql/{{ postgresql_config.version }}/data'

- set_fact:
    postgresql_data_directory: '{{ postgresql_config.data_directory_root|default("/var/lib") }}/pgsql/{{ postgresql_config.version }}/data'

- set_fact:
    postgresql_service_override_directory: '/lib/systemd/system/postgresql-{{ postgresql_config.version }}.service.d'

- set_fact:
    postgresql_service: 'postgresql-{{ postgresql_config.version }}'

- name: Check if PGDG repo is already configured
  stat: path=/etc/yum.repos.d/pgdg-redhat-all.repo
  register: pgdg_repo_file_result

- name: Enable the PGDG YUM repo
  block:
  - name: Disable the PostgreSQL AppStream repository
    command:
      cmd: dnf -qy module disable postgresql
    when: (ansible_distribution_major_version == '8')

  - name: Install the PGDG GPG key
    rpm_key:
      state: present
      key: 'https://download.postgresql.org/pub/repos/yum/RPM-GPG-KEY-PGDG'

  - name: Check whether the pgdg-redhat-repo-latest.noarch.rpm package has been downloaded
    become: no
    local_action: stat path='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/pgdg-redhat-repo-latest.noarch.rpm'
    register: pgdg_repo_package_stat_result

  - name: Download the pgdg-redhat-repo-latest.noarch.rpm package
    become: no
    local_action: get_url url='https://download.postgresql.org/pub/repos/yum/reporpms/EL-{{ ansible_distribution_major_version }}-x86_64/pgdg-redhat-repo-latest.noarch.rpm' dest='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/pgdg-redhat-repo-latest.noarch.rpm'
    when: (pgdg_repo_package_stat_result.stat.exists == False)

  - name: Copy the pgdg-redhat-repo-latest.noarch.rpm package
    copy:
      src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/pgdg-redhat-repo-latest.noarch.rpm'
      dest: '/var/tmp/ansible/{{ role_name }}/pgdg-redhat-repo-latest.noarch.rpm'

  - name: Install the pgdg-redhat-repo-latest.noarch.rpm package
    yum:
      name: '/var/tmp/ansible/{{ role_name }}/pgdg-redhat-repo-latest.noarch.rpm'
      state: present
  when: (pgdg_repo_file_result.stat.exists == False)

- name: Collect the package facts
  package_facts:
    manager: auto

- name: Retrieve the version of the installed postgresql-server package
  debug:
    msg: Found the installed postgresql{{ postgresql_config.version }}-server package ({{ ansible_facts.packages['postgresql' + postgresql_config.version + '-server'][0].version  }})
  when: ('postgresql' + postgresql_config.version + '-server' in ansible_facts.packages)

- name: Install the PostgreSQL packages
  yum:
   name:
   - postgresql{{ postgresql_config.version }}-libs-{{ postgresql_config.redhat_package_version }}*
   - postgresql{{ postgresql_config.version }}-server-{{ postgresql_config.redhat_package_version }}*
   - postgresql{{ postgresql_config.version }}-docs-{{ postgresql_config.redhat_package_version }}*
   state: latest
  notify: restart postgresql
  # TODO: Confirm if this is necessary -- Marcus
  # Don't let postgresql-contrib cause the /usr/bin/python symlink
  # to be installed, which breaks later Ansible runs on Fedora 30,
  # and affects system behavior in multiple ways.
  # exclude: python-unversioned-command

- name: Install the python-psycopg2 library
  yum:
   name: python-psycopg2
   state: latest
  when: (ansible_distribution_major_version == '7')

- name: Install the python3-psycopg2 library
  yum:
   name: python3-psycopg2
   state: latest
  when: (ansible_distribution_major_version == '8')

- name: Apply the custom data directory configuration
  block:
  - name: Ensure that the {{ postgresql_data_directory }}  directory exists and has the correct permissions
    file:
      path: '{{ postgresql_data_directory }}'
      owner: '{{ postgresql_config.user }}'
      group: '{{ postgresql_config.group }}'
      mode: '0700'
      state: directory

  - name: Ensure that the {{ postgresql_service_override_directory }} directory exists and has the correct permissions
    file:
      path: '{{ postgresql_service_override_directory }}'
      owner: 'root'
      group: 'root'
      mode: '0755'
      state: directory

  - name: Generate the {{ postgresql_service_override_directory }}/override.conf file
    template:
      src: override.conf.j2
      dest: '{{ postgresql_service_override_directory }}/override.conf'
      owner: 'root'
      group: 'root'
      mode: '0755'
    register: override_conf_template_result

  - name: Remove the {{ postgresql_default_data_directory }} directory
    file:
      path: '{{ postgresql_default_data_directory }}'
      state: absent

  - name: Reload the systemd daemon
    systemd:
      daemon_reload: yes
    when: (override_conf_template_result.changed == True)

  when: ((postgresql_config.data_directory_root is defined) and (postgresql_config.data_directory_root != None))

- stat:
    path: '{{ postgresql_data_directory }}/postgresql.conf'
  register: postgresql_conf_stat_result

- name: Initialize the PostgreSQL database cluster
  shell:
    cmd: "sudo -u postgres {{ postgresql_bin_directory }}/initdb -D {{ postgresql_data_directory }}"
  when: (postgresql_conf_stat_result.stat.exists == False)

- name: Generate the /etc/profile.d/postgresql.sh file
  template:
    src: postgresql.sh.j2
    dest: /etc/profile.d/postgresql.sh
    owner: 'root'
    group: 'root'
    mode: '0755'

- meta: flush_handlers

- name: Allow all hosts access to tcp port 5432
  firewalld:
    port: 5432/tcp
    permanent: yes
    state: enabled
    immediate: yes




