---
# file: roles/gitea/tasks/main.yaml

- import_tasks: assert.yaml
  run_once: yes
  delegate_to: localhost


#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'
  tags:
  - unbound


#   ____ ___ _____ _____    _
#  / ___|_ _|_   _| ____|  / \
# | |  _ | |  | | |  _|   / _ \
# | |_| || |  | | | |___ / ___ \
#  \____|___| |_| |_____/_/   \_\
#
- name: Create the Gitea credentials directory
  local_action: file path="{{ credentials_root }}/gitea" state="directory"
  become: false

- name: Install Gitea
  block:
  - debug:
      msg: Check whether the Gitea {{ gitea_config.package_version }} package has been installed

  - stat:
      path: /usr/bin/gitea
    register: gitea_installed_stat_result

  - shell:
      cmd: /usr/bin/gitea --version 2>&1 | head -1 | awk {'print $3'}
    register: gitea_installed_version_output
    when: (gitea_installed_stat_result.stat.exists == True)

  - set_fact:
      gitea_installed_version: '{{ gitea_installed_version_output.stdout }}'
    when: (gitea_installed_stat_result.stat.exists == True)

  - set_fact:
      gitea_installed_version: ''
    when: (gitea_installed_stat_result.stat.exists == False)

  - block:
    - debug:
        msg: Install the Gitea {{ gitea_config.package_version }} package

    - name: Add the {{ gitea_config.group }} group
      group:
        name: '{{ gitea_config.group }}'
        gid: '{{ gitea_config.group_id }}'
        state: present

    - name: Add the {{ gitea_config.user }} user
      user:
        name: '{{ gitea_config.user }}'
        uid: '{{ gitea_config.user_id }}'
        group: '{{ gitea_config.group }}'
        comment: 'Git Version Control'
        create_home: yes
        shell: /usr/sbin/nologin
        state: present

    - name: Check whether the Gitea service exists
      stat:
        path: /lib/systemd/system/gitea.service
      register: gitea_service_stat_result

    - name: Stop the Gitea service
      systemd:
        name: gitea
        state: stopped
      when: gitea_service_stat_result.stat.exists == True
      register: gitea_service_stopped

    - name: Check whether the Gitea {{ gitea_config.package_version }} package has been downloaded
      become: no
      local_action: stat path='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/gitea-{{ gitea_config.package_version }}-linux-amd64'
      register: gitea_package_stat_result

    - name: Download the Gitea {{ gitea_config.package_version }} package
      become: no
      local_action: get_url url='https://dl.gitea.io/gitea/{{ gitea_config.package_version }}/gitea-{{ gitea_config.package_version }}-linux-amd64' dest='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/gitea-{{ gitea_config.package_version }}-linux-amd64' checksum={{ gitea_config.package_checksum }}
      when: (gitea_package_stat_result.stat.exists == False)

    - name: Remove the existing gitea binary
      file:
        path: /usr/bin/gitea
        state: absent

    - name: Copy the gitea binary
      copy:
        src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/gitea-{{ gitea_config.package_version }}-linux-amd64'
        dest: '/usr/bin/gitea'
        mode: '0755'
      notify: restart gitea

    - name: Create Gitea config directories
      file:
        path: "{{ item }}"
        state: directory
        owner: git
        group: git
        mode: '0750'
      with_items:
        - '{{ gitea_config.config_directory }}'
        - '{{ gitea_config.config_directory }}/conf'

    - name: Create Gitea data directories
      file:
        path: "{{ item }}"
        state: directory
        owner: git
        group: git
        mode: '0750'
      with_items:
        - '{{ gitea_config.data_directory }}'
        - '{{ gitea_config.data_directory }}/custom'
        - '{{ gitea_config.data_directory }}/data'
        - '{{ gitea_config.data_directory }}/log'
        - '{{ gitea_config.data_directory }}/repositories'

    when: (gitea_installed_version != gitea_config.package_version)

- name: Retrieve the JWT secret for Gitea
  block:
  - name: Check whether the JWT secret for Gitea exists
    become: no
    local_action: stat path='{{ credentials_root }}/gitea/jwt-secret'
    register: gitea_jwt_secret_stat_result

  - name: Generate and save the JWT secret for Gitea
    block:
    - command:
        cmd: /usr/bin/gitea generate secret JWT_SECRET
      register: generate_jwt_secret_result
    - local_action: copy content={{ generate_jwt_secret_result.stdout_lines[0] }} dest='{{ credentials_root }}/gitea/jwt-secret'
      become: no
    when: (gitea_jwt_secret_stat_result.stat.exists == False)

  - name: Retrieve the JWT secret for gitea
    set_fact:
      gitea_jwt_secret: "{{ lookup('file', '{{ credentials_root }}/gitea/jwt-secret') }}"

- name: Retrieve the LFS JWT secret for Gitea
  block:
  - name: Check whether the LFS JWT secret for Gitea exists
    become: no
    local_action: stat path='{{ credentials_root }}/gitea/lfs-jwt-secret'
    register: gitea_lfs_jwt_secret_stat_result

  - name: Generate and save the LFS JWT secret for Gitea
    block:
    - command:
        cmd: /usr/bin/gitea generate secret JWT_SECRET
      register: generate_lfs_jwt_secret_result
    - local_action: copy content={{ generate_lfs_jwt_secret_result.stdout_lines[0] }} dest='{{ credentials_root }}/gitea/lfs-jwt-secret'
      become: no
    when: (gitea_lfs_jwt_secret_stat_result.stat.exists == False)

  - name: Retrieve the LFS JWT secret for gitea
    set_fact:
      gitea_lfs_jwt_secret: "{{ lookup('file', '{{ credentials_root }}/gitea/lfs-jwt-secret') }}"

- name: Retrieve the secret key for Gitea
  block:
  - name: Check whether the secret key for Gitea exists
    become: no
    local_action: stat path='{{ credentials_root }}/gitea/secret-key'
    register: gitea_secret_key_stat_result

  - name: Generate and save the secret key for Gitea
    block:
    - command:
        cmd: /usr/bin/gitea generate secret SECRET_KEY
      register: generate_secret_key_result
    - local_action: copy content={{ generate_secret_key_result.stdout_lines[0] }} dest='{{ credentials_root }}/gitea/secret-key'
      become: no
    when: (gitea_secret_key_stat_result.stat.exists == False)

  - name: Retrieve the secret key for gitea
    set_fact:
      gitea_secret_key: "{{ lookup('file', '{{ credentials_root }}/gitea/secret-key') }}"

- name: Retrieve the internal token for Gitea
  block:
  - name: Check whether the internal token for Gitea exists
    become: no
    local_action: stat path='{{ credentials_root }}/gitea/internal-token'
    register: gitea_internal_token_stat_result

  - name: Generate and save the internal token for Gitea
    block:
    - command:
        cmd: /usr/bin/gitea generate secret INTERNAL_TOKEN
      register: generate_internal_token_result
    - local_action: copy content={{ generate_internal_token_result.stdout_lines[0] }} dest='{{ credentials_root }}/gitea/internal-token'
      become: no
    when: (gitea_internal_token_stat_result.stat.exists == False)

  - name: Retrieve the internal token for gitea
    set_fact:
      gitea_internal_token: "{{ lookup('file', '{{ credentials_root }}/gitea/internal-token') }}"

- name: Generate the Gitea configuration file
  template:
    src: app.ini.j2
    dest: '{{ gitea_config.config_directory }}/conf/app.ini'
    owner: '{{ gitea_config.user }}'
    group: '{{ gitea_config.group }}'
    mode: '0550'
  notify: restart gitea

- name: Generate the Gitea environment
  template:
    src: gitea-environment.j2
    dest: /etc/default/gitea
    mode: '0644'
  notify: restart gitea
  register: gitea_environment_template_result

- name: Configure the Gitea systemd unit
  template:
    src: gitea.service.j2
    dest: /lib/systemd/system/gitea.service
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: restart gitea
  register: gitea_systemd_unit_template_result

- name: Reload the Gitea service
  systemd:
    name: gitea
    daemon_reload: yes
  when: ((gitea_environment_template_result.changed == True) or (gitea_systemd_unit_template_result.changed == True))

- meta: flush_handlers


#   ____ ___ _____ _____    _         _    ____  __  __ ___ _   _   _   _ ____  _____ ____
#  / ___|_ _|_   _| ____|  / \       / \  |  _ \|  \/  |_ _| \ | | | | | / ___|| ____|  _ \
# | |  _ | |  | | |  _|   / _ \     / _ \ | | | | |\/| || ||  \| | | | | \___ \|  _| | |_) |
# | |_| || |  | | | |___ / ___ \   / ___ \| |_| | |  | || || |\  | | |_| |___) | |___|  _ <
#  \____|___| |_| |_____/_/   \_\ /_/   \_\____/|_|  |_|___|_| \_|  \___/|____/|_____|_| \_\
#
- name: Check whether the admin user exists
  block:
  - set_fact:
      gitea_admin_user_exists: False
  - shell:
      cmd: "/usr/bin/gitea --config /etc/gitea/conf/app.ini admin user list --admin | sed -En '/^[0-9]+( *){{ gitea_config.admin_username }} .*/p'"
    become: true
    become_user: "{{ gitea_config.user }}"
    register: gitea_admin_user_list_result
  - set_fact:
      gitea_admin_user_exists: True
    when: ((gitea_admin_user_list_result.stdout_lines | length) > 0)

- name: Create the admin user
  shell:
    cmd: "/usr/bin/gitea --config /etc/gitea/conf/app.ini admin user create --admin --username {{ gitea_config.admin_username }} --password {{ gitea_config.admin_password }} --email {{ gitea_config.admin_email }}"
  become: true
  become_user: "{{ gitea_config.user }}"
  when: (gitea_admin_user_exists == False)
