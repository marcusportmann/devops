---
# file: roles/gitea/tasks/main.yaml

#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'
  tags:
  - unbound


#   ____ ___ _____ _____    _
#  / ___|_ _|_   _| ____|  / \
# | |  _ | |  | | |  _|   / _ \
# | |_| || |  | | | |___ / ___ \
#  \____|___| |_| |_____/_/   \_\
#
- name: Install Gitea
  block:
  - debug:
      msg: Check whether the Gitea {{ gitea_config.package_version }} package has been installed

  - stat:
      path: /usr/bin/gitea
    register: gitea_installed_stat_result

  - shell:
      cmd: /usr/bin/gitea --version 2>&1 | head -1 | awk {'print $3'}
    register: gitea_installed_version_output
    when: (gitea_installed_stat_result.stat.exists == True)

  - set_fact:
      gitea_installed_version: '{{ gitea_installed_version_output.stdout }}'
    when: (gitea_installed_stat_result.stat.exists == True)

  - set_fact:
      gitea_installed_version: ''
    when: (gitea_installed_stat_result.stat.exists == False)

  - block:
    - debug:
        msg: Install the Gitea {{ gitea_config.package_version }} package

    - name: Add the {{ gitea_config.group }} group
      group:
        name: '{{ gitea_config.group }}'
        gid: '{{ gitea_config.group_id }}'
        state: present

    - name: Add the {{ gitea_config.user }} user
      user:
        name: '{{ gitea_config.user }}'
        uid: '{{ gitea_config.user_id }}'
        group: '{{ gitea_config.group }}'
        comment: 'Git Version Control'
        create_home: no
        shell: /usr/sbin/nologin
        state: present

    - name: Check whether the Gitea service exists
      stat:
        path: /lib/systemd/system/gitea.service
      register: gitea_service_stat_result

    - name: Stop the Gitea service
      service:
        name: gitea.service
        state: stopped
      when: gitea_service_stat_result.stat.exists == True
      register: gitea_service_stopped

    - name: Check whether the Gitea {{ gitea_config.package_version }} package has been downloaded
      become: no
      local_action: stat path='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/gitea-{{ gitea_config.package_version }}-linux-amd64'
      register: gitea_package_stat_result

    - name: Download the Gitea {{ gitea_config.package_version }} package
      become: no
      local_action: get_url url='https://dl.gitea.io/gitea/{{ gitea_config.package_version }}/gitea-{{ gitea_config.package_version }}-linux-amd64' dest='{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/gitea-{{ gitea_config.package_version }}-linux-amd64' checksum={{ gitea_config.package_checksum }}
      when: (gitea_package_stat_result.stat.exists == False)

    - name: Remove the existing gitea binary
      file:
        path: /usr/bin/gitea
        state: absent

    - name: Copy the gitea binary
      copy:
        src: '{{ packages_root }}/{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}/gitea-{{ gitea_config.package_version }}-linux-amd64'
        dest: '/usr/bin/gitea'
        mode: '0755'
      notify: restart gitea

    - name: Create the Gitea config directory ({{ gitea_config.config_directory }})
      file:
        path: '{{ gitea_config.config_directory }}'
        owner: '{{ gitea_config.user }}'
        group: '{{ gitea_config.group }}'
        mode: '0550'
        state: directory

    - name: Create Gitea data directories
      file:
        path: "{{ item }}"
        state: directory
        owner: git
        group: git
        mode: '0750'
      with_items:
        - '{{ gitea_config.data_directory }}'
        - '{{ gitea_config.data_directory }}/custom'
        - '{{ gitea_config.data_directory }}/data'
        - '{{ gitea_config.data_directory }}/log'

    when: (gitea_installed_version != gitea_config.package_version)

- name: Generate the Gitea environment
  template:
    src: gitea-environment
    dest: /etc/default/gitea
    mode: '0644'
  notify: restart gitea
  register: gitea_environment_template_result

- name: Configure the Gitea systemd unit
  template:
    src: gitea.service.j2
    dest: /lib/systemd/system/gitea.service
    owner: 'root'
    group: 'root'
    mode: '0644'
  notify: restart gitea
  register: gitea_systemd_unit_template_result

- name: Reload the Gitea service
  systemd:
    name: gitea.service
    daemon_reload: yes
  when: ((gitea_environment_template_result.changed == True) or (gitea_systemd_unit_template_result.changed == True))




#- name: Create the {{ prometheus_server_config.data_directory }} directory
#  file:
#    path: '{{ prometheus_server_config.data_directory }}'
#    owner: '{{ prometheus_server_config.user }}'
#    group: '{{ prometheus_server_config.group }}'
#    mode: '0750'
#    state: directory
#
#- name: Create the {{ prometheus_server_config.data_directory }}/metrics2 directory
#  file:
#    path: '{{ prometheus_server_config.data_directory }}/metrics2'
#    owner: '{{ prometheus_server_config.user }}'
#    group: '{{ prometheus_server_config.group }}'
#    mode: '0750'
#    state: directory
#
#- name: Generate the Prometheus configuration
#  template:
#    src: prometheus.yaml.j2
#    dest: /etc/prometheus/prometheus.yml
#    owner: '{{ prometheus_server_config.user }}'
#    group: '{{ prometheus_server_config.group }}'
#    mode: '0440'
#  register: prometheus_server_configuration_template_result
#
#
#- name: Setup the Prometheus Kubernetes monitoring configuration
#  block:
#  - name: Create the /etc/prometheus/k8s directory
#    file:
#      path: /etc/prometheus/k8s
#      owner: '{{ prometheus_server_config.user }}'
#      group: '{{ prometheus_server_config.group }}'
#      mode: '0550'
#      state: directory
#
#  - name: Copy the certificate for the Kubernetes CA to the Prometheus host
#    block:
#    - name: Fetch the /etc/kubernetes/pki/ca.crt from the first master node in the Kubernetes cluster
#      fetch:
#        src: /etc/kubernetes/pki/ca.crt
#        dest: fetched_files
#      delegate_to: "{{ groups['k8s_master'][0] }}"
#
#    - name: Copy the /etc/kubernetes/pki/ca.crt to the Prometheus host
#      copy:
#        src: fetched_files/{{ inventory_hostname }}/etc/kubernetes/pki/ca.crt
#        dest: /etc/prometheus/k8s/ca.crt
#        owner: '{{ prometheus_server_config.user }}'
#        group: '{{ prometheus_server_config.group }}'
#        mode: '0440'
#
#  - name: Save the token for the Prometheus service account
#    block:
#    - shell:
#        cmd: kubectl -n kube-system get secrets -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='prometheus')].data.token}"|base64 --decode
#      delegate_to: "{{ groups['k8s_master'][0] }}"
#      register: prometheus_service_account_secret_token_output
#
#    - set_fact:
#        prometheus_service_account_secret_token: '{{ prometheus_service_account_secret_token_output.stdout }}'
#
#    - shell:
#        cmd: echo '{{ prometheus_service_account_secret_token }}' > /etc/prometheus/k8s/token
#
#  when: ("k8s_master" in groups.keys())
#
#- name: Restart the Prometheus service
#  systemd:
#    name: prometheus.service
#    state: restarted
#    enabled: yes
#    daemon_reload: yes
#  when: ((prometheus_server_configuration_template_result.changed == True) or (prometheus_systemd_unit_template_result.changed == True))
#
#- name: Ensure that the Prometheus service is started
#  systemd:
#    name: prometheus.service
#    state: started
#    enabled: yes
#
#


