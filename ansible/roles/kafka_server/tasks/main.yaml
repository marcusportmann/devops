---
#file: roles/kafka_server/tasks/main.yaml

- set_fact:
    kafka_server_dc1_actual_hosts: "{{ kafka_server_dc1_possible_hosts | intersect(groups['kafka_server']) }}"
- set_fact:
    kafka_server_dc2_actual_hosts: "{{ kafka_server_dc2_possible_hosts | intersect(groups['kafka_server']) }}"
- set_fact:
    kafka_zookeeper_dc1_actual_hosts: "{{ kafka_zookeeper_dc1_possible_hosts | intersect(groups['kafka_zookeeper']) }}"
- set_fact:
    kafka_zookeeper_dc2_actual_hosts: "{{ kafka_zookeeper_dc2_possible_hosts | intersect(groups['kafka_zookeeper']) }}"

- debug:
    msg: 'Kafka server DC1 hosts: {{ kafka_server_dc1_actual_hosts  }}'
- debug:
    msg: 'Kafka server DC2 hosts: {{ kafka_server_dc2_actual_hosts  }}'
- debug:
    msg: 'Kafka ZooKeeper DC1 hosts: {{ kafka_zookeeper_dc1_actual_hosts  }}'
- debug:
    msg: 'Kafka ZooKeeper DC2 hosts: {{ kafka_zookeeper_dc2_actual_hosts  }}'

- debug:
    msg: "Kafka server host {{ inventory_hostname }} is in DC1"
  when: (inventory_hostname in kafka_server_dc1_actual_hosts)
- debug:
    msg: "Kafka server host {{ inventory_hostname }} is in DC2"
  when: (inventory_hostname in kafka_server_dc2_actual_hosts)


#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: centos.yaml
  when: ansible_distribution == 'CentOS'
  tags:
  - unbound


#  _  __    _    _____ _  __    _      ____  _____ ______     _______ ____
# | |/ /   / \  |  ___| |/ /   / \    / ___|| ____|  _ \ \   / / ____|  _ \
# | ' /   / _ \ | |_  | ' /   / _ \   \___ \|  _| | |_) \ \ / /|  _| | |_) |
# | . \  / ___ \|  _| | . \  / ___ \   ___) | |___|  _ < \ V / | |___|  _ <
# |_|\_\/_/   \_\_|   |_|\_\/_/   \_\ |____/|_____|_| \_\ \_/  |_____|_| \_\
#
- name: Add the kafka group
  group:
    name: kafka
    gid: '{{ kafka_group_id }}'
    state: present

- name: Add the kafka user
  user:
    name: kafka
    uid: '{{ kafka_user_id }}'
    group: kafka
    create_home: yes
    state: present

- name: Create the /var/tmp/ansible/kafka directory
  file:
    path: /var/tmp/ansible/kafka
    owner: root
    group: root
    mode: '0700'
    state: directory

- name: Create the {{ kafka_etc_directory }} directory
  file:
    path: '{{ kafka_etc_directory }}'
    owner: kafka
    group: kafka
    mode: '0550'
    state: directory

- name: Create the {{ kafka_etc_directory }}/conf directory
  file:
    path: '{{ kafka_etc_directory }}/conf'
    owner: kafka
    group: kafka
    mode: '0550'
    state: directory

- name: Setup the Kafka server keystore and Kafka CA truststore
  block:
  - name: Create the {{ kafka_etc_directory }}/pki directory
    file:
      path: '{{ kafka_etc_directory }}/pki'
      owner: kafka
      group: kafka
      mode: '0550'
      state: directory

  - name: Copy the Kafka CA certificate to the /var/tmp/ansible/kafka directory
    copy:
      src: pki/{{ kafka_cluster_name }}/ca.crt
      dest: /var/tmp/ansible/kafka/ca.crt
    register: kafka_ca_copy_result

  - name: Copy the Kafka server private key (kafka-{{ kafka_cluster_name }}-server.key) to the /var/tmp/ansible/kafka directory
    copy:
      src: pki/{{ kafka_cluster_name }}/kafka-{{ kafka_cluster_name }}-server.key
      dest: /var/tmp/ansible/kafka/kafka-{{ kafka_cluster_name }}-server.key
    register: kafka_server_private_key_copy_result

  - name: Copy the Kafka server certificate (kafka-{{ kafka_cluster_name }}-server.crt) to the /var/tmp/ansible/kafka directory
    copy:
      src: pki/{{ kafka_cluster_name }}/kafka-{{ kafka_cluster_name }}-server.crt
      dest: /var/tmp/ansible/kafka/kafka-{{ kafka_cluster_name }}-server.crt
    register: kafka_server_certificate_copy_result

  - name: Generate or retrieve the password for the Kafka server keystore
    set_fact:
      kafka_server_keystore_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/kafka-server-keystore-password chars=ascii_letters,digits length=16') }}"

  - name: Generate or retrieve the password for the Kafka truststore
    set_fact:
      kafka_ca_truststore_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/kafka-ca-truststore-password chars=ascii_letters,digits length=16') }}"

  - name: Generate the Kafka server keystore and Kafka CA truststore
    block:
    - name: Generate the Kafka server PKCS12 keystore
      openssl_pkcs12:
        action: export
        path: '{{ kafka_etc_directory }}/pki/server.p12'
        friendly_name: 'kafka-{{ kafka_cluster_name }}-server'
        privatekey_path: /var/tmp/ansible/kafka/kafka-{{ kafka_cluster_name }}-server.key
        certificate_path: /var/tmp/ansible/kafka/kafka-{{ kafka_cluster_name }}-server.crt
        passphrase: '{{ kafka_server_keystore_password }}'
        owner: kafka
        group: kafka
        mode: '0440'
        state: present

    - name: Remove the Kafka CA PKCS12 truststore if it already exists
      file:
        path: '{{ kafka_etc_directory }}/pki/ca.p12'
        state: absent

    - name: Generate the Kafka CA PKCS12 truststore
      shell:
        cmd: keytool -importcert -noprompt -trustcacerts -alias "ca" -file /var/tmp/ansible/kafka/ca.crt -keystore '{{ kafka_etc_directory }}/pki/ca.p12' -storetype PKCS12 -storepass '{{ kafka_ca_truststore_password }}'

    - name: Set the permissions for the Kafka CA PKCS12 truststore
      file:
        path: '{{ kafka_etc_directory }}/pki/ca.p12'
        owner: kafka
        group: kafka
        mode: '0440'

    when: ((kafka_ca_copy_result.changed == True) or (kafka_server_private_key_copy_result.changed == True) or (kafka_server_certificate_copy_result.changed == True))

- name: Create the {{ kafka_log_directory }} directory
  file:
    path: '{{ kafka_log_directory }}'
    owner: kafka
    group: kafka
    mode: '0750'
    state: directory

- name: Create the {{ kafka_data_directory }} directory
  file:
    path: '{{ kafka_data_directory }}'
    owner: kafka
    group: kafka
    mode: '0750'
    state: directory

- name: Create the Kafka server configuration file
  template:
    src: server.properties.j2
    dest: '{{ kafka_etc_directory }}/conf/server.properties'
    owner: kafka
    group: kafka
    mode: '0440'
  register: kafka_server_configuration_template_result

# NOTE: This is the password used to secure the connections the Kafka server makes to ZooKeeper, which is generated by the kafka-zookeeper role
- name: Generate or retrieve the password for the ZooKeeper kafka user
  set_fact:
    kafka_server_zookeeper_user_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/zookeeper-kafka-user-password chars=ascii_letters,digits length=16') }}"

# NOTE: This is the password used to secure the inter broker connections
- name: Generate or retrieve the password for the Kafka server user
  set_fact:
    kafka_server_user_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/kafka-server-user-password chars=ascii_letters,digits length=16') }}"

- name: Create the Kafka server JAAS configuration file
  template:
    src: server-jaas.conf.j2
    dest: '{{ kafka_etc_directory }}/conf/server-jaas.conf'
    owner: kafka
    group: kafka
    mode: '0440'
  register: kafka_server_jaas_configuration_template_result

- name: Configure the Kafka server service
  template:
    src: kafka.service.j2
    dest: /lib/systemd/system/kafka.service
  register: kafka_server_service_file_template_result

#- name: Enable and start the Kafka service
#  systemd:
#    name: kafka.service
#    state: started
#    enabled: yes

# NOTE: This is the password for the user that is used to secure the inter-broker connections
- name: Set the password for the Kafka server user in ZooKeeper (DC1)
  shell:
    cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_etc_directory }}/conf/server.properties --zookeeper {{ kafka_zookeeper_dc1_actual_hosts[0] }}:{{ kafka_server_zookeeper_secure_client_port }} --alter --entity-type users --entity-name {{ kafka_server_user_username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_server_user_password }}],SCRAM-SHA-512=[password={{ kafka_server_user_password }}]'
  when: (((kafka_server_dc1_actual_hosts|length) > 0) and (kafka_server_dc1_actual_hosts[((kafka_server_dc1_actual_hosts|length) - 1)] == inventory_hostname))
  register: set_password_for_kafka_server_user_in_zookeeper_dc1_result
- name: Set the password for the Kafka server user in ZooKeeper (DC2)
  shell:
    cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_etc_directory }}/conf/server.properties --zookeeper {{ kafka_zookeeper_dc2_actual_hosts[0] }}:{{ kafka_server_zookeeper_secure_client_port }} --alter --entity-type users --entity-name {{ kafka_server_user_username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_server_user_password }}],SCRAM-SHA-512=[password={{ kafka_server_user_password }}]'
  when: (((kafka_server_dc2_actual_hosts|length) > 0) and (kafka_server_dc2_actual_hosts[((kafka_server_dc2_actual_hosts|length) - 1)] == inventory_hostname))
  register: set_password_for_kafka_server_user_in_zookeeper_dc2_result

- name: Setup the Kafka admin user
  block:
  - name: Generate or retrieve the password for the Kafka admin keystore
    set_fact:
      kafka_admin_keystore_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/kafka-admin-keystore-password chars=ascii_letters,digits length=16') }}"

  - name: Copy the Kafka admin private key (kafka-{{ kafka_cluster_name }}-admin.key) to the /var/tmp/ansible/kafka directory
    copy:
      src: pki/{{ kafka_cluster_name }}/kafka-{{ kafka_cluster_name }}-admin.key
      dest: /var/tmp/ansible/kafka/kafka-{{ kafka_cluster_name }}-admin.key

  - name: Copy the Kafka admin certificate (kafka-{{ kafka_cluster_name }}-admin.crt) to the /var/tmp/ansible/kafka directory
    copy:
      src: pki/{{ kafka_cluster_name }}/kafka-{{ kafka_cluster_name }}-admin.crt
      dest: /var/tmp/ansible/kafka/kafka-{{ kafka_cluster_name }}-admin.crt

  - name: Generate the Kafka admin PKCS12 keystore
    openssl_pkcs12:
      action: export
      path: '{{ kafka_etc_directory }}/pki/admin.p12'
      friendly_name: 'kafka-{{ kafka_cluster_name }}-admin'
      privatekey_path: /var/tmp/ansible/kafka/kafka-{{ kafka_cluster_name }}-admin.key
      certificate_path: /var/tmp/ansible/kafka/kafka-{{ kafka_cluster_name }}-admin.crt
      passphrase: '{{ kafka_admin_keystore_password }}'
      owner: kafka
      group: kafka
      mode: '0440'
      state: present

  - name: Generate or retrieve the password for the Kafka admin user
    set_fact:
      kafka_admin_user_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/kafka-admin-user-password chars=ascii_letters,digits length=16') }}"

  - name: Set the password for the Kafka admin user in ZooKeeper (DC1)
    shell:
      cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_etc_directory }}/conf/server.properties --zookeeper {{ kafka_zookeeper_dc1_actual_hosts[0] }}:{{ kafka_server_zookeeper_secure_client_port }} --alter --entity-type users --entity-name {{ kafka_admin_user_username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_admin_user_password }}],SCRAM-SHA-512=[password={{ kafka_admin_user_password }}]'
    when: (((kafka_server_dc1_actual_hosts|length) > 0) and (kafka_server_dc1_actual_hosts[((kafka_server_dc1_actual_hosts|length) - 1)] == inventory_hostname))
  - name: Set the password for the Kafka admin user in ZooKeeper (DC2)
    shell:
      cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_etc_directory }}/conf/server.properties --zookeeper {{ kafka_zookeeper_dc2_actual_hosts[0] }}:{{ kafka_server_zookeeper_secure_client_port }} --alter --entity-type users --entity-name {{ kafka_admin_user_username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_admin_user_password }}],SCRAM-SHA-512=[password={{ kafka_admin_user_password }}]'
    when: (((kafka_server_dc2_actual_hosts|length) > 0) and (kafka_server_dc2_actual_hosts[((kafka_server_dc2_actual_hosts|length) - 1)] == inventory_hostname))

  - name: Create the Kafka admin command configuration file
    template:
      src: admin-command.conf.j2
      dest: '{{ kafka_etc_directory }}/conf/admin-command.conf'
      owner: kafka
      group: kafka
      mode: '0440'

- name: Setup the Kafka MirrorMaker user
  block:
  - name: Generate or retrieve the password for the Kafka MirrorMaker user
    set_fact:
      kafka_mirrormaker_user_password: "{{ lookup('password', 'credentials/kafka/{{ kafka_cluster_name }}/kafka-mirrormaker-user-password chars=ascii_letters,digits length=16') }}"

  - name: Set the password for the Kafka MirrorMaker user in ZooKeeper (DC1)
    shell:
      cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_etc_directory }}/conf/server.properties --zookeeper {{ kafka_zookeeper_dc1_actual_hosts[0] }}:{{ kafka_server_zookeeper_secure_client_port }} --alter --entity-type users --entity-name {{ kafka_mirrormaker_user_username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_mirrormaker_user_password }}],SCRAM-SHA-512=[password={{ kafka_mirrormaker_user_password }}]'
    when: (((kafka_server_dc1_actual_hosts|length) > 0) and (kafka_server_dc1_actual_hosts[((kafka_server_dc1_actual_hosts|length) - 1)] == inventory_hostname))
  - name: Set the password for the Kafka MirrorMaker user in ZooKeeper (DC2)
    shell:
      cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_etc_directory }}/conf/server.properties --zookeeper {{ kafka_zookeeper_dc2_actual_hosts[0] }}:{{ kafka_server_zookeeper_secure_client_port }} --alter --entity-type users --entity-name {{ kafka_mirrormaker_user_username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_mirrormaker_user_password }}],SCRAM-SHA-512=[password={{ kafka_mirrormaker_user_password }}]'
    when: (((kafka_server_dc2_actual_hosts|length) > 0) and (kafka_server_dc2_actual_hosts[((kafka_server_dc2_actual_hosts|length) - 1)] == inventory_hostname))

- name: Create the Kafka profile file
  template:
    src: kafka.sh.j2
    dest: /etc/profile.d/kafka.sh

- name: Add the aliases for the Kafka tools to the /etc/profile.d/kafka.sh file
  block:
  - name: Add the kafka-acls alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-acls'
      line: alias kafka-acls='/opt/kafka/bin/kafka-acls.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-broker-api-versions alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-broker-api-versions'
      line: alias kafka-broker-api-versions='/opt/kafka/bin/kafka-broker-api-versions.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-configs alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-configs='
      line: alias kafka-configs='KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_etc_directory }}/conf/server.properties --zookeeper {{ groups['kafka_zookeeper'][0] }}:{{ kafka_server_zookeeper_secure_client_port }}'

  - name: Add the kafka-configs-brokers alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-configs-brokers'
      line: alias kafka-configs='/opt/kafka/bin/kafka-configs.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-consumer-groups alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-consumer-groups'
      line: alias kafka-consumer-groups='/opt/kafka/bin/kafka-consumer-groups.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-delegation-tokens alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-delegation-tokens'
      line: alias kafka-delegation-tokens='/opt/kafka/bin/kafka-delegation-tokens.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-delete-records alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-delete-records'
      line: alias kafka-delete-records='/opt/kafka/bin/kafka-delete-records.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-leader-election alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-leader-election'
      line: alias kafka-leader-election='/opt/kafka/bin/kafka-leader-election.sh --admin.config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-log-dirs alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-log-dirs'
      line: alias kafka-log-dirs='/opt/kafka/bin/kafka-log-dirs.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-reassign-partitions alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-reassign-partitions'
      line: alias kafka-reassign-partitions='/opt/kafka/bin/kafka-reassign-partitions.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

  - name: Add the kafka-topics alias to the /etc/profile.d/kafka.sh file
    lineinfile:
      dest: /etc/profile.d/kafka.sh
      state: present
      regexp: '^%alias kafka-topics'
      line: alias kafka-topics='/opt/kafka/bin/kafka-topics.sh --command-config {{ kafka_etc_directory }}/conf/admin-command.conf --bootstrap-server {{ inventory_hostname }}:{{ kafka_secure_broker_port }}'

- name: Restart the Kafka service if required
  systemd:
    name: kafka.service
    state: restarted
    enabled: yes
    daemon_reload: yes
  when: ((kafka_ca_copy_result.changed == True) or (kafka_server_private_key_copy_result.changed == True) or (kafka_server_certificate_copy_result.changed == True) or (kafka_server_configuration_template_result.changed == True) or (kafka_server_service_file_template_result.changed == True))
