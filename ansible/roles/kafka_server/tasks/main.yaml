---
# file: roles/kafka_server/tasks/main.yaml

- name: Create the /var/tmp/ansible/kafka/{{ role_name }} directory
  file:
    path: /var/tmp/ansible/kafka/{{ role_name }}
    owner: 'root'
    group: 'root'
    mode: '0700'
    state: directory


#  ____  _____ _____   _____ _    ____ _____ ____
# / ___|| ____|_   _| |  ___/ \  / ___|_   _/ ___|
# \___ \|  _|   | |   | |_ / _ \| |     | | \___ \
#  ___) | |___  | |   |  _/ ___ \ |___  | |  ___) |
# |____/|_____| |_|   |_|/_/   \_\____| |_| |____/
#
- set_fact:
    kafka_cluster_name: ''

- set_fact:
    kafka_cluster_name: '{{ item }}'
  when: (('kafka_server_hosts' in kafka_config.clusters[item]) and (ansible_fqdn in kafka_config.clusters[item].kafka_server_hosts))
  loop: '{{ kafka_config.clusters | flatten(1) }}'

- fail:
    msg: "The Kafka Server host {{ ansible_fqdn }} is not associated with a Kafka cluster"
  when: ((kafka_cluster_name is not defined) or (kafka_cluster_name == None) or (kafka_cluster_name == ''))

- debug:
    msg: 'Cluster Name: {{ kafka_cluster_name }}'

- set_fact:
    zookeeper_hosts: "{{ kafka_config.clusters[kafka_cluster_name].zookeeper_hosts | intersect(groups['kafka_zookeeper']|default([])) }}"

- debug:
    msg: 'ZooKeeper hosts: {{ zookeeper_hosts }}'

- set_fact:
    kafka_server_hosts: "{{ kafka_config.clusters[kafka_cluster_name].kafka_server_hosts | intersect(groups['kafka_server']|default([])) }}"

- debug:
    msg: 'Kafka Server hosts: {{ kafka_server_hosts }}'

# Determine the Kafka MirrorMaker users, which include the MirrorMaker user for this
# cluster and the users used by the MirrorMaker instances for the clusters that replicate
# to this cluster.
- set_fact:
    kafka_server_mirrormaker_users: [ "{{ 'mirrormaker-' + kafka_cluster_name.replace('_', '-') }}" ]
  when: ('kafka_mirrormaker_hosts' in kafka_config.clusters[kafka_cluster_name])

- set_fact:
    kafka_server_mirrormaker_users: [ ]
  when: ('kafka_mirrormaker_hosts' not in kafka_config.clusters[kafka_cluster_name])

- set_fact:
    kafka_server_mirrormaker_users: "{{ kafka_server_mirrormaker_users + [ 'mirrormaker-' + item.replace('_', '-') ] }}"
  loop: '{{ kafka_config.clusters | flatten(1) }}'
  when: ((kafka_config.clusters[item].replicate_to_cluster is defined) and (kafka_config.clusters[item].replicate_to_cluster != None) and (kafka_config.clusters[item].replicate_to_cluster == kafka_cluster_name))

- debug:
    msg: 'Kafka MirrorMaker users: {{ kafka_server_mirrormaker_users }}'

- set_fact:
    kafka_server_rack: default

- set_fact:
    kafka_server_rack: "{{ kafka_config.clusters[kafka_cluster_name].kafka_server_racks[ansible_fqdn] }}"
  when: ((kafka_config.clusters[kafka_cluster_name].kafka_server_racks is defined) and (kafka_config.clusters[kafka_cluster_name].kafka_server_racks[ansible_fqdn] is defined))

- debug:
    msg: 'Kafka server rack: {{ kafka_server_rack }}'


#   ___  ____       ____  ____  _____ ____ ___ _____ ___ ____
#  / _ \/ ___|     / ___||  _ \| ____/ ___|_ _|  ___|_ _/ ___|
# | | | \___ \ ____\___ \| |_) |  _|| |    | || |_   | | |
# | |_| |___) |_____|__) |  __/| |__| |___ | ||  _|  | | |___
#  \___/|____/     |____/|_|   |_____\____|___|_|   |___\____|
#
- include_tasks: ubuntu.yaml
  when: ansible_distribution == 'Ubuntu'
  tags:
  - unbound

- include_tasks: redhat.yaml
  when: ansible_os_family == 'RedHat'
  tags:
  - unbound


#  _  __    _    _____ _  __    _      ____  _____ ______     _______ ____
# | |/ /   / \  |  ___| |/ /   / \    / ___|| ____|  _ \ \   / / ____|  _ \
# | ' /   / _ \ | |_  | ' /   / _ \   \___ \|  _| | |_) \ \ / /|  _| | |_) |
# | . \  / ___ \|  _| | . \  / ___ \   ___) | |___|  _ < \ V / | |___|  _ <
# |_|\_\/_/   \_\_|   |_|\_\/_/   \_\ |____/|_____|_| \_\ \_/  |_____|_| \_\
#
- name: Create the credentials directory
  local_action: file path="{{ credentials_root }}/kafka/{{ kafka_cluster_name }}" state="directory"
  become: false

- name: Add the {{ kafka_config.kafka_server.group }} group
  group:
    name: '{{ kafka_config.kafka_server.group }}'
    gid: '{{ kafka_config.kafka_server.group_id }}'
    state: present

- name: Add the {{ kafka_config.kafka_server.user }} user
  user:
    name: '{{ kafka_config.kafka_server.user }}'
    uid: '{{ kafka_config.kafka_server.user_id }}'
    group: '{{ kafka_config.kafka_server.group }}'
    create_home: yes
    state: present

- name: Create the {{ kafka_config.kafka_server.etc_directory }} directory
  file:
    path: '{{ kafka_config.kafka_server.etc_directory }}'
    owner: '{{ kafka_config.kafka_server.user }}'
    group: '{{ kafka_config.kafka_server.group }}'
    mode: '0550'
    state: directory

- name: Create the {{ kafka_config.kafka_server.etc_directory }}/conf directory
  file:
    path: '{{ kafka_config.kafka_server.etc_directory }}/conf'
    owner: '{{ kafka_config.kafka_server.user }}'
    group: '{{ kafka_config.kafka_server.group }}'
    mode: '0550'
    state: directory

- name: Setup the Kafka Server keystore and CA truststore
  block:
  - name: Create the {{ kafka_config.kafka_server.etc_directory }}/pki directory
    file:
      path: '{{ kafka_config.kafka_server.etc_directory }}/pki'
      owner: '{{ kafka_config.kafka_server.user }}'
      group: '{{ kafka_config.kafka_server.group }}'
      mode: '0550'
      state: directory

  - name: Copy the Kafka Server CA certificate
    copy:
      src: '{{ pki_root }}/{{ role_name }}/{{ kafka_cluster_name }}/ca.crt'
      dest: '/var/tmp/ansible/kafka/{{ role_name }}/ca.crt'
    notify: restart kafka
    register: ca_certificate_copy_result

  - name: Copy the Kafka Server private key ({{ ansible_hostname }}.key)
    copy:
      src: '{{ pki_root }}/{{ role_name }}/{{ kafka_cluster_name }}/{{ ansible_hostname }}.key'
      dest: '/var/tmp/ansible/kafka/{{ role_name }}/{{ ansible_hostname }}.key'
    notify: restart kafka
    register: kafka_server_private_key_copy_result

  - name: Copy the Kafka Server certificate ({{ ansible_hostname }}.crt)
    copy:
      src: '{{ pki_root }}/{{ role_name }}/{{ kafka_cluster_name }}/{{ ansible_hostname }}.crt'
      dest: '/var/tmp/ansible/kafka/{{ role_name }}/{{ ansible_hostname }}.crt'
    notify: restart kafka
    register: kafka_server_certificate_copy_result

  - name: Generate or retrieve the password for the Kafka Server keystore
    set_fact:
      kafka_server_keystore_password: "{{ lookup('password', '{{ credentials_root }}/kafka/{{ kafka_cluster_name }}/{{ ansible_hostname }}-keystore-password chars=ascii_letters,digits length=16') }}"

  - name: Generate or retrieve the password for the CA truststore
    set_fact:
      ca_truststore_password: "{{ lookup('password', '{{ credentials_root }}/kafka/{{ kafka_cluster_name }}/ca-truststore-password chars=ascii_letters,digits length=16') }}"

  - name: Generate the Kafka Server keystore and CA truststore
    block:
    - name: Generate the Kafka Server PKCS12 keystore
      openssl_pkcs12:
        action: export
        path: '{{ kafka_config.kafka_server.etc_directory }}/pki/{{ ansible_hostname }}.p12'
        friendly_name: "{{ ansible_hostname }}"
        privatekey_path: /var/tmp/ansible/kafka/{{ role_name }}/{{ ansible_hostname }}.key
        certificate_path: /var/tmp/ansible/kafka/{{ role_name }}/{{ ansible_hostname }}.crt
        passphrase: '{{ kafka_server_keystore_password }}'
        owner: '{{ kafka_config.kafka_server.user }}'
        group: '{{ kafka_config.kafka_server.group }}'
        mode: '0440'
        state: present

    - name: Remove the Kafka Server CA PKCS12 truststore if it already exists
      file:
        path: '{{ kafka_config.kafka_server.etc_directory }}/pki/ca.p12'
        state: absent

    - name: Generate the Kafka Server CA PKCS12 truststore
      shell:
        cmd: keytool -importcert -noprompt -trustcacerts -alias "ca" -file /var/tmp/ansible/kafka/{{ role_name }}/ca.crt -keystore '{{ kafka_config.kafka_server.etc_directory }}/pki/ca.p12' -storetype PKCS12 -storepass '{{ ca_truststore_password }}'

    - name: Set the permissions for the Kafka Server CA PKCS12 truststore
      file:
        path: '{{ kafka_config.kafka_server.etc_directory }}/pki/ca.p12'
        owner: '{{ kafka_config.kafka_server.user }}'
        group: '{{ kafka_config.kafka_server.group }}'
        mode: '0440'

    when: ((ca_certificate_copy_result.changed == True) or (kafka_server_private_key_copy_result.changed == True) or (kafka_server_certificate_copy_result.changed == True))

- name: Create the {{ kafka_config.kafka_server.log_directory }} directory
  file:
    path: '{{ kafka_config.kafka_server.log_directory }}'
    owner: '{{ kafka_config.kafka_server.user }}'
    group: '{{ kafka_config.kafka_server.group }}'
    mode: '0750'
    state: directory

- name: Create the {{ kafka_config.kafka_server.data_directory }} directory
  file:
    path: '{{ kafka_config.kafka_server.data_directory }}'
    owner: '{{ kafka_config.kafka_server.user }}'
    group: '{{ kafka_config.kafka_server.group }}'
    mode: '0750'
    state: directory

- name: Create the Kafka Server configuration file
  template:
    src: server.properties.j2
    dest: '{{ kafka_config.kafka_server.etc_directory }}/conf/server.properties'
    owner: '{{ kafka_config.kafka_server.user }}'
    group: '{{ kafka_config.kafka_server.group }}'
    mode: '0440'
  notify: restart kafka

# NOTE: This is the password used to secure the connections the Kafka Server makes to ZooKeeper, which is generated by the kafka-zookeeper role
- name: Generate or retrieve the password for the ZooKeeper kafka user
  set_fact:
    kafka_server_zookeeper_password: "{{ lookup('password', '{{ credentials_root }}/kafka/{{ kafka_cluster_name }}/zookeeper-kafka-user-password chars=ascii_letters,digits length=16') }}"

# NOTE: This is the password used to secure the inter broker connections
- name: Generate or retrieve the password for the Kafka Server user
  set_fact:
    kafka_server_broker_user_password: "{{ lookup('password', '{{ credentials_root }}/kafka/{{ kafka_cluster_name }}/kafka-server-broker-user-password chars=ascii_letters,digits length=16') }}"

- name: Create the Kafka Server JAAS configuration file
  template:
    src: server-jaas.conf.j2
    dest: '{{ kafka_config.kafka_server.etc_directory }}/conf/server-jaas.conf'
    owner: '{{ kafka_config.kafka_server.user }}'
    group: '{{ kafka_config.kafka_server.group }}'
    mode: '0440'
  notify: restart kafka

- name: Configure the kafka service
  template:
    src: kafka.service.j2
    dest: /lib/systemd/system/kafka.service
  notify: restart kafka
  register: kafka_server_service_file_template_result

- name: Reload the kafka service if required
  systemd:
    name: kafka
    daemon_reload: yes
  when: (kafka_server_service_file_template_result.changed == True)

# NOTE: This is the password for the user that is used to secure the inter-broker connections
- name: Set the password for the Kafka Server user in ZooKeeper
  shell:
    cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_config.kafka_server.etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_config.kafka_server.etc_directory }}/conf/server.properties --zookeeper {{ zookeeper_hosts[0] }}:{{ kafka_config.kafka_server.zookeeper.secure_client_port }} --alter --entity-type users --entity-name {{ kafka_config.kafka_server.users.broker.username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_server_broker_user_password }}],SCRAM-SHA-512=[password={{ kafka_server_broker_user_password }}]'
  when: (kafka_server_hosts[(kafka_server_hosts|length) - 1] == ansible_fqdn)
  register: set_kafka_server_broker_user_password_in_zookeeper_result

- name: Ensure that the kafka service is started
  systemd:
    name: kafka
    state: started
    enabled: yes

- name: Setup the Kafka admin user
  block:
  - name: Generate or retrieve the password for the Kafka admin keystore
    set_fact:
      kafka_admin_keystore_password: "{{ lookup('password', '{{ credentials_root }}/kafka/{{ kafka_cluster_name }}/kafka-admin-keystore-password chars=ascii_letters,digits length=16') }}"

  - name: Copy the Kafka admin private key (kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}.key)
    copy:
      src: "{{ pki_root }}/{{ role_name }}/{{ kafka_cluster_name }}/kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}.key"
      dest: "/var/tmp/ansible/kafka/{{ role_name }}/kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}.key"

  - name: Copy the Kafka admin certificate (kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}.crt)
    copy:
      src: "{{ pki_root }}/{{ role_name }}/{{ kafka_cluster_name }}/kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}.crt"
      dest: "/var/tmp/ansible/kafka/{{ role_name }}/kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}.crt"

  - name: Generate the Kafka admin PKCS12 keystore
    openssl_pkcs12:
      action: export
      path: '{{ kafka_config.kafka_server.etc_directory }}/pki/admin.p12'
      friendly_name: "kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}"
      privatekey_path: /var/tmp/ansible/kafka/{{ role_name }}/kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}.key
      certificate_path: /var/tmp/ansible/kafka/{{ role_name }}/kafka-admin-{{ kafka_cluster_name.replace('_', '-') }}.crt
      passphrase: '{{ kafka_admin_keystore_password }}'
      owner: '{{ kafka_config.kafka_server.user }}'
      group: '{{ kafka_config.kafka_server.group }}'
      mode: '0440'
      state: present

  - name: Generate or retrieve the password for the Kafka admin user
    set_fact:
      kafka_server_admin_user_password: "{{ lookup('password', '{{ credentials_root }}/kafka/{{ kafka_cluster_name }}/kafka-server-admin-user-password chars=ascii_letters,digits length=16') }}"

  - name: Set the password for the Kafka admin user in ZooKeeper
    shell:
      cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_config.kafka_server.etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_config.kafka_server.etc_directory }}/conf/server.properties --zookeeper {{ zookeeper_hosts[0] }}:{{ kafka_config.kafka_server.zookeeper.secure_client_port }} --alter --entity-type users --entity-name {{ kafka_config.kafka_server.users.admin.username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_server_admin_user_password }}],SCRAM-SHA-512=[password={{ kafka_server_admin_user_password }}]'
    when: (kafka_server_hosts[(kafka_server_hosts|length) - 1] == ansible_fqdn)

  - name: Create the Kafka admin command configuration file
    template:
      src: admin-command.conf.j2
      dest: '{{ kafka_config.kafka_server.etc_directory }}/conf/admin-command.conf'
      owner: '{{ kafka_config.kafka_server.user }}'
      group: '{{ kafka_config.kafka_server.group }}'
      mode: '0440'

  - name: Copy the Prometheus JMX Exporter configuration file
    copy:
      src: files/prometheus_jmx_exporter.yaml
      dest: '{{ kafka_config.kafka_server.etc_directory }}/conf/prometheus_jmx_exporter.yaml'
    when: ((kafka_config.kafka_server.prometheus_jmx_exporter.enabled is defined) and (kafka_config.kafka_server.prometheus_jmx_exporter.enabled != None) and (kafka_config.kafka_server.prometheus_jmx_exporter.enabled == true))

- name: Setup the Kafka MirrorMaker users
  include_tasks: roles/kafka_server/tasks/provision_kafka_mirrormaker_user.yaml
  loop: '{{ kafka_server_mirrormaker_users }}'
  loop_control:
    loop_var: kafka_server_mirrormaker_user_username
  when: (kafka_server_hosts[(kafka_server_hosts|length) - 1] == ansible_fqdn)

- name: Create the Kafka profile file
  template:
    src: kafka.sh.j2
    dest: /etc/profile.d/kafka.sh
    owner: 'root'
    group: 'root'
    mode: '0755'

- name: Generate or retrieve the password for the Burrow ZooKeeper user
  set_fact:
    kafka_server_burrow_user_password: "{{ lookup('password', '{{ credentials_root }}/kafka/{{ kafka_cluster_name }}/kafka-server-burrow-user-password chars=ascii_letters,digits length=16') }}"

- debug:
    msg: 'Burrow user password: {{ kafka_server_burrow_user_password }}'

- name: Set the password for the Burrow user in ZooKeeper
  shell:
    cmd: KAFKA_OPTS="-Djava.security.auth.login.config={{ kafka_config.kafka_server.etc_directory }}/conf/server-jaas.conf" /opt/kafka/bin/kafka-configs.sh --zk-tls-config-file {{ kafka_config.kafka_server.etc_directory }}/conf/server.properties --zookeeper {{ zookeeper_hosts[0] }}:{{ kafka_config.kafka_server.zookeeper.secure_client_port }} --alter --entity-type users --entity-name {{ kafka_config.kafka_server.users.burrow.username }} --add-config 'SCRAM-SHA-256=[iterations=8192,password={{ kafka_server_burrow_user_password }}],SCRAM-SHA-512=[password={{ kafka_server_burrow_user_password }}]'
  when: (kafka_server_hosts[(kafka_server_hosts|length) - 1] == ansible_fqdn)
  register: set_kafka_server_burrow_user_password_in_zookeeper_result





